<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>The SSL Keystore Configuration.</title>
    <!--#include virtual="../../head.html" -->
</head>
<body class="composite">
<!--#include virtual="../../header.html" -->
<h2>The SSL Keystore Configuration.</h2>
<p>Scope: client and server, all versions.</p>

A certificate may be needed for accessing another system. Examples are accessing a MyProxy
from an OA4MP server or having an OA4MP client that has been issued a specific cert.  A <i>keystore</i>
is a single file that contains X509 certificates, possibly associated certificate
chains and private keys. The two major formats
supported are <a href="http://en.wikipedia.org/wiki/PKCS">PKCS12</a> or JKS (Java KeyStore).
OA4MP supports both. Java comes bundled with a set of certificates of common commercial certification
authorities. This may be used or not.

Just to make this a bit clearer, any time your browser goes to a site that requires you to accept
their certificates before connecting, you have hit the case exactly for using this feature: Your browser
has a clickable thingie for certificates, but your java virtual machine does not.

<h3>Supported Properties</h3>
<table style="text-align: left; width: 50%;" border="1" cellspacing="2" cellpadding="2">
    <tbody>
    <tr>
        <td style="vertical-align: top;">Name</td>
        <td style="vertical-align: top;">Required</td>
        <td style="vertical-align: top;">Default</td>
        <td style="vertical-align: top;"></td>
    </tr>
    <tr>
        <td style="vertical-align: top;">path</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">-</td>
        <td style="vertical-align: top;">The absolute path to the keystore.</td>
    </tr>
    <tr>
        <td style="vertical-align: top;">type</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">-</td>
        <td style="vertical-align: top;">The type of the keystore, e.g. "pkcs12" or "jks". </td>
    </tr>
    <tr>
        <td style="vertical-align: top;">password</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">-</td>
        <td style="vertical-align: top;">The password for the keystore</td>
    </tr>
    <tr>
        <td style="vertical-align: top;">factory</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">-</td>
        <td style="vertical-align: top;">The name of the factory, e.g. SunX509, which will be used to create the key manager factory.
        This creates any key managers. You should generally not need to change this.</td>
    </tr>
    <tr>
        <td style="vertical-align: top;">useJavaKeystore</td>
        <td style="vertical-align: top;">T</td>
        <td style="vertical-align: top;">true</td>
        <td style="vertical-align: top;">Use the default Java keystore (which normally resides
            at $JAVA_HOME/lib/security/cacerts) in addition to the one given in the path. If this
        element is omitted it is the same as setting this option to "true". Generally, if this is disabled then no
        commercial certificates will be recognized by SSL. This might be useful in certain cases, but
        should probably be enabled unless you have good reasons otherwise.</td>
    </tr>
    </tbody>
</table>

<h3>A client example.</h3>
In this case a developer must use an OA4MP server that has a self-signed (e.g. a test server,
or an exceptionally well locked down one).
Since the client will not be able to connect to such a server otherwise (a low-level SSL
exception will be generated), a certificate must be specified.

<pre>
&lt;config&gt;
   &lt;client name="my-secure-client"&gt;
      &lt;keystore path="/var/www/config/certs/2014-03-18/server.bigstate.edu.p12"
           type="pkcs12"
           password="uninterestingFakePassword"
           factory="SunX509"
           useJavaKeystore="false"/&gt;
    &lt;-- Bunch of other configuration stuff &gt;
    &lt;/client&gt;

&lt;/config&gt;

</pre>

In this case the PKCS12 store is located at the given path. Since the default Java keystore is not used,
this client cannot connect to any other server.

Read <a href="../../server/configuration/server-myproxy.html">configuring Myproxy with a client certificate</a>
if you looking for a server-side example of this.


<!--#include virtual="../../footer.html" -->

</body>
</html>