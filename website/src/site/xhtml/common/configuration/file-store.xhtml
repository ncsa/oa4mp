<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>The File Store Configuration.</title>
    <!--#include virtual="../../head.html" -->
</head>
<body class="composite">
<!--#include virtual="../../header.html" -->
<h2>The File Store Configuration.</h2>
<p>Scope: client and server, all versions.</p>

<p>A file store will persist items in a local file system. It requires either</p>
<ul>
    <li>A single directory under which any required directories will be created, or</li>
    <li>two directories, a data directory and an index directory</li>
</ul>

In both cases the system will manage these in the sense that they will be created as needed along with
any needed subdirectories.

<table style="text-align: left; width: 100%;" border="1" cellspacing="2" cellpadding="2">
    <tbody>
    <tr>
        <td style="vertical-align: top;">path</td>
        <td style="vertical-align: top;">Single top-level directory. Any required subdirectories will be made under this
            one.
        </td>
    </tr>
<!--
     CIL-1153: dataPath and indexPath should not be used since they no longer correspond to the inner
     workings of the store -->
    <tr>
           <td style="vertical-align: top;">removeEmptyFiles</td>
           <td style="vertical-align: top;">Remove any empty files in the store. The default is <b>true</b> meaning that empty files will
           be deleted if found in the file store. </td>
       </tr>
    </tbody>

</table>
<p>
    You <b>must</b> specify  the <span style="font-weight: bold;">path</span>. The effect will be to create (and manage)
    directories for each store.
</p>

<p>A file-based store system is a great, easy way to set up your storage. It require nothing more than the correct
    permissions. Remember though that you should do the usual administrative tasks of backing it up as needed and
    protecting it from prying eyes since it will contain sensitive information. Both clients and servers support file stores.</p>
<h2>Server examples</h2>
<h3>Example 1.</h3>

<pre>
&lt;service name="default" address="https://myservice.org:8443/oauth"&gt;
   &lt;fileStore path="/var/www/storage"&gt;
      &lt;transactions/&gt;
      &lt;clients/&gt;
      &lt;clientApprovals/&gt;
   &lt;/fileStore&gt;
&lt;/service&gt;
</pre>
<p>This sets up a fully functioning service with local storage and using the default MyProxy service. This
would create the following:</p>
<ul>
    <li>/var/www/storage/transactions/dataPath</li>
    <li>/var/www/storage/transactions/indexPath</li>
    <li>/var/www/storage/clients/dataPath</li>
    <li>/var/www/storage/clients/indexPath</li>
    <li>/var/www/storage/clientApprovals/dataPath</li>
    <li>/var/www/storage/clientApprovals/indexPath</li>
</ul>

<h2>A client example</h2>
<h3>Using a file store in a client</h3>
A client file store can be applied to
<pre>
&lt;config&gt;
   &lt;client name="my-cfg"&gt;
        &lt;fileStore path="/var/www/client/storage"
                 removeEmptyFiles="false"&gt;
          &lt;<a href="../../client/dtd/asset-store.html">assetStore</a>&gt;
        &lt;/fileStore&gt;
        &lt;!-- other stuff --&gt;
&lt;/config&gt;
</pre>
This makes the asset store in the given directory. This will not remove empty files in the archive when it finds them.
<!--#include virtual="../../footer.html" -->

</body>
</html>