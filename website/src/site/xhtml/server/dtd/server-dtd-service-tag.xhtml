<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>The Service Tag.</title>
    <!--#include virtual="../../head.html" -->
</head>
<body class="composite">
<!--#include virtual="../../header.html" -->

<h2>The Service Tag.</h2>

<p>This is the top-level tag for a server configuration. There may be several of these in a single configuration
    file, all given different names.</p>
<table style="text-align: left; width: 100%;" border="1" cellspacing="2" cellpadding="2">
    <tbody>
    <tr>
        <td style="vertical-align: top;">Attribute</td>
        <td style="vertical-align: top;">Required?</td>
        <td style="vertical-align: top;">Default</td>
        <td style="vertical-align: top;">Description</td>
    </tr>
    <tr id="acNewClientNotify">
        <td style="vertical-align: top;">notifyACEmailAddresses</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">false</td>
        <td style="vertical-align: top;">A semi-colon separated list of email addresses where notifications
            from the client management servlet are sent on actions. Note that are only
            sent if the admin client has been enabled to do so.
        </td>
    </tr>
    <tr id="address">
        <td style="vertical-align: top;">address</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">N/A</td>
        <td style="vertical-align: top;">The address associated with this service. Normally this is not needed unless
            either there is some aliasing used by the host or safe garbage collection
            is needed. Otherwise the host name is taken from the servlet itself and used in
            constructing urls that point to this server. For instance, if there is a server farm with a given
            external-facing address which will be resolved to one of the members based on load-balancing, this
            would be the external-facing address.
        </td>
    </tr>
    <tr id="accessTokenLifetime">
        <td style="vertical-align: top;">accessTokenLifetime</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">900</td>
        <td style="vertical-align: top;">Deprecated. Use defaultAccessTokenLifetime instead.
        </td>
    </tr>
    <tr id="authorizationGrantLifetime">
        <td style="vertical-align: top;">authorizationGrantLifetime</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">900</td>
        <td style="vertical-align: top;">"<span style="background-color: #ff6600;">OAuth 2</span>
            specific. This will set the lifetime of authorization grants, in seconds, issued by
            the server. The default is 900 seconds = 15 minutes. As long as the grant has not expired,
            the second leg of the exchange (getting an access token) can be done. If there is too
            long a gap between authentication and getting an access token, it will fail. Generally
            the default is quite reasonable. See note below on units.
        </td>
    </tr>
    <tr id="cleanupInterval">
        <td style="vertical-align: top;">cleanupInterval</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">20 minutes</td>
        <td style="vertical-align: top;">How often should the cleanup thread run (in seconds). To disable
            cleanup completely, set this â‰¤ 0 and do not set alarms.
        </td>
    </tr>
    <tr id="cleanupAlarms">
        <td style="vertical-align: top;">cleanupAlarms</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">N/A</td>
        <td style="vertical-align: top;">Comma delimited list of times of the form hh:mm:ss.
            Times are on a 24 hour clock and fractions of seconds are ignored.
            Cleanups will happen daily at these times.
            Note that alarms have right of way in that if you define alarms
            and a cleanupInterval, the alarms will be done. If you do not want alarms,
            omit this entry. <br/><br/>
            E.g.<br/>
            cleanupAlarms="06:00:00, 18:30:00"<br/><br/>
            Would have garbage collection run daily at 6:00 am and 6:30 pm.
        </td>
    </tr>
    <tr id="cleanupFailOnErrors">
        <td style="vertical-align: top;">cleanupFailOnErrors</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">true</td>
        <td style="vertical-align: top;">If cleanup threads should continue processing if there is an error. A typical
            casse is that there
            are munged or otherwise unparseable files in a transaction file store (e.g. someone copied
            a non-transaction to the directory). If cleaup stops when it hits a bad file, then <b>no</b> more
            cleanup will happen and stale file store entries will accumulate. If it's an active server,
            this may happen quite quickly. In other contexts, such as a database store, a failure often means
            that the database itself is unreachable and attempting further processing is a waste of
            resources. Note that a list of failures is written to the log if debugging is enabled.
        </td>
    </tr>
    <tr id="cleanupLockingEnabled">
        <td style="vertical-align: top;">cleanupLockingEnabled</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">false</td>
        <td style="vertical-align: top;">Enabled locking the stores during cleanup. This is useful if the store is shared
            among OA4MP instances (e.g. there are several behind a load balancer that share the same database).
            If you do not have multiple concurrent instances of OA4MP running,
            you do not need to enable this feature.
        </td>
    </tr>
    <tr id="clientSecretLength">
        <td style="vertical-align: top;">clientSecretLength</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">64</td>
        <td style="vertical-align: top;"><span style="background-color: #ff6600;">OAuth 2</span>
            specific. The server generates client secrets of this length in bytes, then displays them
            to the client in Base64 encoding, which should be returned verbatim to the server. Note that
            the returned secret is URL safe encoded as well. The default is 64 bytes = 512 bits.
        </td>
    </tr>
    <tr id="debug">
        <td style="vertical-align: top;">debug</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">"warn"</td>
        <td style="vertical-align: top;">Enable debugging for this service. This will be written to the Tomcat logs and
            might be rather verbose. Use it only if you need it. The levels supported are (in order of
            increasing verbosity) "off", "info", "warn", "error", "severe", "trace". Setting debug to
            "trace" will dump out virtually everything and give a running account of the operation of the
            service. This may be very, very large.
        </td>
    </tr>
    <tr id="defaultAccessTokenLifetime">
        <td style="vertical-align: top;">defaultAccessTokenLifetime</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">900</td>
        <td style="vertical-align: top;"><span style="background-color: #ff6600;">OAuth 2</span>
            specific. This will set the lifetime of access tokens, in seconds, issued by
            the server. The default is 900 seconds = 15 minutes. Note that generally access tokens should have
            much shorter lifetime than refresh tokens. The reason is that access tokens allow access to a resource
            and refresh tokens let a client get access tokens. Best practices is that an access token is gotten
            for a specific task and should be therefore short lived. Clients may request different lifetimes, but
            are limited to the maximum value as set below. See note below on units.
        </td>
    </tr>
    <tr id="defaultIDTokenLifetime">
        <td style="vertical-align: top;">defaultIDTokenLifetime</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">900</td>
        <td style="vertical-align: top;"><span style="background-color: #ff6600;">OAuth 2</span>
            specific. This will set the lifetime of id tokens, in seconds, issued by
            the server. The default is 900 seconds = 15 minutes. Clients may request different lifetimes, but
            are limited to the maximum value as st below. See note below on units.
        </td>
    </tr>
    <tr id="demoModeEnabled">
        <td style="vertical-align: top;">demoModeEnabled</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">false</td>
        <td style="vertical-align: top;">Enable demo mode. This just shuts off authorization and is intended that an
            administrator
            can quickly set up OA4MP to evaluate it. See <a href="../manuals/demo-mode.html">using demo mode</a>.
        </td>
    </tr>
    <tr id="disableDefaultStores">
        <td style="vertical-align: top;">disableDefaultStores</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">true</td>
        <td style="vertical-align: top;">Allow the server
            to use memory stores if no other store is explicitly set. If set to true, this will make the server throw
            an
            exception if there is no store configured. The default is true precisely to force you to explicitly enable
            this,
            since otherwise a store misconfiguration might be a silent error and everything (such as client
            registrations, approvals, etc.) might end up in memory where they would vanish at service restart.
        </td>
    </tr>
    <tr id="enableDeviceFlow">
        <td style="vertical-align: top;">enableDeviceFlow</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">false</td>
        <td style="vertical-align: top;">Boolean value. If true, the support for the device authorization flow as per
            RFC 8628 is enabled
            with defaults. Alternately there is a <a href="../configuration/device-flow-servlet-configuration.html">device
                flow servlet configuration</a>
            that will be used.
        </td>
    </tr>

    <tr id="enableTokenExchange">
        <td style="vertical-align: top;">enableTokenExchange</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">true</td>
        <td style="vertical-align: top;">Boolean value. If true, the support for exchanging tokens as per RFC 8693 is
            enabled.
        </td>
    </tr>
    <tr id="enableTwoFactorSupport">
        <td style="vertical-align: top;">enableTwoFactorSupport</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">false</td>
        <td style="vertical-align: top;">Boolean value. If true, the support for two factor authentication is enabled.
        </td>
    </tr>
    <tr id="issuer">
        <td style="vertical-align: top;">issuer</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">(none)</td>
        <td style="vertical-align: top;"><span style="background-color: #ff6600;">OAuth 2</span> specific.
            The global default for the issuer. That is to say, this will be returned in the claims to the
            client. Note that this may be overridden by an administrative client or the client itself.
        </td>
    </tr>
    <tr id="maxAccessTokenLifetime">
        <td style="vertical-align: top;">maxAccessTokenLifetime</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">1800</td>
        <td style="vertical-align: top;">This is the largest access token lifetime, in seconds, that the server will
            permit,
            regardless of what is requested. Contrast this with the defaultAccessTokenLifetime property
            which is used if clients specify nothing. The default is 30 minutes or 1800 seconds.
            See note below on units.
        </td>
    </tr>
    <tr id="maxAllowedNewClientRequests">
        <td style="vertical-align: top;">maxAllowedNewClientRequests</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">unlimited</td>
        <td style="vertical-align: top;">In the registration client, this is the maximum number of pending
            client requests that the server will permit. Requests received after this limit is met will
            be rejected. This is to prevent denial of service attacks for thousands of client requests.
            Since such requests are normally not too frequent, this number can realistically be set low
            to 10 or 20 with no issue on a production system.
        </td>
    </tr>
    <tr id="maxAuthorizationGrantLifetime">
        <td style="vertical-align: top;">maxAuthorizationGrantLifetime</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">1800</td>
        <td style="vertical-align: top;">This is the largest authorization grant lifetime, in seconds, that the server
            will
            permit,
            regardless of what is requested. Note that there is no way for clients to request this
            except as part of a device flow. Contrast this with the defaultAuthorizationGrantLifetime property
            which is used if clients specify nothing. The default is 30 minutes or 1800 seconds.
            See note below on units.
        </td>
    </tr>
    <tr id="maxIDTokenLifetime">
        <td style="vertical-align: top;">maxIDTokenLifetime</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">maxAccessTokenLifetime</td>
        <td style="vertical-align: top;">This is the largest ID token lifetime, in seconds, that the server will
            permit,
            regardless of what is requested. Contrast this with the defaultIDTokenLifetime property
            which is used if clients specify nothing. The default is the same as for access tokens
            since that most often conforms to use patterns.
            See note below on units.
        </td>
    </tr>
    <tr id="maxClientRefreshTokenLifetime">
        <td style="vertical-align: top;">maxClientRefreshTokenLifetime</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">2592000</td>
        <td style="vertical-align: top;">"<span style="background-color: #ff6600;">OAuth 2</span>
            specific. This will set a global maximum on the server, in seconds, for refresh tokens a client
            may request at registration. The default is 13 months. Note that in practice this should
            <i>never</i> exceed the server default maximum, because the server default is always enforced.
            See note below on units.
        </td>
    </tr>
    <tr id="maxRefreshTokenLifetime">
        <td style="vertical-align: top;">maxRefreshTokenLifetime</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">2592000</td>
        <td style="vertical-align: top;">This is the largest refresh token lifetime in seconds that the server will
            permit,
            regardless of what is requested. Default is 30 days or 2592000 seconds.
            See note below on units.
        </td>
    </tr>
    <tr id="enableMonitor">
        <td style="vertical-align: top;">monitorEnable</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">false</td>
        <td style="vertical-align: top;">Enable monitoring of access to clients, admin clients, virtual organizations
            and (in CILogon) users. This will start a thread that will update the objects either
            at intervals (monitorInterval) or at given set times (monitorAlarms). The reason for this
            is that very high traffic servers should not hammer storage for every access. What this feature
            does is buffer the accesses and make a single update per object.
        </td>
    </tr>
    <tr id="monitorInterval">
        <td style="vertical-align: top;">monitorInterval</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">2 hours</td>
        <td style="vertical-align: top;">How often should the monitor thread run.</td>
    </tr>
    <tr id="monitorAlarms">
        <td style="vertical-align: top;">monitorAlarms</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">N/A</td>
        <td style="vertical-align: top;">Comma delimited list of times of the form hh:mm:ss.
            Times are on a 24 hour clock and fractions of seconds are ignored.
            Monitoring will happen daily at these times.
            Note that alarms have right of way in that if you define alarms
            and a monitorInterval, the alarms will be done. If you do not want alarms,
            omit this entry. <br/><br/>
            E.g.<br/>
            monitorAlarms="06:00:00, 18:30:00"<br/><br/>
            Would have updates run daily at 6:00 am and 6:30 pm.
        </td>
    </tr>

    <!--   ex.
                 enableMonitor="true"
             monitorInterval="60 sec"
             monitorAlarms="09:30:00, 09:00:00, 16:00:00,  12:00:00"
    -->
    <tr id="name">
        <td style="vertical-align: top;">name</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">(none)</td>
        <td style="vertical-align: top;">An arbitrary name for this configuration. Multiple configurations in a file are
            supported.
        </td>
    </tr>
    <tr id="OIDCEnabled">
        <td style="vertical-align: top;">OIDCEnabled</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">true</td>
        <td style="vertical-align: top;"><span style="background-color: #ff6600;">OAuth 2</span>
            This toggles OIDC support for the service. If true, then required claims (such as sibject) will be
            checked for and ID tokens will be generated. Also, any request that does not contain the scope of
            <b>openid</b>
            will be rejected. Note that if false, the service is OAuth 2.0 compliant, but not OIDC compliant.
        </td>
    </tr>
    <tr id="pingable">
        <td style="vertical-align: top;">pingable</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">true</td>
        <td style="vertical-align: top;">Boolean value. If true, then contacting a server endpoint (HTTP GET) with an
            argument of "ping"
            will result in a response with HTTP return code of 204. If false, then an 500 exception will be thrown on
            the server.
        </td>
    </tr>

    <tr id="pollingDirectory">
        <td style="vertical-align: top;">pollingDirectory</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">N/A</td>
        <td style="vertical-align: top;">This enables polling for client approvals. The meaning of this is
            that if there is a command line interface (CLI) which approves a client, a specific file is written
            to this directory which will be read at intervals by the server, telling it that a new approval has been
            written. This is because once a client configuration is loaded, it stays in memory. To disable this feature,
            do not set this. Note that the CLI should use the same configuration as the server.
        </td>
    </tr>
    <tr id="pollingInterval">
        <td style="vertical-align: top;">pollingInterval</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">N/A</td>
        <td style="vertical-align: top;">How frequently the polling directory will be accessed for new approvals.
            Note that this is ignored if polling is not enabled.
        </td>
    </tr>

    <tr id="printTSInDebug">
        <td style="vertical-align: top;">printTSInDebug</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">true</td>
        <td style="vertical-align: top;"><span style="background-color: #ff6600;">OAuth 2</span> If true, this tells the
            server to print all debug message with a leading timestamp. Some systems
            have multiple layers of logging and disabling this is needed.
            <b>Note:</b> on CILogon server deploys this is set to false automatically.
        </td>
    </tr>

    <tr id="qdlConfigName">
        <td style="vertical-align: top;">qdlConfigName</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">qdl-default</td>
        <td style="vertical-align: top;"><span style="background-color: #ff6600;">OAuth 2</span>If there is are
            multiple qdl configurations, this allows to specify the active
            one. If this is omitted, the assumption is that the default is
            named <b>qdl-default</b>, however, if there is only one
            QDL configuration, then that is used regardless of this setting.
        </td>
    </tr>
    <tr id="refreshTokenEnabled">
        <td style="vertical-align: top;">refreshTokenEnabled</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">false</td>
        <td style="vertical-align: top;"><span style="background-color: #ff6600;">OAuth 2</span>
            specific. This tells the server to issue refresh tokens. Setting this false means the server will
            not issue them, nor will clients be allowed to specify them at registration. Setting the
            value for the refreshTokenLifetime in the configuration will be ignored if the server
            does not issue refresh tokens.
        </td>
    </tr>
    <tr id="refreshTokenLifetime">
        <td style="vertical-align: top;">refreshTokenLifetime</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">1296000</td>
        <td style="vertical-align: top;">deprecated. Use maxRefreshTokenLifetime instead.
        </td>
    </tr>
    <tr id="rfc7636Required">
        <td style="vertical-align: top;">rfc7636Required</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">false</td>
        <td style="vertical-align: top;">Set to <code>true</code> if you want to <b>require</b> all
            public clients to use code challenges as per <a href="https://datatracker.ietf.org/doc/html/rfc7636">RFC
                7636</a>.
            Note that OA4MP will allow <i>any</i> client to send along a challenge. If this flag is set
            to true though, public clients will be required to use it or will be denied access.
        </td>
    </tr>
    <tr id="rtGracePeriod">
        <td style="vertical-align: top;">rtGracePeriod</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">-1</td>
        <td style="vertical-align: top;">For 0 â‰¤ values, this sets the lifetime in seconds of the refresh token on
            refresh.
            If the value is 0, this invalidates the token immediately. A value of -1 means to simply let
            the tokens age with their current lifetimes. Each client may have this set as well which will
            override the server setting. The client default is to use whatever the server has configured.<br/>
            See note below on units.
        </td>
    </tr>
    <tr id="safe_gc">
        <td style="vertical-align: top;">safe_gc</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">true</td>
        <td style="vertical-align: top;">Enable safe garbage collection in the various clean up threads. This means that
            the server will not remove any token unless it is from the current service address.
            This allows deploying OA4MP to environments with a shared database and possibly many
            other OA4MP services. <i>Be sure to set the service address</i> (the <b>address</b> attribute described
            in this table.
        </td>
    </tr>
    <tr id="scheme">
        <td style="vertical-align: top;">scheme</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">myproxy</td>
        <td style="vertical-align: top;">This sets the scheme for all identifiers (such as client ids) that are
            created by the system. The format of an identifier is <br/>
            scheme:specificPart:...<br/>
            the default (as of version 4.0 still) is myproxy:oa4mp,2012:... After this is a hierarchical
            name for the component.
        </td>
    </tr>
    <tr id="schemeSpecificPart">
        <td style="vertical-align: top;">schemeSpecificPart</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">oa4mp,2012</td>
        <td style="vertical-align: top;">This sets the scheme specific part for the identifiers. Note that if this is
            omitted then the default is used. If you wish to suppress this, set it equal to "".
        </td>
    </tr>
    <tr id="serverDN">
        <td style="vertical-align: top;">serverDN</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">(none)</td>
        <td style="vertical-align: top;">A server DN applied to all MyProxy servers. This may also be applied
            individually in the MyProxy element. Note especially that this only applies to MyProxy
            servers and must be a valid Distinguished Name. Also, setting this in the tag for a myproxy
            server over-rides the global setting.
        </td>
    </tr>

    <tr id="version">
        <td style="vertical-align: top;">version</td>
        <td style="vertical-align: top;">N</td>
        <td style="vertical-align: top;">latest</td>
        <td style="vertical-align: top;">The version of the configuration file. If omitted, the most current is used.
        </td>
    </tr>

    </tbody>
</table>

<h2>A note on time and units</h2>
<p>As of 5.1, all the times for grants, access tokens and refresh tokens may have units
    specified. So this is a perfectly acceptable snipped from a configuration file:</p>
<pre>
    &lt;service name="localhost:oa4mp.oa2.mariadb"
             disableDefaultStores="true"
             enableTwoFactorSupport="false"
             authorizationGrantLifetime="12345"
             defaultAccessTokenLifetime="1009000 ms"
             maxAccessTokenLifetime="1800 sec"
             maxClientRefreshTokenLifetime="2592000 sec"
             maxRefreshTokenLifetime="1000000s."
             refreshTokenEnabled="true"
             enableTokenExchange="true"
             serverDN="CN=localhost2"
    &lt;!-- lots of stuff --&gt;
</pre>
<p>Note that, in order to maintain backwards compatibility, the assumption is that all of these <i>without</i>
    units are in <b>seconds</b>. Blanks before and after units are allowed. Acceptable units are</p>
<ul>
    <li>"ms.", "ms" for milliseconds, e.g. "1000 ms."</li>
    <li>"sec.", "sec", "s.", "s" for seconds, e.g., "300 sec"</li>
    <li>"min.", "min", "mins.", "mins" for minutes, e.g. "20 min."</li>
    <li>"hr.", "hr", "hrs.", "hrs" for hours, "e.g. 2 hrs."</li>
    <li>"day", "days" for days, e.g. "1 day", "10 days"</li>
</ul>

<h2>Notes</h2>
<p>The <span style="font-weight: bold;">name</span> can be anything. The name of the configuration to use may be
    specified in the deployment descriptor (web.xml) file. If there is a single configuration in the file, that will be
    used. If there are multiple configurations and no name is specified, an exception is raised.</p>

<h3>A Note on using Two Factor Authentication</h3>

<p>Due to the way Two Factor works, this effectively allows you to get only a single certificate once.
    Because Two Factor generates a one time password that is very short lived (typically only a minute or perhaps 2
    at the most), it is possible to wait too long before logging in (done when getting the cert) and have this fail.
    Also, as stated elsewhere and worth repeating that ever so often, Two Factor offers a challenge that requires you to
    log on to the RSA self-service console (For the NCSA, this is located at <a href="https://otp.ncsa.illinois.edu/">otp</a>)
    and then exchange the next token. This is impossible to do within the delegation service, so if
    Two Factor requires this, get certs will fail with an "invalid password" message until further notice.
</p>

<h3>Example 1.</h3>
<pre>
&lt;config&gt;
   &lt;service address="http://localhost/oauth"&gt;
      &lt;!-- more stuff --&gt;
   &lt;/service&gt;
&lt;/config&gt;
</pre>
<p>Specifies that the service is located on localhost. There is a single configuration and every default will be used,
    including looking for a local MyProxy instance.</p>

<h3>Example 2.</h3>
<pre>
&lt;config&gt;
   &lt;service address="https://chem.bigstate.edu/organic/oauth"
       name="organic"
       clientSecretLength="300"
       maxAllowedNewClientRequests="25"
       scheme="cern"
       schemeSpecificPart=""&gt;
       &lt;!-- more stuff --&gt;
   &lt;/service&gt;
   &lt;service address="https://chem.bigstate.edu/polymer/oauth" name="polymer"&gt;
       &lt;!-- more stuff --&gt;
   &lt;/service&gt;
&lt;/config&gt;
</pre>
<p>This specifies that there are two delegation services on the given machine and that both configurations reside in
    this file, <b>or</b> there are two possible configurations available for a single server. Note that in the
    first one, the number of new client registration is limited to 25 unappproved ones and the client secret
    is 300 bytes which translates into 400 characters when Base64 encoded. Also, there is some
    network address translation going on, so that the <code>address</code> tag is explicitly given.</p>

<p>This also specifies that the client identifiers are of the form </p>
<pre>cern:/client_id/...</pre>
<p>where the scheme has been set to "cern" but the scheme specific part (SPP) is to be omitted. Note that if the
    SPP were omitted, then the default would be used and the resulting id would be
</p>
<pre>cern:oa4mp,2012:/client_id/....</pre>
<!--#include virtual="../../footer.html" -->

</body>
</html>