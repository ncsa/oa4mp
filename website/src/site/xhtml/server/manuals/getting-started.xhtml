<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>Getting Started with OA4MP</title>
</head>

<body class="composite">

<h1>Overview</h1>

<p>Welcome to OA4MP server! OA4MP stands for <b>O</b>pen <b>A</b>uthorization for <b>M</b>any <b>P</b>eople,
    and allows open authorization with multiple identities.
    The server  allows for authorization and issues tokens,
    (hence some call it an <i>issuer</i>). There is also an
    <a href="../../client/index.html">OA4MP client</a>. Current release is <strong>6.0</strong>.</p>

<h2>Prerequisites</h2>
<ul>
    <li>Tomcat 9 or above. This will not work with Tomcat 8 or lower because of internal changes to Java.</li>
    <li> SSL should be configured and enabled. Either in Apache (if you are deploying Tomcat as pass through) or
        in Tomcat directly. Note that if you do enable SSL in tomcat, you must un-comment the
        security constraint block in the web.xml deployment descriptor after you deploy the war.
    </li>
    <li>Java 1.11. Higher versions of Java (like Java 17) won't work.</li>
    <li>Some form of persistent storage. This may be a file system, Derby, MySQL or PostgreSQL.</li>
    <li>Java mail. This must be configured regardless if notifications are set. Read <a
            title="OA4MP: Email Notifications"
            href="../configuration/server-email.html">here</a> for details.
    </li>
    <li>Possibly either the latest of
        <ul>
            <li><a href="http://dev.mysql.com/downloads/connector/j/">MySQL</a></li>
            <li><a href="https://downloads.mariadb.org/client-java/+releases/">Maria DB</a></li>
            <li><a href="http://jdbc.postgresql.org/download.html">PostgreSQL</a></li>
            <li><a href="https://db.apache.org/derby/">Apache Derby</a></li>
        </ul>
        OA4MP used
        to bundle the connectors for these in the wars, but since their licences conflicted with those of some of
        our users, we decided to simply let you supply them. If you are just using only file-based storage,
        then you don't need either of these.
    </li>
    <li>Possibly JGlobus. If your server needs to issue limited proxies drop the most recent version
        of <a href="http://oss.sonatype.org/content/repositories/releases/org/jglobus/jsse/">JGlobus jsse</a>
        (at least 2.0.6) into <code>$CATALINA_HOME/lib</code> as well as, apparently
        <a href="http://oss.sonatype.org/content/repositories/releases/org/jglobus/JGlobus-Core/">JGlobus-Core</a>
        (latest release seems to be 2.0.4)
        and the Bouncy Castle version that support these. Otherwise, you may omit this. Again, be sure you
        check for the version of Bouncy Castle that your version of JGlobus uses and use that as well.
        JGlobus-Core 2.0.4 includes Bouncy Castle classes.
    </li>
</ul>
<h2>Getting and deploying from the war.</h2>
<p>This is available as an installer. Download <a href="https://github.com/ncsa/oa4mp/releases/download/v6.0/server-installer.jar">server-installer.jar</a>
from the website. This will download and install a full distribution for the version you want. A full set of help is built in
to the installer and if you issue</p>
<pre>
    java -jar server-installer.jar
</pre>
<p>(so no arguments) it will print out a general help page with instructions. Generally you want to set an environment variable,
<b>OA4MP_SERVER</b> and install to that. If you are installing the OA4MP client as well, these should
    go into different directories. The suggested directory for the server is /opt/oa4mp_server.
   This jar will install the CLI, download the current war and so forth. It will also
create a barebones configuration for you server, in $OA4MP_SERVER/etc. After the installation has finished,
follow the instructions. You should set up any databases (see comments in the configuration file and below for databases).
A good post install test is to see if the CLI comes up:</p>
<pre>
my-pc:$OA4MP_SERVER/bin/cli

  .g8""8q.    db                 `7MMM.     ,MMF'`7MM"""Mq.
.dP'    `YM.   ;MM:                  MMMb    dPMM    MM   `MM.
dM'      `MM  ,V^MM.         ,AM     M YM   ,M MM    MM   ,M9
MM        MM ,M  `MM        AVMM     M  Mb  M' MM    MMmmdM9
MM.      ,MP AbmmmqMA     ,W' MM     M  YM.P'  MM    MM
`Mb.    ,dP'A'     VML  ,W'   MM     M  `YM'   MM    MM
  `"bmmd"'.AMA.   .AMMA.AmmmmmMMmm .JML. `'  .JMML..JMML.
                              MM
                              MM
*************************************************************
* OA4MP CLI (Command Line Interpreter)                      *
* Version 6.0                                               *
* By Jeff Gaynor  NCSA                                      *
* type 'help' for a list of commands                        *
*      'exit', 'quit' or '/q' to end this session.          *
*************************************************************
oa4mp&gt;
</pre>

<p>You may now profitably read how to <a title="Server Configuration Reference Manual"
                             href="../configuration/config-index.html">configure
    the deployment</a>, and deploy it to Tomcat. The basic configuration for the CLI
as delivered should work for the server, although there are many ways to extend and
configure OA4MP, so read the comments in the configuration file (has suggestions
    based on your installation choices) and the documentation.</p>

<h2>Deploying to Apache</h2>

<p>If you need to deploy this to Apache, one possible way is to use the venerable Proxy AJP connector, proxy_ajp.conf file (which, e.g., lives
    under /etc/httpd/conf.d in most unix distributions):</p>
<pre>
ProxyPass /oauth/initiate ajp://localhost:8009/oauth/initiate
ProxyPass /oauth/authorize ajp://localhost:8009/oauth/authorize
... every endpoint you need to support
</pre>
<p>These entries allow access to all parts of the process. <strong>Note</strong>: in the WEB-INF/web.xml file there is a
    section called security-constraint, which controls access to the webapp using Tomcat's SSL. This will conflict with
    access via Apache, so comment that section out if you are deploying to Apache. It is only needed in stand-alone
    Tomcat deployments.</p>

<h1>Setting up persistent storage</h1>
<h2>Location of database scripts</h2>
<p>In a standard OA4MP install, the scripts to create the databases are all in </p>
<pre>$OA4MP_SERVER/etc</pre>
<p>These should be run before trying tos tart either the CLI or the server.</p>

<h2>File-based storage</h2>

<p>(Deprecated) You may store all information for the service in your local file system. It is important that you restrict access to
    it and back it up. Specifying the storage location in your configuration file is sufficient, since the system will
    detect if it exists and create anything it needs. See <a href="https://oa4mp.org/common/configuration/file-store.html">file storage</a>.
The advantage is that this is quick to set up and requires no special configuration. The downside is that it does not scale well.
If your needs are small, this is fine. If you want a slightly more complex solution that is local (and you don'ave have to manage),
use the Derby file store.</p>

<h2>MySQL</h2>

<p>In order to use MySQL for persistent storage, you must run the supplied script,
    <b>oa4mp-mysql.sql</b>
    to create all of the tables and users before your first use:</p>
<pre><code>mysql -u username -p &lt; <code>$OA4MP_SERVER/etc/oa4mp-mysql.sql</code></code></pre>
<p>(the username is an account (<em>root</em>, e.g.) which has sufficient privileges to create other users) which will
    prompt you for your password and run the file. See <a href="https://oa4mp.org/common/configuration/mysql-store.html">the MySQL configuration</a>
    for more.
    If you do not accept the default account names, you must edit this
    file and replace all occurrences of them manually, as well as setting the passwords. This has to be done because of
    MySQL's very lousy support for variables. (Should you have to re-run the script, you should manually remove the
    users and database beforehand. These commands are commented out at the beginning of the file.) </p>

<h2>Maria DB</h2>

<p>In order to use Maria DB for persistent storage, you must run the supplied script,
    <b>oa4mp-mariadb.sql</b>
    to create all of the tables and users before your first use:</p>
<pre><code>mysql -u username -p &lt; <code>$OA4MP_SERVER/etc/oa4mp-mariadb.sql</code></code></pre>
<p>(the username is an account (<em>root</em>, e.g.) which has sufficient privileges to create other users) which will
    prompt you for your password and run the file. See <a href="https://oa4mp.org/common/configuration/mariadb-store.html">the Maria DB configuration</a>
    for more.
    If you do not accept the default account names, you must edit this
    file and replace all occurrences of them manually, as well as setting the passwords.
    (Should you have to re-run the script, you should manually remove the
    users and database beforehand. These commands are commented out at the beginning of the file.) </p>

<h2>PostgreSQL</h2>

<p>Most Unix distros have this database installed by default. There is a specific script, <b>oa4mp-pg.sql</b>, that will
    create all the tables. All you should need to do is set the passwords near the top of the file. Then you would need
    to log in to the command line psql tool as the user postgres (this is the super user) and from that prompt issue
(replace $OA4MP_SERVER first since psql has no knowledge of environment variables)</p>
<pre>\i $OA4MP_SERVER/etc/oa4mp-pg.sql</pre>
<p>The file contains default user, table, database and schema names, which you may change if you see fit (be sure to
    pass these along in your configuration file!).
    See <a href="https://oa4mp.org/common/configuration/postgres-store.html">the Postgres configuration</a>.
    Again, you only need to edit the values at the top of the file,
    thanks to PostgreSQL's support for variables.</p>

<h2>Apache Derby</h2>

<p>There is a specific script, <b>oa4mp-derby.sql</b>, that will
    create all the tables, however, there is a detailed readme with the particulars in.</p>
<pre>$OA4MP_SERVER/derby-setup.txt</pre>
<p>All you should need to do is set the passwords near the top of the file. Then you would need
    to log in to the command line psql tool as the user postgres (this is the super user) and from that prompt issue
    (replace $OA4MP_SERVER first since psql has no knowledge of environment variables)</p>
<pre>\i $OA4MP_SERVER/etc/oa4mp-pg.sql</pre>
<p>The file contains default user, table, database and schema names, which you may change if you see fit (be sure to
    pass these along in your configuration file!).
    See <a href="https://oa4mp.org/common/configuration/derby-store.html">the Derby configuration</a>. Note that
    Derby may be used as either a server or locally as a file store. The advantageof the latter is that Derby is
    bundled with OA4MP and a standard install will create and manage a Derby file store instance for you, making
    it seamless.
</p>

</body>
</html>