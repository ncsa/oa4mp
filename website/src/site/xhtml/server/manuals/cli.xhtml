<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>Command line tools</title>
    <!--#include virtual="../../head.html" -->

    <!--
    This needs to be rewritten so that it refers to the basic CLI on the sec-lib
    website, then has blurbs for each extension. The blurbs are in the QDL
    workspace: /home/ncsa/dev/qdl/var/ws/cli_commands.ws
    admin:
        0 : approve
        1 : approver_search
        2 : count_clients
        3 : create_hash
        4 : decode
        5 : encode
        6 : link
        7 : list_admins
        8 : list_clients
        9 : list_ersatz
       10 : list_provisioners
       11 : password
       12 : reset_secret
       13 : set_ersatz
       14 : status_search
       15 : unlink
   approvals:
        0 : approve
        1 : decode
        2 : encode
        3 : set_status
        4 : show
   clients:
        0 : approve
        1 : approver_search
        2 : cb
        3 : create_hash
        4 : decode
        5 : ea_support
        6 : encode
        7 : get_comment
        8 : password
        9 : reset_secret
       10 : resolve
       11 : set_comment
       12 : status_search
    permissions:
        0 : decode
        1 : encode
    tokens:
        0 : decode
        1 : encode
        2 : get_by_parent
    transactions:
        0 : claims
        1 : decode
        2 : encode
        3 : gc_check
        4 : gc_lock
        5 : gc_run
        6 : get_by_at
        7 : set_qdl_state
        8 : show_qdl_state
        9 : tokens
    vo:
        0 : decode
        1 : encode
        2 : new_keys
        3 : print_keys
    -->
</head>
<body class="composite">
<!--#include virtual="../../header.html" -->
<h1>Command line tools for OA4MP</h1>

These are a set of programs that are accessible from a CLI
(command line interface)  allow
an administrator to do CRUD (Create, Read, Update and Delete) operations on client
records and approvals. There is also the option to copy a store completely from one
store to another.

<h2>Getting the tools</h2>

<p>The latest version of the Oauth 2.0 command line tool is available at
<a href="https://github.com/ncsa/oa4mp/releases/latest/oa2-cli.jar">oa2-cli.jar</a>
You should also get the script that runs this too,
<a href="https://github.com/ncsa/oa4mp/releases/latest/oa2-cli">oa2-cli</a>
</p>
<h2>Configuration</h2>
The tool uses a standard configuration file exactly like the server. Indeed, you can just
point the tool at the server configuration file. You will need to supply the name of
the configuration in the file you want to use. Aliases can be quite handy here. Given the abilities of
the CLI to do quick copies of the store, it pays to have a backup (file) store configured and
occasionally simple copy the active store to that. There are many possible uses. It is assumed that
the tools are installed in a location called $OA4MP_HOME. Normally the default for this is
<br/><br/>
OAuth 1.0a: OA4MP_HOME=/opt/oa4mp
<br/><br/>
OAuth 2.0: OA4MP_HOME=opt/oa2

<b>Note that we will be discussing the OA4MP tools rather than the OA2 tools in what follows.
    Everything here works the same if you replace oa4mp-* by oa2-*</b
        >
<p>The assumption of the script is that files are in the following directory structure</p>
<ul>
    <li><code>$OA4MP_HOME/etc/admin-cfg.xml</code> - the configuration file</li>
    <li><code>$OA4MP_HOME/lib/oa4mp-cli.jar</code> - the jar containing the CLI</li>
    <li><code>$OA4MP_HOME/bin/oa4mp-cli</code> - the script for running this. Be sure it is set to be executable.</li>
</ul>
The default name of the configuration is assumed to be "default" (no quotes). If you invoke the script with
no arguments it will use this and the above configuration file.

<h2>Running the CLI</h2>
Invocation from the command line is usually done with the supplied shell script, oa4mp-cli. The
invocation syntax is <br/>

<pre>oa4mp-cli [configName configFile]</pre>

You should run this as root and might need to set the script to be
executable if it is not. If you give neither arguments then defaults are used. Invoke with the argument  "--help"
for more information. If you give one argument it is assumed to be the configuration name
in the default configuration file.
<h2>Command line options for the jar.</h2>
You should run this from the script, but if you want or need to specify
invoke the jar directly, the invocation options they are listed here.
<table style="text-align: left; width: 1157px; height: 165px;" border="1" cellspacing="2" cellpadding="2">
    <tbody>
    <tr>
        <td style="vertical-align: top;">Argument</td>
        <td style="vertical-align: top;">Value required?</td>
        <td style="vertical-align: top;">Required?</td>
        <td style="vertical-align: top;">Description</td>
    </tr>
    <tr>
        <td style="vertical-align: top;">-cfg</td>
        <td style="vertical-align: top;">Y</td>
        <td style="vertical-align: top;">Y</td>
        <td style="vertical-align: top;">The full path to the configuration file.</td>
    </tr>
    <tr>
        <td style="vertical-align: top;">-name</td>
        <td style="vertical-align: top;">F</td>
        <td style="vertical-align: top;">F</td>
        <td style="vertical-align: top;">The name of the configuration within the file. If there is a single configuration
            in the file, then no name is needed. If there are multiple configurations you must specify which one to use. </td>
    </tr>
    <tr>
        <td style="vertical-align: top;">-log</td>
        <td style="vertical-align: top;">F</td>
        <td style="vertical-align: top;">F</td>
        <td style="vertical-align: top;">The full path log file. If this is not specified then a file named "log.xml"
        is dumped into the invocation directory.</td>
    </tr>
    <tr>
        <td style="vertical-align: top;">-use</td>
        <td style="vertical-align: top;">F</td>
        <td style="vertical-align: top;">F</td>
        <td style="vertical-align: top;">Specify the component to use. Rather than loading the whole CLI then <b>use</b>-ing
        a components (such as clients) you may simply specify that here.</td>
    </tr>
    <tr>
        <td style="vertical-align: top;">-v</td>
        <td style="vertical-align: top;">F</td>
        <td style="vertical-align: top;">F</td>
        <td style="vertical-align: top;">No argument. Turns on verbose logging so that much more information is dumped
        onto the console. This is useful for debugging or just if you want to see what it is up to.</td>
    </tr>
</tbody>
</table>
<pre>
    java -jar oa4mp-cli.jar -cfg /path/to/cfg.xml -name myConfig -log /path/to/mylog.xml -use approvals
</pre>
This would load the configuration named "myConfig" from the given file, write the log to a file called
"mylog.xml" and bring up the approvals component.

<h2>Help!</h2>
<p>For every command you may add the switch <code>--help</code> and you will get
the most up to date information on the topic available. The interactive help (as it
is called) is always up to date. E.g. if you are using transactions and want to
view the help for the <b>ls</b> command:</p>
<pre>
    transactions> ls --help
    ls [-l  | -v | -E] | [-key key | -keys array] id
      Usage: Lists information about the contents of the store, an entry and
         individual values of the entry.
      When listing multiple entries, tools will use the most numbers from the most recent call to this.
      A line listing is tabular and will shorten entries that are too long, ending them with ...
      A verbose command will format every bit of every entry within the margins.
      Note: The argument idiom '-key key_name' may be replaced with '>key_name' as a shorthand
    E.g.
      ls -l  -E
      Prints out the line form of *every* object in this store. This may be simply huge
    E.g.
      ls
      Prints out the short form of *every* object in this store. This may also be huge.
      If you are using this to find things, you probably want to look at the search command
    E.g.
      ls -l  /foo:bar
      Prints a line format for the entry with id foo:bar
    E.g.
      ls -v /foo:bar
      prints out a verbose listing of the entry with id foo:bar.
    E.g.
      ls -key id /foo:bar
      >   foo:bar
      Prints out the id property for the object with identifier foo:bar

      You may also supply a list of keys in an array of the form [key0,key1,...].
    E.g.
      ls -keys [id,callback_uris,create_ts] /foo:bar
      would print the id, callback_uri and create_ts properties for the object with id
      foo:bar.

  See also list_keys, search, archive
    For transaction stores, you may also specify listing by using the access token or refresh token:
    ls [-at | -rt token]
    Note that other switches, such as -v work as well.
</pre>
<p>
    You see that this contains the command line switches, various examples, specific switchs (<b>-at</b>)
    only found in the transactions component and a <i>See also</i> block the point you at related
    or useful other commands.
</p>

<h2>Meta commands</h2>
<p>There are commands to do tasks and there are <i>meta-commands</i> that control how the
CLI itself operates. These are prefixed with a backslash <b>/</b>. E.g. to quit a component,
issue</p>
<pre>/q</pre>
<p>A full listing of meta commands is done with the ?:</p>
<pre>/?</pre>
<p>Extremely use meta-commands are a command history, executing a command in another component
with out switching from the current one, saving you command history (useful if you want
to use a set of commands as a basis for some scripting). To list the commands available for
the admin component, you would issue</p>
<pre>
admin>/commands
    approve          copy             deserialize      get_id           ls               rm               set_env          status_search
    approver_search  count_clients    echo             link             print_env        rs               set_id           unlink
     .
     . (more commands)
     .
</pre>
<h3>An example of using the // command</h3>
<p>One specific meta command that is quite useful is the <b>//</b> which will execute a
command for another component.For example, if you are working with transactions
and want to check how many there are then see how many token exchanges there are,
you would do this:</p>
<pre>
    transactions>size
        Current store has 10 entries (excluding versions).
    transactions>//tokens size
        Current store has 3 entries (excluding versions).
</pre>
<p>Here the <b>//</b> tells the CLI to take the token component then the rest of the line
(in this case just the size command) is passed to the component. Note that no argument
will just change to that component and exiting it will return to you the original component.</p>

<h2>Running the tool</h2>
The CLI consists of utilities for each component that can be used. Once invoked you will see
the startup banner and prompt:
<pre>
[mybox bin]# ./oa4mp-cli
**********************************************************
* OA4MP CLI (Command Line Interpreter)                   *
* Version 6.0                                          *
* By Jeff Gaynor  NCSA                                   *
*  (National Center for Supercomputing Applications)     *
*                                                        *
* type 'help' for a list of commands                     *
*      'exit' or 'quit' to end this session.             *
**********************************************************
oa2>
</pre>
If you type "--help" You will get
<pre>
oa2>--help

Here are the commands available:
use
load
To get more information on a command type

command --help
</pre>
Basic supported commands are
<ul>
  <li>use - specify a component to use.</li>
    <li>load configName [configFile] - load the given named configuration from the current config file. Specify the config file
    if you need a different one. </li>
</ul>

To see the help for, say, the use command you would issue
<pre>
   oa2>use --help
    Choose the component you wish to use.
    you specify the component as use + name. Supported components are
    clients - edit client records
    approvals - edit client approval records
    copy - copy an entire store.
    keys - create a set of signing keys.
    permissions - basic permission management.
    admins - create or manage administrative clients.
    parser - write/debug scripts from the command line.
    tokens - manage tokens created in the token exchange endpoint
    vo - manage virtual organizations
 e.g.

 use clients

 will call up the client management component.
 Type 'exit' or /q when you wish to exit the component and return to the main menu
 --> and /h prints your command history, /r runs the last command
</pre>

Each of these components; <a href="cli.html#clients">clients</a>,
<a href="cli.html#approvals">approvals</a>
and <a href="cli.html#copy">copy</a> is described in detail below. But first, a few preliminary notions.

<h2>Index vs. Unique ID</h2>
Since most objects have unique identifiers, you can specify these are arguments at any time it makes
sense to do so by prefixing the id with a forward slash, "/". If there is a list of objects, you can also specify
the index on the list as the target of the operation. The <b>ls</b> command will  list everything in the
active component.
<p>
After you issue an <code>ls</code> (no arguments) you will
see a complete list of items in the store. These are numbered on the right hand side. This is the
item's <b>index</b>. You may then specify the index directly. E.g. to print out a long version of the item
with index 4 issue<br/><br/>
<code>ls 4</code>
<br/><br/>
Typically you will know the unique identifier for an item and you can enter this if you escape it with a forward
slash (/). To give the long listing of an object with unique identifier <code>myproxy:oa4mp,2012:/client/a4b78549990</code>
you would issue<br/><br/>
<code>ls /myproxy:oa4mp,2012:/client/a4b78549990</code>
<br/><br/>
Note that since there is no canonical ordering of objects in a store, you should always issue an
<code>ls</code> before using the index. It is generally always safer to use the unique identifier.

</p>
<h3>Setting a default id</h3>
<p>If you are working on a single item in the store, you may sinple set a default id to be used for all
operations with the </p>
<pre>
    set_id id
</pre>
<p>command. Related is the <b>get_id</b> to display the current id and the <b>clear_id</b>
to clear it. If you have an default id set, you do not need to specify one.</p>
<pre>
    oa2>set_id foo:bar/34456
    oa2>ls -l
  name : My test thing
    id : foo:bar/34456
</pre>
<p>In this case, the details (long form) for the listing of the object are displayed. Had you issued</p>
<pre>
    ls -l /fnord:46456
</pre>
<p>The long form for this object would be displayed, since the final argument overrides the default. </p>

<h3>Options supported in each storage tool.</h3>
<ul>
    <li><a href="cli.html#size">size</a> - number of entries in the current component.</li>
    <li><a href="cli.html#ls">ls [index | /uniqueId]</a> - list all items or the details of a given item</li>
    <li><a href="cli.html#update">update [index | /uniqueId]</a> - edit the item</li>
    <li><a href="cli.html#rm">rm [index | /uniqueId]</a> - remove an entry</li>
    <li><a href="cli.html#create">create [uniqueId]</a> - create a new entry with the optional id.</li>
    <li><a href="cli.html#serialize">serialize [-file path] uniqueId</a> - serialize, i.e. store the object in XML format to the file. Omitting the file dumps it to the command line</li>
    <li><a href="cli.html#deserialize">deserialize [-new] -file path</a> - deserialize i.e. read in the object from a file. The -new flag tells whether the object is new or not. If new and the id is in use, the operation will fail.</li>
</ul>

Each of these in turn will be discussed in detail.
<!-- comment about name in the a tag. This is illegal in XHTML but these files will be converted to HTML
     as part of the maven site command processing. So leave them or linking won't happen. -->
<h1>Common commands for all storage components.</h1>
<h4><a name="size">Getting The Number Of Objects In a Component.</a></h4>
This will print the number of elements in the current storage component. <br/>
<i>Example.</i> For showing the number of clients in a store
you would have something like the following
<pre>
oa2>use clients
  clients >size
    Current store has 22 entries
  clients >exit
exiting ...
oa2>
</pre>

<h4><a name="ls">Listing Object or Details of an Object.</a></h4>
<pre>
    ls [-l | -E | -v] | [-key key] | [-keys [key1,key2,...] ] [id]
</pre>
<p>This lists every element in the current component. The default is to sort by
the given identifier, except clients which are sorted by creation date. At this point,
sorting behavior cannot be changed. The default format is the <i>short form</i>
    where the identifier and a little information is shown. This is for quick perusal.
No argument prints out everything in the store.
Giving the optional index or unique identifier will
    print a listing of the object. Here are the command line switches that control how
    much is printed:</p>>
<ul>
    <li>-l = line form of the listing. This means that entries longer than a line are truncated.</li>
    <li>-E = (default) list <b><i>ALL</i></b> the elements in the store. Default is short form</li>
    <li>-v = verbose form of the listing. Entries longer than a line will be wrapped.</li>
</ul>
<i>Example.</i> Listing a specific object by unique identifier
<pre>
oa4mp >use approvals
  approvals >ls
    0. (?) myproxy:oa4mp,2012:/adminClient/1105e0486abc6cab6d2450893d9394f6/1586446927641 by "junit" on 2020-04-09 10:42:08.0
    1. (?) myproxy:oa4mp,2012:/adminClient/11daaae5d58ec7e5ba6bb88189fc3bb8/1586446926819 by "junit" on 2020-04-09 10:42:07.0
    2. (?) myproxy:oa4mp,2012:/adminClient/131d41a607efa5be7cd611f56d1060c6/1581113647370 by "junit" on 2020-02-07 16:14:07.0
    3. (?) myproxy:oa4mp,2012:/adminClient/1332c1e8775d827e66e77c5c4c47d23f/1581513221096 by "junit" on 2020-02-12 07:13:41.0
  approvals >
</pre>
<p>By default (no arguments) it prints out the short form of every item in the store. This is the same
    as using the -E option.
    To now print out the details on number 2:</p>>
<pre>
    approvals >ls -l 2
    approval_ts : 2020-02-07 16:14:07.0
       approved : true
       approver : junit
      client_id : myproxy:oa4mp,2012:/adminClient/131d41a607efa5be7cd611f56d1060c6/1581113647370
     public_key : k0CPPSzW0Wv5lIZWnEX5yEAOjJTZn838wSrwa-Wh6xF4Vvi4MnBJ7eQuz0QLorDoKYtLEW6LV-u7sC...
         status : none</pre>
We could have done the exact same thing by simply using the unique identifier:
<pre>
    approvals>ls -l /myproxy:oa4mp,2012:/adminClient/131d41a607efa5be7cd611f56d1060c6/1581113647370
</pre>
And finally, here is what a verbose version looks like for a client (we set the id first so we don't have
to keep typing it in.)
<pre>
  clients> set_id oa4mp:/client_id/52d39e92ab5347c880fa19f3b9cb4204
  clients> ls -v
    callback_uri : ["https://client.example.org/callback","https://client.example.org/callback2"]
             cfg : {"new":
                      "config"}
       client_id : oa4mp:/client_id/52d39e92ab5347c880fa19f3b9cb4204
     creation_ts : 2020-05-04 13:47:41.0
last_modified_ts : 2020-05-04 13:48:21.0
            name : New Test name
   proxy_limited : false
   public_client : true
      public_key : ZOq88bMz4wIxYDbqfPPSzW0Wv5lIZWnEX5yE
     rt_lifetime : 0
          scopes : ["openid"]
     sign_tokens : true
     approved by : my:adminclient/42
</pre>
<h3>Other forms of ls</h3>
<p>You may also print out a single key with the -key switch and the name of the key (list_keys will
list what's available). You may also make a custom listing by specifying which keys you want to display. Using
the above example with the id already set:</p>
<pre>
    clients>ls -key cfg
   cfg:
 {"new": "config"}
</pre>
and to list the name, creation time and refresh token lifetime:
<pre>
    clients>ls -keys [name,creation_ts,rt_lifetime]
   creation_ts : 2020-05-04 13:47:41.0
          name : New Test name
   rt_lifetime : 0
</pre>
<p>One last note is that the keys are always sorted in any listing and the default for single keys is the verbose form.</p>

<h4><a name="update">Updating (aka Editing) Objects.</a></h4>
<pre>
    update [-key k [-value v]] [-keys [k0,k1,...] [id]
</pre>
This will let you update or edit an existing object or the properties in one.
If you supply no argument except an id, you will be sequentially prompted for <i>every</i>
property of the object.
The general function is shown below. Current object
values are shown in [ ]'s and simply hitting return will preserve the current value.
<br/>
<i>Example.</i> Edit a client record. In this case we want to make this client use limited proxies.
<pre>
    clients >set_id testScheme:oa4md,2018:/client_id/79d0237f26f56ee831b033b7eec5865d
    clients >ls -l
        callback_uri : ["https:/baz.foo.edu/client2/7Vgs2kO-sF4/ready1","https:/baz.foo.edu/client2/7Vgs2kO-sF4/ready2"]
                 cfg : {"version":"aOfSNXcKu7VU3qPqc_lnvQ"}
           client_id : testScheme:oa4md,2018:/client_id/79d0237f26f56ee831b033b7eec5865d
         creation_ts : 2020-04-10 08:42:33.0
               email : bob@7Vgs2kO-sF4.foo.bar
           error_url : https://baz.foo.edu/home/7Vgs2kO-sF4/error
            home_url : https://baz.foo.edu/7Vgs2kO-sF4/home
    last_modified_ts : 2020-04-10 08:42:33.0
                ldap : [{"ldap":{"id":"","name":"","enabled":false,"failOnError":false,"notifyOnFail":false,"address":"foo.bar.edu","port":-...
                name : Test client 7Vgs2kO-sF4
       proxy_limited : false
       public_client : false
          public_key : t37mvHp25SkDRQqZ1mx74TiC4qIn_TRtgh5PA9P8VcTORzfJD1cKngU9yiXHMjdTNqYbaoa8vfyNWx0LfQ652A
         rt_lifetime : 456767875477
              scopes : ["openid","email","profile","org.cilogon.userinfo"]
         sign_tokens : true
    clients >
</pre>
<p>Let's change the name:</p>
<pre>
    update -key name -value "My other test client"
</pre>
<p>and let's look at the value directly</p>
<pre>
    clients>ls -key name
    My other test client
</pre>
<p>You can also update several properties at once by nassing in a list:</p>
<pre>
    clients>update -keys [sign_tokens,name]
</pre>
<p>and you will be prompted in turn for each.</p>

<h4><a name="create">Creating a new object</a></h4>
To create a new object, you must supply a unique identifier. This does not need to be escaped with a /.
Once created, you will be given the option of editing it.   You may enter any valid identifier
as long as it is a valid URI<br/>
<i>Example.</i> Crreating a new admin client. This will create a new admin
client with a specified identifier.
If no identifier were supplied a random one would have been created.
<pre>
    admins>create my:new:client
    Created object with id "my:new:client"
</pre>
The object already exists in the store by this point. We will be given the option to edit it
(equivalent to issuing the update command against its unique id):
<pre>
      edit [y/n]?y
    Update the values. A return accepts the existing or default value in []'s
      enter the identifier[my:new:client]:
</pre>
<p>and you will be prompted for several more bits of information.
Now the completed, new client is displayed and we are prompted if we want to keep the changes.
Rather than drag you through each update, here is the finished client.</p>
<pre>
    here is the complete client:
          admin_id : foo:bar
       creation_ts : Thu Apr 23 17:19:36 CDT 2020
             email : bob@foo.bar
  last_modified_ts : 2020-04-23 17:19:36.752
       max_clients : 50
              name : My client
            secret : 126a1356375daf2951e4c8660a098f7264579853
    save [y/n]?y
    client updated.

</pre>
<h4><a name="rm">Removing Objects From the Store.</a></h4>
<pre>
    rm [-key k] [id]
</pre>
<p>This will remove <i>either</i>  the value in a property <b>or</b> the entire client.
If you specify a key, only thatproperty will be affected. If you specify the id of an object,
you will be prompted to continue.</p>
<p> <i>Removing an object.</i> This will remove the object completely from the store. In the case of clients you
do not need to remove the corresponding approval -- it will be done automatically. However, if you remove
the approval record then the client is in effect unapproved until you re-approve it. To remove an admin client
    would look like the next
</p>>
<i>Example.</i> Removing an object by id
<pre>
    admins>rm /myproxy:oa4mp,2012:/adminClient/13be753b6e816c801e212f0f1cff9d81/1587161772297
      Are you sure you want to remove this client(y/n)[n]:y
    Done. object with id = myproxy:oa4mp,2012:/adminClient/13be753b6e816c801e212f0f1cff9d81/1587161772297 has been removed from the store.
      Removing approval record
      Done. Client approval with id = myproxy:oa4mp,2012:/adminClient/13be753b6e816c801e212f0f1cff9d81/1587161772297 has been removed from the store</pre>
<p><b>Note</b> The remove command will happily remove objects by index, but remember that the indices of all
other objects change, so best practice is to only remove by identifier.</p>
<p>Finally, to remove a value, if we had th following value</p>
<pre>
    admins>ls -key vo
    https://myorg.bigstate.edu
</pre>
<p>we could removed it by issuing</p>
<pre>
    admins>rm -key vo
</pre>
<p>Note that unlike for properties there is no prompt.</p>

<h4><a name="serialize">Storing objects on disk</a></h4>
<pre>
    serialize [-file path] [id]
</pre>
<p>A common enough task is to want to do a considerable amount of editing which the direct CLI is not so well suited for, e.g.
twiddling extensive lists of callbacks. This is always component specific, so
    you  must use a comnponent for this to be available.  You may serialize any object to disk in XML format, edit it with
any standard text editor and then simply read it back in with the deserialize command. The basic syntax is</p>
In this case, the index is as per any other component. The file is optional in the sense that if it is omitted, the result
will be dumped at the command line. The file will be overwritten, so make sure you have it right.  <br/>
<i>Example.</i> Serializing a client.
<pre>
    cli> use clients
      clients> serialize -file /path/to/my/client.xml /client:sdfsdf:erg98540j034/456eythw456
    done!
</pre>
Firing up a text editor shows the file which starts to look like this:
<pre>
    &lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
    &lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;
    &lt;properties&gt;
    &lt;entry key="name"&gt;Updated Test client 42&lt;/entry&gt;
    &lt;entry key="sign_tokens"&gt;true&lt;/entry&gt;
    &lt;entry key="creation_ts"&gt;2018-06-28T13:06:28.000Z&lt;/entry&gt;
    &lt;entry key="public_key"&gt;j75OY1FoPf1AzW5v9KDqTkxrslD1VQhQ5wdVfqUu7pO7SRoMtEwRXqBdFFtNfwmX0Z4l4vbiVRYpq9zGtoMKYw&lt;/entry&gt;
    &lt;entry key="rt_lifetime"&gt;456767875477&lt;/entry&gt;
    &lt;entry key="public_client"&gt;false&lt;/entry&gt;
    &lt;entry key="client_id"&gt;testScheme:oa4md,2018:/client_id/756a9e899981a4cf93f97f40a9da345a&lt;/entry&gt;
    &lt;entry key="home_url"&gt;https://baz.foo.edu/H2w3GevCrOU/home&lt;/entry&gt;
    &lt;entry key="cfg"&gt;{
      "config": "updated by converter from old LDAP entry",
      "claims": {
        "sourceConfig": [
          {
     ... lots more
</pre>
Note that the format is very simple. A key is given (you cannot change these) and then the value is given as the contents
of the element.

<h4><a name="deserialize">Reading objects from disk</a></h4>
<pre>
    deserialize [-new] -file path
</pre>
<p>This will read an object from a file. This argument is required.
    This is always component specific, so
    you  must use a comnponent for this to be available. You may specify it as being new, which will also tell the system to create
a new identifier for it or it will reject the object if an existing identifier exists. <b><i>NOTE:</i></b> This will
replace the object, not just update a few attributes. This means that if you just want change the value of an
attribute, you have to do it manually.</p>
<i>Example</i> Deserializing a file
<pre>
    clients> deserialize -file /path/to/my/file
    done!
</pre>
<p>This will take the given file and replace the contents. A not uncommon use is to serialize a file, edit it and issue
deserialization commands against it repeatedly as you debug it.</p>

<h1>Invoking the components.</h1>

<h2><a name="clients">Clients</a></h2>
Invoke as
<pre>oa2> use clients</pre>
Operations allowed in addition to the standard ones are
<ul>
    <li>
        approve [index | /uniqueID]
    </li>
    <li>create_hash [string | -file path]</li>
</ul>
The first will prompt you for the information needed to make a new approval for the client with the given id.
The second is used to create a hash for a secret that you supply. This is
needed for OAuth2/OIDC clients since we store a hash and not the secret. You may either specify a file containing
the secret or type in manually at the command line.

<h3>An example for setting the password</h3>
<p>This sets the password for the client with id <code>foo:/bar</code>. Thanks to historical reasons,
    the secret has the key <code>public_key</code>. Its current secret is
    <code>7fd560c4169d4ed6cf08acc87d54aed28b6b92ac</code></p>
<pre>
clients>create_hash "my secret password"
 creating hash of my secret password
  ca90213b8b911f48a180abf8002934658bf63828
clients>update -key public_key /foo:/bar
Enter new value for public_key [7fd560c4169d4ed6cf08acc87d54aed28b6b92ac]:ca90213b8b911f48a180abf8002934658bf63828
clients>
</pre>
<p>If you list the client, you will see the updated secret.</p>

<h2><a name="approvals">Approvals</a></h2>
Invoke as
<pre>oa2> use approvals</pre>
 There are no extra options beyond the standard ones, however, the <code>create</code> command
takes the unique id of the client record you are going to approve. Once created, you may enter the
approval information directly.

<h2><a name="copy">Copy</a></h2>
Invoke as
<pre>oa2>use copy</pre>
Supported operation is
<ul>
    <li>cp source target [-verify] - copy source to target optionally verifying</li>
</ul>
This works over the entire store. It has a single command that will allow you to make a copy
of one store (the source) that completely replaces another (the target). This is destructive, meaning
that the every object in the target is deleted, so no merge takes place. If the -verify option is used
then the two stores are compared once the copy has been completed. Note that this can be very time consuming
for a large store! However, if there is any question it is at times very useful.


<!--#include virtual="../../footer.html" -->
</body>
</html>