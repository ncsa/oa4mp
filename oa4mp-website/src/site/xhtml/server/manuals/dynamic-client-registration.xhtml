<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>Dynamic Client Registration</title>
    <!--#include virtual="../../head.html" -->

</head>
<body class="composite">
<!--#include virtual="../../header.html" -->
<h1>Dynamic Client Registration</h1>
<p>The <a href="https://openid.net/specs/openid-connect-registration-1_0.html">dynamic client registration</a>
    specification
    is supported in OA4MP as of version 4.2. This means that a trusted administrative client can dynamically
    create regular clients for use with an OA4MP system. If you have not done so already, you should
    read the section on
    <a href="administrative-clients.html">administrative clients </a>.
</p>
<p><b>Note:</b> When we refer to a client we mean an OAuth 2 client and otherwise any other will be qualified such
    as "admin client".</p>

<h2>How's it work?</h2>
<p>
    If you are not an administrator and just need a client, you should go
    to <code>../oauth2/register</code>. Your request will then be seen by the site adminstrator(s)
    and once approved, you will be notified. The facilities described in this document allow
    for a trusted (after vetting, of course) site manager who
    must manage several OAuth clients to do so without having to resort to the usual vetting process.
</p>
<h3>How to become an admin</h3>
<p>You must register an administrative client as per <a href="administrative-clients.html">here</a>.</p>

<h3>Implemented specifications here.</h3>

<p>The two specifications that are behind this are <a href="https://tools.ietf.org/html/rfc7591">RFC 7591</a>
    and <a href="https://tools.ietf.org/html/rfc7592">RFC 7592</a>. The flow is that you register an
    administrative client. This is initially not approved and any operation you try will fail
    with a message to that effect. We get an notification and once the admin client is approved,
    it may be used. All calls then create regular (not admin!) clients for use with OA4MP.
</p>

<p>The RFCs specify a REST-ful API for clients, so that</p>

<ul>
    <li><b>POST</b> creates a new client</li>
    <li><b>GET</b> lists what the server knows about this client</li>
    <li><b>PUT</b> will update the client</li>
    <li><b>DELETE</b> will remove the client and all of its information from the server</li>
</ul>

<p>
    <b>Note:</b> OA4MP does have one nice little extension for querying clients.
    If you do a GET with no client id, then a list of all client ids and their
    names will be returned.</p>

<h3>The toolkit</h3>
<p>Included with the latest release on <a href="https://github.com/ncsa/OA4MP">GitHub</a>
    are a suite of associated command line scripts in oidc-cm-scripts.tar aka the <b><i>toolkit</i></b>
    which contains a complete but minimal functional toolkit. There are basic scripts for each
    method as well as several examples for using each.</p>

<p>To dynamically register a client you need to make a call to the supported service
    endpoint, typically <code>../oauth2/oidc-cm</code> with the appropriate HTTP method
    and payload. The specification should not be repeated here but the toolkit has a tutorial
    and many examples. There is also a very detailed
    <a href="https://github.com/ncsa/OA4MP/blob/master/oa4mp-server-admin-oauth2/src/main/scripts/oidc-cm-scripts/readme.txt">readme.txt</a>
    in the toolkit.</p>

<h3>Parameters specific to OA4MP</h3>
<p>OA4MP allows you to specify several client properties that it uses which are not in the specification.
These are</p>
<ul>
    <li>at_lifetime = the lifetime in seconds that an access token may have</li>
    <li>cfg = a configuration (JSON) for managing ID, access and refresh tokens and for running QDL scripts.</li>
    <li>rt_lifetime = the lifetime in seconds that a refresh token may have</li>
    <li>strict_scopes = a boolean that when <b>true</b> (default) will reject any scopes not explicitly set.
    When <b>false</b>, any scope may be sent. This is typically set to <b>false</b> for clients that return
    JWTs as access tokens.</li>
</ul>
<p>Note that all of these are subject to server policies. You may request an outlandish refresh token
lifetime, e.g., but if serverpolicy restricts it, then the server will make the final determination.
See the table below for the specifics.</p>

<h3>Notes on Legal Requests</h3>
<p>What values can be sent and are accepted?</p>
<table>
    <caption>Valid values</caption>
    <tr>
        <th>Parameter</th>
        <th>Required?</th>
        <th>Values</th>
        <th>Comments</th>
    </tr>
    <tr align="left" valign="top">
         <td>name</td>
         <td>Y</td>
         <td>The human readable name for this client, to be displayed on the consent screen.</td>
         <td>Note that the RFC's do not require this, but OA4MP does.</td>
     </tr>
    <tr align="left" valign="top">
         <td>callback_uri</td>
         <td>Y</td>
         <td>A JSON array of callback uris.</td>
         <td>You must have at least one callback uri. Note that the OAuth spec. requires that this be checked
         <i>as a string</i> against requests to the server that include it. No checking is done to resolve the address,
         so it is a bad idea to, e.g. have a raw IP address. By the same token, you can include parameters and such,
         but if they vary at all in the requests, then the request will be rejected. If you need to have some form of
         state management for each request, you should send the
             <a href="https://openid.net/specs/openid-connect-core-1_0.html#ImplicitAuthRequest">state parameter</a>
             in the initial request. This is
         guaranteed to be returned to you unchanged as a parameter in the callback.</td>
     </tr>
    <tr align="left" valign="top">
        <td>grant_type</td>
        <td>N</td>
        <td>Either a JSON array of blank delimited list which may contain
            <br/>authorization_code (default),
            <br/>refresh_token
            <br/>urn:ietf:params:grant_type:token_exchange (for token exchange)
        </td>
        <td>If omitted, the assumption is authorization_code. If the refresh token lifetime (rt_lifetime) is specified,
            then
            refresh_token is added to the list of accepted grants.
        </td>
    </tr>
    <tr align="left" valign="top">
        <td>response_type</td>
        <td>N</td>
        <td>code (default), id_token.</td>
        <td>Response types the client <i>may</i> support. If a requested response_type is not on this list, it should be
            rejected.
            Note that the initial request always must have the type "code." The others are used at other points
            and sent along in those requests, e.g. getting a refresh token requires you send "refresh_token" to the
            token endpoint.
        </td>
    </tr>
    <tr align="left" valign="top">
        <td>contacts</td>
        <td>N</td>
        <td>A list or string</td>
        <td>This should contain the valid email for a <b>person</b> to contact in case there is an issue with the
            client. You should assume that if you are going to be contacted at this address it will only be
            because of some dire issue. Supplying a generic institutional email is useless.
            The spec. allows for multiples but we only support a single (at this writing) so only the first will be
            used if a list is sent.
        </td>
    </tr>
    <tr align="left" valign="top">
        <td>scope</td>
        <td>N</td>
        <td>Either a JSON array or blank delimited list of scopes</td>
        <td>If you wish to use OIDC, you must at least supply a scope of openid. All supported scopes
            are <br/>
            openid<br/>
            email<br/>
            profile<br/>
            org.cilogon.userinfo<br/>
            edu.uiuc.ncsa.myproxy.getcert<br/>
            Note that
            the getcert scope requires you be able to get X509 certs via a MyProxy server, so only specify that if
            you really need it.
            <br/><b>Public clients:</b> Only openid scope is allowed and attempts to change the scopes will result in
            an error. It is not possible to change a public client to a confidential client. You must
            register a new client instead (This is due to our policies regarding creation of client secrets.).
        </td>
    </tr>
    <tr align="left" valign="top">
        <td>at_lifetime</td>
        <td>N</td>
        <td>A integer (in seconds)</td>
        <td><b>(OA4MP specific!!)</b>This sets the access token lifetime for all subsequent access tokens. Note
            that is <i>must be less than or equal to the server's default</i>. You should only set this if
            you have a specific need for it an knowledge of what values will work.
        </td>
    </tr>
    <tr align="left" valign="top">
        <td>cfg</td>
        <td>N</td>
        <td>A JSON object</td>
        <td><b>(OA4MP specific!!)</b>This is a configuration that includes scripting for gettign and processing
            additional claims.
            Generally you do not need one of these unless you have a very, very specific requirement. If you
            send attributes that do not fall within the spec., they will be put in this object for you.
            Generally if you do not know you need it and know what it does, you can safely ignore it.<br/>
            <b>Public clients:</b>This parameter is not supported and will result in the rejection of any request.
        </td>
    </tr>
    <tr align="left" valign="top">
        <td>rt_lifetime</td>
        <td>N</td>
        <td>A integer (in seconds)</td>
        <td><b>(OA4MP specific!!)</b> If you request a grant_type of refresh_token, this specifies the maximum lifetime,
            in seconds, that
            it will be valid. Normally this is set for a very long time, as in weeks if not months. If this is omitted
            or set to 0 (zero) then no refresh tokens will be created.
        </td>
    </tr>
    <tr align="left" valign="top">
        <td>strict_scopes</td>
        <td>N</td>
        <td>true</td>
        <td><b>(OA4MP specific!!)</b> If set to <b>true</b> (default) only scopes explicitly
            set at registration will be allowed. If <b>false</b>  then any unrecognized scopes
            in the initial request will cause the request to be rejected.
            If set to <b>true</b> you may send anything as a scope
            and allowed scopes will be processed, unknown scopes will be passed along for later processing
            and if not used, simply ignored.
            In the case that the access tokens is a JWT (such as SciTokens or WLCG tokens) set this
            false since the access token scopes would be passed in.
        </td>
    </tr>

</table>
<!--#include virtual="../../footer.html" -->
</body>
</html>