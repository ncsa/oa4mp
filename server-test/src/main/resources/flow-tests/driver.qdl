/*
   Basic driver script. This prints the description, sets up the client
   for the initial leg, manages the login. One return, the CLC is fully
   ready for testing. Arguments are
   0 - configuration
   1 - (optional) any parameters, passed to the set_param call in the CLC.

   0-th argument is a stem with the following entries
          file - the FQ path to the configuration file
            id - the identifier for the client configuration
           idp - the IDP the user should use
   description - user understandable description of what is being tested
     flow_type - one of 'uri' or 'df' flow authorization code flow resp. device flow


     This returns
      0 - flow worked
      1 - unable to initiate flow
     -1 - user aborted
*/

‚ä® 0 < size(args()) < 3 : 'incorrect number of arguments, expected 1 or 2 and got ' + size(args());

cfg. := args().0;
say('args:' + to_string(args()));
say('args().1:');
foo. := args().1;
say(foo.);
say(size(foo.));

clc#init(cfg.'file', cfg.'id');
// only set the parameters if the argument is non-trivial
if[size(args()) == 2  && 0<size(args().1)][clc#set_param(foo.);];
say('Client test for ' + cfg.'id');
say(cfg.'description');
say(' IDP: ' + cfg.'idp');
flow_ok := 1;
  if[
     cfg.'flow_type' == 'df'
    ][
     say('Flow: device');
     clc#df();
    out := scan('verfication URI is in clipboard. Login, then hit any key when done, q to abort, s to skip.');
    flow_ok := size(trim(out))==0?'ok':out;
    if[flow_ok != 'ok'][return(flow_ok);];
    ]; // end device flow
  if[
     cfg.'flow_type' == 'uri'
   ][
     say('Flow: auth code');
     clc#uri(); // puts it in the clipboard.
     say('authorization URI is in the clipboard. Please log in.');
    while[true]
       do[
         try[
           out :=  scan('copy the callback uri to clipboard and hit any key when done or q to abort, s to skip.');
           flow_ok := size(trim(out))==0?'ok':out;
           if[flow_ok != 'ok'][return(flow_ok);];
           clc#grant();
           return(flow_ok);
          ]catch[
             say('uh-oh that didn\'t work, try again:' + error_message);
          ];  //end catch
      ]; // end while
   ]; //end auth code flow
    return(flow_ok);

