#! /usr/bin/env -S qdl-run

/*
   Test IGWN. This will also test policies to wit, it will make a request with a set of scopes
   and then attempt to get some different scopes. Downscoping is allowed, but that's it.

*/
path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
if[path∉script_path()][script_path(path ~ script_path());];
scope_check(s., token.)->⊗∧⊙s.∈tokenize(token.'scope', ' '); // Define it here. Checks all the expected scopes are in the token

        cfg.'id'  := 'localhost:test/igwn';
       cfg.'idp'  := 'LIGO Collaboration';
       cfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';
cfg.'description' :=  'IGWN test';
  cfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint

    params.'token':={'scope':'read:/frames gwdatafind.read gracedb.read dqsegdb.read'};
  params.'refresh':={'scope':'read:/virgo gracedb.read'};
 params.'exchange':={'scope':'read:/virgo dqsegdb.read read:/frames read:/frames read:/frames'};
rc := script_load('driver.qdl', cfg., params.);
if[rc!='ok'][return(rc);];

tokens. := clc#access();
⊨ tokens.'access_token'.'lifetime' == 900000 : 'wrong access token lifetime';
⊨ tokens.'refresh_token'.'lifetime' == 1000000000 : 'wrong refresh token lifetime';
⊨ scope_check(['read:/frames', 'gwdatafind.read', 'gracedb.read', 'dqsegdb.read'], tokens.'access_token'.'jwt') : 'wrong at scope(1)';
⊨ claims().'aud' == cfg.'id' : 'wrong audience';

tokens. := clc#refresh();
⊨ tokens.'access_token'.'jwt'.'scope' == 'gracedb.read' : 'wrong access token scope'; // should be a single one
⊨ scope_check(['gracedb.read'], tokens.'access_token'.'jwt') : 'wrong at scope(2)';
tokens. := clc#exchange();
⊨ scope_check(['read:/frames', 'dqsegdb.read'], tokens.'access_token'.'jwt') : 'wrong at scope(3)';
say('IGWN configuration: ok');