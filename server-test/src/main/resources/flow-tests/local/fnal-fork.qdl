/*
   Compliment to fnal-provisioner.qdl. This forks the flow.
*/

/* Full set of scopes returned is
 sss ≔ 'storage.read:/dune/resilient/jobsub_stage storage.create:/fermigrid/jobsub/jobs storage.create:/dune/resilient/jobsub_stage compute.create compute.read compute.cancel compute.modify storage.create:/dune/scratch/users/cilogontest storage.read:/dune';
*/
saved_cfg := '/tmp/fnal-test.json';

clc#init($$OA4MP_CLC_XML_INI, 'localhost:test/fnal/ersatz');
clc#read(saved_cfg, '-p'); // -p switch tell client that this is an ersatz client
debugger(10,'loaded fork script');
sss. ≔ ['storage.read:/dune/resilient/jobsub_stage',
        'storage.create:/fermigrid/jobsub/jobs',
        'storage.create:/dune/resilient/jobsub_stage',
        'compute.create'];
ttt. ≔ ['compute.read',
        'compute.cancel',
        'compute.modify',
        'storage.create:/dune/scratch/users/cilogontest',
        'storage.read:/dune'];
params.'refresh' ≔  {'scope': detokenize(sss., ' ')};
params.'exchange' ≔  {'scope': detokenize(ttt., ' ')};

clc#set_param(params.);
//clc#java_trace(true);
raw. ≔ clc#exchange({'type':'rt','subject':'rt','raw_response':true});
debugger(1,'raw RT exchange response:\n' + print(raw.));
tokens. ≔ clc#refresh();
returned_scopes. := tokenize(tokens.'access_token'.'jwt'.'scope', ' ');
⊨(⊢sss.) == (⊢returned_scopes.) : 'incorrect scopes ' + (~returned_scopes.∉sss.⌆returned_scopes.);
debugger(1,'refresh response AT:\n' + print(tokens.'access_token'));
debugger(1,'refresh response RT:\n' + print(tokens.'refresh_token'));

// and one further exchange to show it works.
raw. ≔ clc#exchange({'type':'at','subject':'rt','raw_response':true});
debugger(1,'raw AT exchange response:\n' + print(raw.));
returned_scopes. := tokenize(raw.'scope',' ');
⊨(⊢ttt.) == (⊢returned_scopes.) : 'incorrect scopes ' + (~returned_scopes.∉ttt.⌆returned_scopes.);
