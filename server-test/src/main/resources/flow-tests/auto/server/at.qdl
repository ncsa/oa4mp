debugger(1);
debugger(1, 'starting at, phase = ' + exec_phase);
debugger(1,'initial at:\n' + print(access_token.));

cfg. := claims#new_template('file');
cfg.'file_path' := 'test#/auto/server/test-claims.json';
debugger(1, 'got claims from file');

// critical regression testing. if this fails, then the QDL scripting environment
// is broken.
script_load('test#/auto/server/runtime-vars-check.qdl', true, false);
debugger(1, 'auto/server/runtime-vars-check.qdl: passed');

// Note that depending upon the user metadata scopes, the claims may
// be severely restricted. Resolving the access token scopes should be
// done against the full claims generally, so we use those.
full_claims.:= claims#get_claims(claims#create_source(cfg.), claims.'sub');
debugger(1, 'got claims from file source:\n' + print(full_claims.));
full_claims.'sub':=claims.'sub';
epe.:=full_claims.'eduPersonEntitlement';
debugger(1, '  epe = ' + to_string(epe.));
out. := claims#template_substitution(epe., full_claims.);
debugger(1, '  after subst = ' + to_string(out.));
real_scopes.:=size(tx_scopes.)==0?scopes.:tx_scopes.;
out. := claims#resolve_templates(out., real_scopes., 'post_token'==exec_phase);
debugger(1, '  after resolve = ' + to_string(out.));
// don't assert the scope unless it has content.
if[size(out.)!=0][
  access_token.'scope' := detokenize(out., ' ');
];
debugger(1,'final at:\n' + print(access_token.));
debugger(1, '  at = ' + to_string(access_token.));
