/*
   Basic script for testing. This will take xa. parameters and set
   token claims based on them. This allows for having a client
   various claims and test that they are handled correctly, effectively
   letting the client have many possible configurations. The aim
   is diversity in testing without having to have a ton of specialized
   clients.

   The format of an entry is
   /token/value/claim := value

   E.g.
   /idt/value/iss := 'https:/oa4mp.org'

   tokens are idt, at or rt.

   So if you passed org.oa4mp:/idt/value/foo=woof

   then in the id token claims there would be a claim named foo
   with the value of woof asserted.

*/

debugger(1);
debugger(1,'xas.=' + input_form(xas.));
 if[size(xas.) == 0][return();];

debugger(1,'exec_phase='+exec_phase);
debugger(1,'access_token:\n'+print(access_token.));
debugger(1,'refresh_token:\n'+print(refresh_token.));
oa4mp.:=xas.'org.oa4mp';
z.:=null;
// This uses the fact that a list is an index, viz.,
// z.['a','b'] ==z.'a'.'b'
// so tokenizing the keys returns the index we want.
while[k∋oa4mp.][z.tokenize(k,'/'):=oa4mp.k;]; // convert to a stem
debugger(1,'z:\n' + print(z.));

define[set_claims(token., key, values.)][
  debugger(1,input_form(token.));
  debugger(1,key);
  debugger(1,input_form(values.));
  debugger(1,'set_claims: values.\n' + print(values.));
  λ. := values\key\'value'; // a stem of {claim:value} pairs
  debugger(1,'λ.:\n' + print(λ.));
  while[k∋λ.][λ.k := (size(λ.k)==1)?(λ.k.0):λ.k;];
  debugger(1,'set_claims: for ' + key + ' λ.\n' + print(λ.));
  while[k∋λ.][token.k := λ.k;]; // set the claims en masse
]; // end define set_claims

// one last bit of cleanup. By default, the system only returns
// arrays of values, so convert single values to single values.

if[exec_phase∈['post_auth','post_user_info']][
   if[∃claims.][
     debugger(1,'claims:\n' + print(claims.));
     set_claims(claims., 'idt', z.);
  ];
];

if[exec_phase∈['post_token', 'post_refresh', 'post_exchange']][
   // might not be an access token depending on the configuration.
   if[∃access_token.][
     debugger(1,'at:\n' + print(access_token.));
     set_claims(access_token., 'at', z.);
     debugger(1, 'at after setting\n' + print(access_token.));
   ];
   // might not be a refresh token depending on the configuration.
   if[∃refresh_token.][
     debugger(1,'rt:\n' + print(refresh_token.));
     set_claims(refresh_token., 'rt', z.);
   ];
];

