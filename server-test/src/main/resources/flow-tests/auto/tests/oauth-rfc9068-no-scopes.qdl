#! /usr/bin/env -S qdl-run

/*
   Basic RFC9068 test. This gets no scopes (allowed in the spec) and sends a resource parameter
   which should then be checked it ends up in the access token
*/
params. ≔ {'sub':'davenport',
           'resource':'ANY'};
// another test should be to send the resource parameter which comes back as the access token audience.
test_id:= 'oauth.rfc9068.qdl';
// set up the client
clc#init($$OA4MP_CLC_INI, test_id);

initialization := size(args())==1⇒args().0:import(load('test#/auto/utils/initialization.mdl'));
checks:=initialization#checks();
ini.:=initialization#get_client_ini(test_id);
server_defaults.:=initialization# server_defaults();
cc.:=initialization#get_client_config(test_id); // This is the client configuration from the server
cc_at.:=cc.'cfg'.'tokens'.'access';
cc_idt.:=cc.'cfg'.'tokens'.'identity';
cc_rt.:=cc.'cfg'.'tokens'.'refresh';
// first part of test is to get tokens with the server defaults.
at_expected.:={'iss':server_defaults.'at_issuer',
               'sub':params.'sub',
               'resource':'ANY',
               'client_id':ini.'id'};



// This function simply inherits everything at the point of call, allowing
// the same block of code to be repeated.
verify()->
block[ // set of basic verifications to run repeatedly.
  ⊨∄at_asserted.'scope' : 'should not get scope asserted, got ' + (at_asserted.'scope');
  checks#rfc9068(at_expected., at_asserted.);
  checks#lifetime(cc_at.'lifetime', at_asserted.);
  ⊨size(claims.) ≡ 0 : 'got claims and should not:\n' + print(claims.);
];

// Initial token exchange
tokens. := clc#rfc7523(params.);
at_asserted.:= tokens.'access_token'.'jwt';
rt_asserted.:= tokens.'refresh_token'.'jwt';
    claims. := clc#claims();
verify();

// Refresh
tokens. := clc#refresh();
at_asserted.:= tokens.'access_token'.'jwt';
rt_asserted.:= tokens.'refresh_token'.'jwt';
    claims. := clc#claims();
verify();

// time to get the refresh and exchange tokens
at_asserted. := clc#exchange('-at','-subject','rt').'access_token'.'jwt';
rt_asserted. := clc#exchange('-rt','-subject','rt').'refresh_token'.'jwt';
// OAuth clients do not get ID tokens, so try and this should fail.
try[
     claims. := clc#exchange('-id','-subject','rt');
     ⊨ false : 'got claims and should not:\n' + print(claims.);
   ]catch[];
verify();
say('ok: OAuth RFC9068 test with no scopes');
