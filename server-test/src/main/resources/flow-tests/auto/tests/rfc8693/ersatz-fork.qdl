#! /usr/bin/env -S qdl-run

/*
   Tests an ersatz client for basic behavior on the fork. The clients
   are
   localhost:p1 = the provisioner
   localhost:e1 = ersatz client #1

   The provisioner uses keys to make its request as do the ersatz clients. This allows
   hands off testing.

   Note that the clients are configured with templates, not scripts and changing those
   will strongly impact the tests.
*/
/* for running in the QDL workspace manually
path := os_env('NCSA_DEV_INPUT')+'/oa4mp/server-test/src/main/resources/flow-tests';
script_path(path ~ script_path());
saved_cfg := '/tmp/ersatz1-test.json';
script_load('local/rfc8693/provisioner.qdl', saved_cfg);
clc#init($$OA4MP_CLC_XML_INI, 'localhost:e1');
clc#read(saved_cfg , '-p'); // -p switch tell client that this is an ersatz client

tokens. := clc#exchange(); // does fork

*/

args. := (0<size(args()))?args().0:['-at','-subject', 'at']; // default is to use access token for exchange.
saved_cfg := '/tmp/ersatz1-test.json';
script_load('auto/tests/rfc8693/provisioner.qdl', saved_cfg);
clc#init($$OA4MP_CLC_XML_INI, 'localhost:e1');
clc#read(saved_cfg , '-p'); // -p switch tell client that this is an ersatz client
old_tokens. := clc#tokens();

old_id. := clc#claims();
say('STARTING 𝕰𝖗s𝖆𝖙𝖟 FORK');
tokens. := clc#exchange(args.0, args.1, args.2); // forks flow
at. := tokens.'access_token';
rt. := tokens.'refresh_token';

/*
say('NEW at=\n' + print(at.));
say('OLD at=\n' + print(old_tokens.'access_token'));
say('NEW rt=\n' + print(rt.));
say('OLD rt=\n' + print(old_tokens.'refresh_token'));
*/

⊨ at.'jti' != old_tokens.'access_token'.'jti' : 'Access token not swapped';
⊨ rt.'jti' != old_tokens.'refresh_token'.'jti' : 'refresh token not swapped';
⊨ at.'jwt'.'aud' == 'https://wlcg.cern.ch/jwt/v1/access1' : ' AT wrong audience';
⊨ ∃ at.'jwt'.'scope' : 'AT missing scope claim';
scopes. := tokenize(at.'jwt'.'scope', ' ');
⊨ size(scopes.) == 2 : 'AT wrong number of scopes. Expected 2, got ' + size(scopes.);
⊨ 'p.q' ∈ scopes. : 'AT missing capability scope';
⊨ 'read:/Y/Q' ∈ scopes. : 'AT missing permission';
⊨ at.'jwt'.'client_id' == 'localhost:e1' : ' AT wrong client id';

// if that worked, then we should just be able to do regular exchanges, so as a test,
// here is one for a new id token. Note that the ID token is not inherited, as per
// configuration, so the subject is reset to the client id as a default.

id. := clc#exchange('-id', '-subject', 'at');
⊨ id.'jti' != old_id.'jti' : 'IDT JTI not updated';
⊨ id.'sub' == 'localhost:e1' : 'IDT wrong subject';
⊨ id.'iat' != old_id.'iat' : 'IDT issued at not updated';
say('ok: 𝕰𝖗s𝖆𝖙𝖟 basic fork using ' + (args.2) + ' for the subject token and requesting ' + (args.0));
