/*
  Provisions the client for an FTS client  type flow. To wit,
  1. The provisioner  uses the CCF and gets an access token. Audience and scopes are set initially
  2. The FTS (ersatz) client forks the flow for an access token
  3. The FTS client does a call to the refresh endpoint (with downscopes,
     audience, etc.) to get an access token and refresh token.

  This script does 1. The fts-fork.qdl script does 2 and 3.
  The scope handling mechanism is just to echo whatever
  was passed (at least at this point in time).
  It writes the state to a file,
  and should be followed up with running fts-fork.qdl

  Run this as
  script_load(os_env('NCSA_DEV_INPUT') + '/oa4mp/server-test/src/main/resources/flow-tests/auto/tests/rfc8693/fts-provisioner.qdl');
*/
debugger(1);
path := os_env('NCSA_DEV_INPUT')+'/oa4mp/server-test/src/main/resources/flow-tests';
script_path(path ~ script_path());
saved_cfg := '/tmp/fts-test.json';
//test_id:= 'ccf.basic.provisioner';
test_id:= 'ccf.jwt.provisioner';
initialization := import(load('test#/auto/utils/initialization.mdl'));
ini.:=initialization#get_client_ini(test_id);
server_defaults.:=initialization# server_defaults();
s. := ['X', 'Y', 'Z', 'wlcg:capabilityset:/dunana'];
clc#init($$OA4MP_CLC_INI, test_id);
params. := {'scope':detokenize(s., ' '), 'audience':'rucio'};
response. := clc#ccf(params.);
s1. := tokenize(response.'scope',' ');
⊨ ⊗∧⊙(s1. ∈ s.) ∧ (s. ∈ s1.)  : 'incorrect scopes, got ' +response.'scope' ;
// Have to excavate the token
rrr := decode(tokenize(response.'access_token', '.').1); // raw token
debugger(1,'raw token:' + rrr);
debugger(1,'access token:\n' + print(from_json(rrr)));
⊨ (from_json(rrr).'aud' == 'rucio') : 'incorrect aud claim';
debugger(1,'ccf response:\n' + print(response.));
rm(saved_cfg);
raw. := clc#exchange({'subject':'at','type':'rt', 'raw_response':true});
clc#write(saved_cfg);
