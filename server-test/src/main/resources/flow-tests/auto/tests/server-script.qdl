#! /usr/bin/env -S qdl-run

/*
  This tests the server-side scripts are working, and that extended attribute
  values are as well. It is the same as the basic SciToken
  test but does not test that, it merely uses the fact that JWTs are returned for
  the access adn refresh tokens and checks that the server's scripts inject the expected
  default values.
*/
params. ≔ {'sub':'threepwood',
           'scope':'openid org.oa4mp:userinfo read: queue: execute:',
           'org.oa4mp:/idt/value/xa_idt_key':'xa_idt_value',
           'org.oa4mp:/rt/value/xa_rt_key':'xa_rt_value',
           'org.oa4mp:/at/value/xa_at_key':'xa_at_value'
           };
test_id:= 'oidc.scitokens.qdl';
// set up the client
clc#init($$OA4MP_CLC_INI, test_id);
refresh_params.'refresh' :=  {'scope': 'execute:/home/threepwood/vo3/bin read:/public/vo3 queue:/staging/vo3-production-queue'};
refresh_params.'exchange' :=  {'scope': 'execute:/home/threepwood/vo3/bin read:/public/vo3 queue:/staging/vo3-production-queue'};
clc#set_param(refresh_params.);

initialization := size(args())==1⇒args().0:import(load('test#/auto/utils/initialization.mdl'));
checks:=initialization#checks();
ini.:=initialization#get_client_ini(test_id);
server_defaults.:=initialization# server_defaults();
cc.:=initialization#get_client_config(test_id); // This is the client configuration from the server
cc_at.:=cc.'cfg'.'tokens'.'access';
cc_idt.:=cc.'cfg'.'tokens'.'identity';
cc_rt.:=cc.'cfg'.'tokens'.'refresh';



// This function simply inherits everything at the point of call, allowing
// the same block of code to be repeated.
verify()->
block[ // set of basic verifications to run repeatedly.
⊨ ∃claims.'ϑ': 'missing claim from server script \'ϑ\'';
⊨ claims.'ϑ'=='my-ϑ': 'wrong claim value for \'ϑ\'';
⊨ ∃at_asserted.'my_at_claim': 'missing claim from server script \'my_at_claim\'';
⊨ at_asserted.'my_at_claim' == 'my_at_claim': 'missing claim from server script \'my_at_claim\'';
⊨ ∃rt_asserted.'xa_rt_key': 'missing claim from extended attribute \'xa_rt_key\'';
⊨ rt_asserted.'xa_rt_key' == 'xa_rt_value': 'missing claim from extended attribute \'xa_rt_key\'';
⊨ ∃rt_asserted.'my_rt_claim': 'missing claim from server script \'my_rt_claim\'';
⊨ rt_asserted.'my_rt_claim' == 'my_rt_claim': 'missing claim from server script \'my_at_claim\'';
];

// Initial token exchange
tokens. := clc#rfc7523(params.);
at_asserted.:= tokens.'access_token'.'jwt';
rt_asserted.:= tokens.'refresh_token'.'jwt';
    claims. := clc#claims();

// Check that the server-side scripting is working.
verify();

// Refresh
tokens. := clc#refresh();
at_asserted.:= tokens.'access_token'.'jwt';
rt_asserted.:= tokens.'refresh_token'.'jwt';
    claims. := clc#claims();
verify();

// time to get the refresh and exchange tokens
at_asserted. := clc#exchange('-at','-subject','rt').'access_token'.'jwt';
rt_asserted. := clc#exchange('-rt','-subject','rt').'refresh_token'.'jwt';
     claims. := clc#exchange('-id','-subject','rt');
verify();
//say('refresh:\n'+print(clc#refresh()));
//say('\nclaims:\n' + print(clc#claims()));
say('ok: Server QDL scripts');
