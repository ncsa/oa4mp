#! /usr/bin/env -S qdl-run

/*
   Tests the revocation (and introspection) machinery for a client.
   This creates a flow, then does a sequence of revocations and introspection
   calls to monitor that the machinery works right.
*/
/*
   Run it in QDL:
   path := os_env('NCSA_DEV_INPUT')+'/oa4mp/server-test/src/main/resources/flow-tests';
   script_path(path ~ script_path());
   script_load('/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests/local/revoke.qdl');

   Run it in the CLC
   load ashigaru:command.line2
   rfc7523 -username jeff

*/
temp_file := args().0;
tokens. := args().1;
  try[
     rm(temp_file);     // get rid of it if it is there so user is not repeatedly prompted.
   ]catch[
   // ok if it doesn't exist.
   ];

clc#write(temp_file); // save for later.
debugger(1, 'got tokens from RFC7523, wrote state file #0');
debugger(1, 'at:\n' + print(tokens.'access_token'));
debugger(1, 'rt:\n' + print(tokens.'refresh_token'));
rc := false;
⊨ (clc#introspect('-at')).'active':'access token not active';
⊨ (clc#introspect('-rt')).'active':'refresh token not active';
// Trick. Keep the original tokens so you can restart the flow -- emulates
// someone having older tokens that haven't aged.
// Make sure server is not set to revoke everything asap in refresh endpoint
// or this will fail.
new_tokens. := clc#refresh();
debugger(1, 'After refresh #1');
debugger(1, 'at:\n' + print(new_tokens.'access_token'));
debugger(1, 'rt:\n' + print(new_tokens.'refresh_token'));


⊨ clc#revoke('-at'):'token not revoked';
⊨ !(clc#introspect('-at')).'active' : 'AT is still active';
⊨ (clc#introspect('-rt')).'active' : 'RT is not active (and should be)';
try[
debugger(1, 'Before refresh #2');
 new_tokens. := clc#refresh();
debugger(1, 'After refresh #2');
debugger(1, 'at:\n' + print(new_tokens.'access_token'));
debugger(1, 'rt:\n' + print(new_tokens.'refresh_token'));
 rc := true;
]catch[
  say('error 1:' + error_message);
];

try[
 new_tokens. := clc#exchange();
 debugger(1, 'After exchange #3');
 debugger(1, 'at:\n' + print(new_tokens.'access_token'));
 debugger(1, 'rt:\n' + print(new_tokens.'refresh_token'));

 rc := true;
]catch[
  say('error2:' + error_message);
];

// Now reset to the original tokens and check you can start over
//clc#tokens(tokens.);
debugger(1,'reading back in state file, checking that tokens are still in grace period');

clc#read(temp_file);
new_tokens. := clc#tokens();
debugger(1, 'After read #4');
debugger(1, 'at:\n' + print(new_tokens.'access_token'));
debugger(1, 'rt:\n' + print(new_tokens.'refresh_token'));

⊨ clc#introspect('-at').'active':'access token not active after state reset';
⊨ clc#introspect('-rt').'active':'refresh token not active after state reset';
tokens. := clc#refresh();
debugger(1, 'After refresh #5');
debugger(1, 'at:\n' + print(tokens.'access_token'));
debugger(1, 'rt:\n' + print(tokens.'refresh_token'));

// RT tests
debugger(1, 'Doing exchanges #6');

tt1. := clc#exchange('-rt'); // refresh_token has new RT
tt2. := clc#exchange('-at', '-subject', 'rt'); // access_token has new RT
tokens.'access_token' := tt2.'access_token';
tokens.'refresh_token' := tt1.'refresh_token';
debugger(1, 'at:\n' + print(tokens.'access_token'));
debugger(1, 'rt:\n' + print(tokens.'refresh_token'));
//clc#tokens(tokens.);
⊨ clc#introspect('-rt').'active':'refresh token not active';
⊨ clc#introspect('-at').'active':'access token not active';
⊨ clc#revoke('-rt'): 'refresh token not revoked';
⊨ clc#revoke('-at'): 'access token not revoked';
⊨ !clc#introspect('-rt').'active':'revoked refresh token active';
⊨ !clc#introspect('-at').'active':'revoked access token active';
rc := true;
debugger(1, 'Final exchange #7 (should fail -- no valid tokens)');

try[
  clc#refresh();
  rc := false;
]catch[
 ];
⊨ rc:'was able to refresh with invalid tokens';

say('Revocation test: ok');
