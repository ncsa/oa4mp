/*

  Test to show that sequences of QDL scripts can be loaded and run in order.

{"tokens": {"identity": {
   "qdl":  [
      {
     "load": "seq0.qdl",
     "args":    {
      "bind_dn": "bind_dn",
      "bind_password": "abcdefghijkl",
      "return_attributes": ["isMemberOf"],
      "search_attribute": "uid",
      "port": 636
     },
     "xmd": {"exec_phase":    [
      "post_auth",
      "post_refresh",
      "post_token",
      "post_user_info"
     ]}
    },
      {
     "load": "seq1.qdl",
     "args": {"isMemberOf": "is_member_of"},
     "xmd": {"exec_phase":    [
      "post_auth",
      "post_refresh",
      "post_token",
      "post_user_info"
     ]}
    },
          {
         "load": "seq2.qdl",
         "args": {"isMemberOf": "is_member_of"},
         "xmd": {"exec_phase":    [
          "post_auth",
          "post_refresh",
          "post_token",
          "post_user_info"
         ]}
        }

   ],
  "type": "identity"
}}}
*/
say('setting debug to level 2');
debugger(2);
debugger(2,'seq 0');
debugger(3,size(args()));
debugger(1,'this should not print!');
claims.'seq0' := args().0.'port'; // returns 636
claims.'seq0_phase' := exec_phase; // returns current exec phase
  if[size(xas.) != 0]
then[
      say('xas.=' + to_string(xas.));
      claims.'roles' := xas.'org.oa4mp'.'/roles';
        if[âˆƒclaims.'roles2']
      then[claims.'roles2' := xas.'org.oa4mp'.'/roles2';];
    ];
/*  Uncomment to test error handling. */
/*
  raise_error('raise_error test', oa4mp_code, {'message':'error test', 'error_type' :
     'error_type_message','error_uri':'https://localhost/oops'});
*/
