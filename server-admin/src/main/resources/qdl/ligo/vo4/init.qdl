/*
   Use  -- for IGWN clients

   {"tokens": {"access": {
     "lifetime": 10800000,
     "qdl":  {
      "args":["igwn"],
      "load": "ligo/vo4/at.qdl",
      "xmd": {"exec_phase":   [
       "post_token",
       "post_exchange",
       "post_refresh"
      ]}
     },
     "type": "sci_token"
    }}}

*/
 debugger(1);

 trace('IGWN','starting init.');
       all_audience. := ['ANY', 'LIGO', 'segments.ligo.org'];
         robot_caput := 'igwn.robot:'; // marker in scopes for robots
  access_token.'ver' := 'scitoken:2.0';

 trace('IGWN', script_args()  + '=' + to_string(script_args(-1)));
 // is_igwn := script_args()==1?script_args(0)=='igwn':false;
 trace('IGWN','is_igwn=='+ is_igwn);

   if [!is_defined(claims.'eppn')]
 then [err('Missing EPPN. Cannot determine scopes.', 'invalid_request');];
           ζ.'Services:OSGPilotTest:SciTokens:scope_create' := ['scope_create'];
        ζ.'Services:OSGPilotTest:SciTokens:compute_create' := ['compute_create'];
        ζ.'Services:OSGPilotTest:SciTokens:compute_cancel' := ['compute_cancel'];
        ζ.'Services:OSGPilotTest:SciTokens:compute_modify' := ['compute_modify'];
          ζ.'Services:OSGPilotTest:SciTokens:compute_read' := ['compute_read'];

    if[is_igwn]
  then[
    // These are documented in https://git.ligo.org/computing/igwnscitokenscopes/-/blob/main/SciTokenScopes.json
                                                  all_audience. := ['ANY'];
    // The following are created with the extract.qdl script and pasted here.
    // It's the only way to be sure the policy document is actually processed right,
    // since doing it manually is a real error-prone chore.
                              ζ.'gw-astronomy:KAGRA-LIGO:members' ≔ ['read:/frames','read:/ligo','read:/kagra','read:/virgo','read:/shared','read:/staging','dqsegdb.read','gracedb.read','gwdatafind.read'];
                      ζ.'Communities:LVC:LSC:LDG:CIT:LDGCITUsers' ≔ ['write:/staging/${uid}'];
               ζ.'CO:COU:LDG Grid Account Holders:members:active' ≔ ['write:/staging/${uid}'];
               ζ.'Services:WLCG:SciTokens:scopes:read:authorized' ≔ ['compute.read'];
             ζ.'Services:WLCG:SciTokens:scopes:cancel:authorized' ≔ ['compute.cancel'];
             ζ.'Services:WLCG:SciTokens:scopes:create:authorized' ≔ ['compute.create'];
             ζ.'Services:WLCG:SciTokens:scopes:modify:authorized' ≔ ['compute.modify'];
            ζ.'Services:DQSegDB:SciTokens:scopes:read:authorized' ≔ ['dqsegdb.read'];
            ζ.'Services:GraceDB:SciTokens:scopes:read:authorized' ≔ ['gracedb.read'];
          ζ.'Services:DQSegDB:SciTokens:scopes:create:authorized' ≔ ['dqsegdb.create'];
          ζ.'Services:DQSegDB:SciTokens:scopes:modify:authorized' ≔ ['dqsegdb.modify'];
         ζ.'Services:gwDataFind:SciTokens:scopes:read:authorized' ≔ ['gwdatafind.read'];
        ζ.'Services:XRootD:SciTokens:scopes:read-ligo:authorized' ≔ ['read:/ligo'];
       ζ.'Services:XRootD:SciTokens:scopes:read-kagra:authorized' ≔ ['read:/kagra'];
       ζ.'Services:XRootD:SciTokens:scopes:read-virgo:authorized' ≔ ['read:/virgo'];
      ζ.'Services:XRootD:SciTokens:scopes:read-frames:authorized' ≔ ['read:/frames'];
      ζ.'Services:XRootD:SciTokens:scopes:read-shared:authorized' ≔ ['read:/shared'];
     ζ.'Services:XRootD:SciTokens:scopes:read-staging:authorized' ≔ ['read:/staging'];
     ζ.'Services:XRootD:SciTokens:scopes:write-frames:authorized' ≔ ['write:/frames'];
    ζ.'Services:SciTokenTesting:SciTokens:scopes:read:authorized' ≔ ['scitokentesting.read'];
   ζ.'Services:SciTokenTesting:SciTokens:scopes:write:authorized' ≔ ['scitokentesting.write'];

    ]
   else[
                              ζ.'gw-astronomy:KAGRA-LIGO:members' := ['read:/GraceDB', 'read:/frames','write:/GraceDB']; //CIL-1345, CIL-1427
                            ζ.'Communities:LVC:SegDB:SegDBWriter' := ['write:/DQSegDB'];
                         ζ.'Communities:LSCVirgoLIGOGroupMembers' := ['read:/DQSegDB' ,'read:/frames', 'read:/GraceDB','write:/GraceDB'];   //CIL-1345
             ζ.'Services:XRootD:SciTokens:read-frames:authorized' := ['read:/frames']; //CIL-1415
            ζ.'Services:XRootD:SciTokens:write-frames:authorized' := ['write:/frames']; //CIL-1414,
    ]; // end else

        get_permissions(γ.) -> reduce(@~,ζ\(γ\*\name));
         robots. := ~mask(scopes., 0 == starts_with(scopes., robot_caput));
      if [1 < size(robots.)]
    then [err('too many robots (' + size(robots.) +')','access_denied');];

    is_robot := 1 == size(robots.);
    trace('is robot? ' + is_robot);

   // If there is no audience, use all_audience. Otherwise check if there is an override in tx_audience and use that.
    requested_audience. := (size(tx_audience.) == 0)?(size(audience.)==0?all_audience.:audience.):tx_audience.;

     // Scope setup.
    requested_scopes. := (0 < size(tx_scopes.))?tx_scopes.:scopes.;
