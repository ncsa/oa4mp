/*
 ldapsearch \
  -LLL \
  -H ldaps://ldap.cilogon.org \
  -x \
  -b 'ou=people,o=KAGRA-LIGO,o=CO,dc=gwastronomy-data,dc=cgca,dc=uwm,dc=edu'
  '(eduPersonPrincipalName=duncan.meacher@shibbi.pki.itc.u-tokyo.ac.jp)'


 ldapsearch -LLL -H ldaps://ldap.cilogon.org  -x  -b 'ou=people,o=KAGRA-LIGO,o=CO,dc=gwastronomy-data,dc=cgca,dc=uwm,dc=edu'  '(eduPersonPrincipalName=duncan.meacher@shibbi.pki.itc.u-tokyo.ac.jp)'
 // KAGRA test user: ayuki.abe@shibbi.pki.itc.u-tokyo.ac.jp
 // IGWN test user: jeffrey.gaynor@ligo.org
 */
trace(x)->say(x);
     ini. := file_read('/home/ncsa/dev/csd/config/ini/ligo-ldap.ini',2).'ligo_prod';
     kagra. := file_read('/home/ncsa/dev/csd/config/ini/ligo-ldap.ini',2).'kagra';
     //ini. := file_read('/home/ncsa/dev/csd/config/ini/ligo-ldap.ini',2).'ligo_prod';
     //ini. := file_read('vfs#/scripts/ligo/ldap.ini',2).'ligo';
     user := script_args(0); // This is actually the EPPN for the user.
        uid := head(user, '@');
trace('*** LIGO get_attributes, user=' + user);
           kagra_cfg.'address' := kagra.'address';
              kagra_cfg.'port' := 636;
        kagra_cfg.'claim_name' := 'uid';
              kagra_cfg.'type' := 'ldap';
       kagra_cfg.'search_base' := kagra.'search_base';
         kagra_cfg.'ldap_name' := 'eduPersonPrincipalName';
         kagra_cfg.'auth_type' := 'simple';
          kagra_cfg.'username' := kagra.'username';
          kagra_cfg.'password' := kagra.'password';
             kagra_cfg.'groups' := ['isMemberOf'];
  kagra_cfg.'search_attributes' := ['isMemberOf','uid'];
     kagra_cfg.'fail_on_error' := true;
               kagra_response. := claims#get_claims(claims#create_source(kagra_cfg.), user);
             trace('get_attr kagra_response.==' + to_string(kagra_response., true));
            groups. :=  is_defined(kagra_response.'isMemberOf')?kagra_response.'isMemberOf':[];

            ligo_cfg.'address' := ini.'address';
               ligo_cfg.'port' := 636;
         ligo_cfg.'claim_name' := 'uid';
               ligo_cfg.'type' := 'ldap';
        ligo_cfg.'search_base' := 'ou=people,dc=ligo,dc=org';
          ligo_cfg.'ldap_name' := 'uid';
              ligo_cfg.groups. := ['isMemberOf'];
   ligo_cfg.search_attributes. := ['isMemberOf', 'uin'];
          ligo_cfg.'auth_type' := 'simple';
           ligo_cfg.'username' := ini.'username';
           ligo_cfg.'password' := ini.'password';
      ligo_cfg.'fail_on_error' := true;
                ligo_response. := claims#get_claims(claims#create_source(ligo_cfg.), uid);

                   trace('get_attr ligo_response.==' + to_string(ligo_response., true));

             // now we integrate the responses.
             groups. := groups. ~ (is_defined(ligo_response.'isMemberOf')?ligo_response.'isMemberOf':[]);

 if [size(groups.) == 0]
then[raise_error('Missing group information. Cannot determine scopes.', oa4mp_error,{'error_type':'access_denied'});];
         groups. := groups. ~ [{'name':'Communities:LVC:LSC:LDG:CIT:LDGCITUsers'}];
         say('get_attr groups: ' + print(groups.));
         response. := ligo_response.;
 response.'isMemberOf' := groups.;
  response.'uid' := uid;

if[is_defined(ligo_response.'uin')][response.'uin' := ligo_response.'uin';];
return(response.);
