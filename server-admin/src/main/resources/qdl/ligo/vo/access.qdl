/*
   Sets up the access token in the initial pass.
*/


if[
      !is_defined(claims.isMemberOf.)
  ]then[
          sys_err.ok := false;
     sys_err.message := 'Missing group information. Cannot determine scopes.';
  sys_err.error_type := 'access_denied';
     return();
];

all_audience. := ['ANY', 'LIGO', 'segments.ligo.org']; // constant
access_token.'ver' := 'scitoken:2.0';

// get current allowed scopes based on group memberships
allowed_scopes. := script_load('ligo/vo/get_scopes.qdl', claims.isMemberOf.);

 if[
    0 < size(scopes.)
  ][
    // If they request different scopes, honor it. Otherwise don't.
    allowed_scopes. := resolve_templates(allowed_scopes., scopes., true);
  ];
 access_token.scope := detokenize(unique(allowed_scopes.), ' ', 2); // turn in to string, omit duplications, trailing space

/*
   Audience processing. If nothign requested, return everything, otherwise
   return the subset of their request that is on our list of allowed audiences.
   There is no error in requesting audiences we do not recognize, we just
   don't honor them.
*/
  if[
    size(audience.) == 0
   ][
      access_token.aud. := all_audience.;
   ]else[
      // return only things we recognize.
      access_token.aud. :=mask(all_audience.,  has_value(all_audience., audience.));
   ];

// Issue: SciTokens allows for requesting audience in the scopes, so we have to
// snoop there too.

xi. := stAud(scopes.);

if[
  0 < size(xi.)
 ][
// then they made a request in the scopes.
  access_token.aud. := xi.;
];
