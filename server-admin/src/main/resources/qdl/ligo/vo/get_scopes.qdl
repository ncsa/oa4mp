/*
   Utility function to compute scopes based on group memberships.
   arg 0 is the group (claims.isMemberOf. usually)
*/

 block[
   γ. := script_args(0);

                ζ.'Communities:LSCVirgoLIGOGroupMembers' := ['read:/DQSegDB' ,'read:/frames', 'read:/GraceDB','write:/GraceDB'];   //CIL-1345
                   ζ.'Communities:LVC:SegDB:SegDBWriter' := 'write:/DQSegDB';
                     ζ.'gw-astronomy:KAGRA-LIGO:members' := ['read:/GraceDB', 'read:/frames','write:/GraceDB']; //CIL-1345
   ζ.'Services:XRootD:SciTokens:write-frames:authorized' := ['write:/frames']; //CIL-1414
    ζ.'Services:XRootD:SciTokens:read-frames:authorized' := ['read:/frames']; //CIL-1415
        /*

CIL-1414:

Please enable the "write:/frames" scope for LIGO users in the Services:XRootD:SciTokens:write-frames:authorized LIGO LDAP group.

CIL-1415:

Set "scope" to "read:/frames" if:

    user is in the "Communities:LSCVirgoLIGOGroupMembers" group in ldap.ligo.org
    user is in the "gw-astronomy:KAGRA-LIGO:members" group in ldap.gw-astronomy.cilogon.org

Warren Anderson requests that we use "Services:XRootD:SciTokens:read-frames:authorized" instead of "Communities:LSCVirgoLIGOGroupMembers".

So please update the policy as follows.

Set "scope" to "read:/frames" if:

    user is in the "Services:XRootD:SciTokens:read-frames:authorized" group in ldap.ligo.org
    user is in the "gw-astronomy:KAGRA-LIGO:members" group in ldap.gw-astronomy.cilogon.org


CIL-1345:
For LIGO users in either:

    the "Communities:LSCVirgoLIGOGroupMembers" group in ldap.ligo.org or
    the "gw-astronomy:KAGRA-LIGO:members" group in ldap.gw-astronomy.cilogon.org

please add the "read:/GraceDB" scope to their SciTokens.

This is in addition to the "read:/frames" scope (CIL-964) and the "read:/DQSegDB"
scope (CIL-796) and the "query:/DQSegDB" scope (CIL-1133). The policies for those
existing scopes are unchanged.

        */

 //  return(~values(mask(ζ., in_group2(keys(ζ.),γ.))));

 //  Alternate as of 1.4.7 if γ is structured as per g. in the example below
   return(reduce(@~,ζ\(γ\*\name)));
   ]; // end block

    /*
   // example replacement for above with much simpler data:

         zeta.'Communities:LSCVirgoLIGOGroupMembers' := ['read:/DQSegDB' ,'read:/frames', 'read:/GraceDB'];
      zeta.'Communities:LVC:SegDB:SegDBWriter' := 'write:/DQSegDB';
        zeta.'gw-astronomy:KAGRA-LIGO:members' := ['read:/GraceDB', 'read:/frames'];
  g. := [{'name': 'Services:MailingLists:Testing:eligible_factor'},{'name': 'Communities:LSCVirgoLIGOGroupMembers'},{'name':'Communities:LVC:SegDB:SegDBWriter'}]

   // To get the permissions in one fell swoop:
   reduce(@~,zeta\(g\*\name))

     ~values(mask(zeta., in_group2(keys(zeta.),g.)))
 [write:/DQSegDB,read:/DQSegDB,read:/frames]

 define
 [
 check(path.)
 ]
 >> check(path.) this will take a list of paths to files and test the syntax of the
 >> files for an OA4MP service, reporting any errors.
 while[for_next(file,path.)][r:=check_syntax(file_read(file));line_out:=file+': '+(size(r)==0?'ok':'\n   '+r);say(line_out);]
 ;
 ];

    */