/*
   An alternate configuration for ligo for use with a VO and returns audiences
   that maybe reduced in token exchanges ("like scopes").
   In this case, the groups are returned in the claims, along with the uin
   Jeff Gaynor
   created: 2020-09-15T16:00:55Z
   updated: 2020-10-31T11:57:45.909Z
 */
/*
  The configuration for this that should be in the client:

  tokens{
    identity{
    type=identity
    qdl{
        load="ligo/ligo2.qdl"
        xmd={exec_phase=pre_auth}
        args=["USER_ID", "PASSWORD"]
      }// end qdl
    } //end identity token
    access{
       type=sci_token
       qdl{
          load="ligo/access2.qdl"
           xmd={exec_phase=["post_token","post_refresh","post_exchange"]}
       } //end QDL
    } // end access token
  } //end tokens
*/

/* **** Actual script **** */
script_load('utils/init.qdl');
        //    claims.eppn := 'jim.basney@ligo.org';
       //     claims.idp := idp.ligo;
            
if[
     claims.idp != idp.ligo
][
     return();
];

            claims.uid := head(claims.eppn, '@');

         cfg.auth_type := 'simple';
           cfg.address := 'ldap.ligo.org';
              cfg.port := 636;
        cfg.claim_name := 'uid';
              cfg.type := 'ldap';
       cfg.search_base := 'ou=people,dc=ligo,dc=org';
         cfg.ldap_name := 'uid';
           cfg.groups. := ['isMemberOf'];
cfg.search_attributes. := ['email', 'uin', 'uid', 'isMemberOf'];
          cfg.username := script_args(0);
          cfg.password := script_args(1);

        claim_sources. := claim_sources. ~ [create_source(cfg.)];

