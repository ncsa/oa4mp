/* ********
     Sets up all constants. At the end of this the following are ready for use
     requested_audience. - The audience (w/ overrides)
       requested_scopes. - the scopes (w/ overrides)
                 robots. - list of robots (may be empty)
               is_robot - if size(robots.) == 1
    get_permissions(g.) - AT scopes from the claims.
     This checks for any number of error conditions (wrong IDP, no EPPN,...)
     so after this is called, check sys_err.

     This does not do the logic for using the robot. That is in access.qdl.
******** */
/*
   Use  -- for IGWN clients

   {"tokens": {"access": {
     "qdl":  {
      "args":["igwn"],
      "load": "ligo/vo3/at.qdl",
      "xmd": {"exec_phase":   [
       "post_token",
       "post_exchange",
       "post_refresh"
      ]}
     },
     "type": "sci_token"
    }}}

for Older LIGO (just no igwn arg is sent)
   {"tokens": {"access": {
     "qdl":  {
      "args":"igwn",
      "load": "ligo/vo/at.qdl",
      "xmd": {"exec_phase":   [
       "post_token",
       "post_exchange",
       "post_refresh"
      ]}
     },
     "type": "sci_token"
    }}}


*/

     all_audience. := ['ANY', 'LIGO', 'segments.ligo.org'];
       robot_caput := 'igwn.robot:'; // marker in scopes for robots
access_token.'ver' := 'scitoken:2.0';
is_igwn := script_args()==1?script_args(0)=='igwn':false;

 if[
       !is_defined(claims.'eppn')
   ]then[
           sys_err.ok := false;
      sys_err.message := 'Missing EPPN. Cannot determine scopes.';
   sys_err.error_type := 'invalid_request';
      return();
 ];
 /*
   New authZ policies as per https://docs.google.com/presentation/d/1WbfUwAE6xTVeC2ZhKKHTQF0_6deKa14ieErRz5pD77M/edit#slide=id.g1677b86136f_0_16

  scope (old)       scope (new)         group(s)
  read:/frames      read:/frames        Communities:LSCVirgoLIGOGroupMembers
                    gwdatafind.read     gw-astronomy:KAGRA-LIGO:members
  write:/frames     write:/frames       Services:XRootD:SciTokens:write-frames:authorized
  query:/DQSegDB    dqsegdb.read        Communities:LSCVirgoLIGOGroupMembers
                                        gw-astronomy:KAGRA-LIGO:members
  insert:/DQSegDB   dqsegdb.create      Communities:LVC:SegDB:SegDBWriter
  read:/GraceDB     gracedb.read        Communities:LSCVirgoLIGOGroupMembers
                                        gw-astronomy:KAGRA-LIGO:members
  write:/GraceDB    N/A                 N/A (managed via service ACLs)

 */
          ζ.'Services:OSGPilotTest:SciTokens:scope_create' := ['scope_create'];
        ζ.'Services:OSGPilotTest:SciTokens:compute_create' := ['compute_create'];
        ζ.'Services:OSGPilotTest:SciTokens:compute_cancel' := ['compute_cancel'];
        ζ.'Services:OSGPilotTest:SciTokens:compute_modify' := ['compute_modify'];
          ζ.'Services:OSGPilotTest:SciTokens:compute_read' := ['compute_read'];

    if[is_igwn][
    // These are documented in https://git.ligo.org/computing/igwnscitokenscopes/-/blob/main/SciTokenScopes.json
    /*

    Don't require use of the LIGO IdP. Query LDAP LDAP and gw-astronomy LDAP for the uid, since the user may be in either LDAP.
    Check for membership of "gw-astronomy:KAGRA-LIGO:Robots:<robot-name>:SciTokens:authorized" (in gw-astronomy LDAP)
       in addition to "Services:Robots:<robot-name>:SciTokens:authorized" (in LIGO LDAP).
    The corresponding Robot entry will still always be in LIGO LDAP with "ou=keytab,ou=robot,dc=ligo,dc=org" searchbase.
  */


                                                  all_audience. := ['ANY'];
                            ζ.'gw-astronomy:KAGRA-LIGO:members' := ['read:/frames','dqsegdb.read', 'gracedb.read','gwdatafind.read'];
          ζ.'Services:Compute:SciTokens:scopes:read:authorized' := ['compute.read'];
          ζ.'Services:DQSegDB:SciTokens:scopes:read:authorized' := ['dqsegdb.read','gracedb.read'];
        ζ.'Services:Compute:SciTokens:scopes:cancel:authorized' := ['compute.cancel'];
        ζ.'Services:Compute:SciTokens:scopes:create:authorized' := ['compute.create'];
        ζ.'Services:Compute:SciTokens:scopes:modify:authorized' := ['compute.modify'];
        ζ.'Services:DQSegDB:SciTokens:scopes:create:authorized' := ['dqsegdb.create'];
        ζ.'Services:DQSegDB:SciTokens:scopes:modify:authorized' := ['dqsegdb.modify'];
    ζ.'Services:XRootD:SciTokens:scopes:read-frames:authorized' := ['read:/frames'];
   ζ.'Services:XRootD:SciTokens:scopes:write-frames:authorized' := ['write:/frames'];
    ]else[
                       ζ.'gw-astronomy:KAGRA-LIGO:members' := ['read:/GraceDB', 'read:/frames','write:/GraceDB']; //CIL-1345, CIL-1427
                     ζ.'Communities:LVC:SegDB:SegDBWriter' := ['write:/DQSegDB'];
                  ζ.'Communities:LSCVirgoLIGOGroupMembers' := ['read:/DQSegDB' ,'read:/frames', 'read:/GraceDB','write:/GraceDB'];   //CIL-1345
      ζ.'Services:XRootD:SciTokens:read-frames:authorized' := ['read:/frames']; //CIL-1415
     ζ.'Services:XRootD:SciTokens:write-frames:authorized' := ['write:/frames']; //CIL-1414,
    ];

 //       get_permissions(γ.) -> reduce(@~,ζ\(γ\*\name));
      get_permissions(γ.) -> ~values(mask(ζ., in_group2(keys(ζ.),γ.)));

     //  Setup robots. Robot scope is always in the initial request and
     //  ignored elsewhere, so scopes. is the authoritative source.

         robots. := ~mask(scopes., 0 == starts_with(scopes., robot_caput));
say('*** LIGO -- robots = ' + to_string(robots.));
          if[
             1 < size(robots.)
          ][
                    sys_err.ok := false;
               sys_err.message := 'too many robots (' + size(robots.) +')';
            sys_err.error_type := 'access_denied';
               return([]);
          ];

          is_robot := 1 == size(robots.);

         if[
              is_robot][
          if[
            claims.'idp' != idp.'ligo'
            ][
                    sys_err.ok := false;
               sys_err.message := 'IDP must be ligo, not ' + claims.'idp';
            sys_err.error_type := 'access_denied';
               return();
             ];
          ];
   // Audience setup
   // If there is no audience, use all_audience. Otherwise check if there is an override in tx_audience and use that.
    requested_audience. := (size(tx_audience.) == 0)?(size(audience.)==0?all_audience.:audience.):tx_audience.;

     // Scope setup.
    requested_scopes. := (0 < size(tx_scopes.))?tx_scopes.:scopes.;

