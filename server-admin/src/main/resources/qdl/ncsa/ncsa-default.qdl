/*
   Default NCSA LDAP claim source. This will retrieve all group membership information.
   This will do nothing unless the IDP is correct.  Note if you reference this, you must
   have both a pre_auth and post_token phase: this adds itself as a claim source for
   the usual claims system.

   updated: 2021-06-03T14:58:43.439Z


  tokens{
    identity{
    type=identity
    qdl{
        load="ncsa/ncsa-default.qdl"
        xmd={exec_phase=["pre_auth","post_token","post_refresh"]}
        args=["true"] // true if the member of claim is just a list. Default is false.
      }// end qdl
    } //end identity token
  } //end tokens

*/
DEBUG := true;
debug(0, 'first debug message');
is_defined(proxy_claims.)?say('*** proxy_claims'+to_string(proxy_claims.)):say('*** NO PROXY CLAIMS');
log_entry('log message');
// Debug stuff --  enable if running on my dev box. Should not be in store.
if[DEBUG][
  say('In debug = ON');
  claims.idp := 'https://idp.ncsa.illinois.edu/idp/shibboleth';
  claims.eppn := 'jgaynor@illinois.edu';
  claims.debug := 'debugging mode on.';
]; //end debugging hack
say('at top');
say('script arg count =' + script_args());

script_load('utils/init.qdl');

if[claims.idp != idp.ncsa][return();]; // never process anything unless IDP is right.

if[
     exec_phase == 'pre_auth'
]then[
     cfg. := new_template('ncsa');
     say('*** NCSA claims=' + to_string(claims.,1));
     claims.uid := head(claims.eppn, '@'); // set search key
     claim_sources. := claim_sources. ~ [create_source(cfg.)]; // add it to any claims
     say('*** NCSA set claim_sources. # ' + size(claim_sources.));
     say('*** NCSA updated claims=' + to_string(claims., 1));
]; //end if

 say('*** ncsa-default claims=' + to_string(claims.,1));
 if[exec_phase ∉ ['post_token', 'post_refresh', 'post_user_info']][return();];
 if[0==script_args()][return();]; // do not process claims

 if[!is_defined(claims.isMemberOf.)][return();];
 if[to_boolean(script_args(0))][claims.isMemberOf. := claims.isMemberOf\*\name;];
 return();
 // rest of this is now ignored.

if[
   exec_phase ∈ ['post_token' ,'post_refresh', 'post_user_info'] // CIL-1327 only do this in token/refresh/user info
]then[
     // default is false -- return whole list
    convert := false;
    if[
        0 < script_args()
      ][
        convert := to_boolean(script_args(0));
       ];

    if[!convert][return();];

   // then take the isMemberOf claims and return them as a flat list, not as a JSON structure.
    s. := null; // initialize it

    if[
       !is_defined(claims.isMemberOf.)
      ][
       return();
    ];
     n := size(claims.isMemberOf.);
    while[
       for_next(j,n)
    ][
       s.j := claims.isMemberOf.j.name;
    ]; // end while
    claims.isMemberOf. := s.;
];
