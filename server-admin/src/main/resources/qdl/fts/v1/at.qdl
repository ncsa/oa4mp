//script_load('fts/acl.qdl');

 /*

 tokens {
     access {
         audience="https://wlcg.cern.ch/jwt/v1/any"
         qdl {
             args=[
                 "uid=oa4mp_user,ou=system,o=Fermilab,o=CO,dc=cilogon,dc=org",
                 NandTzbY20wG03u3lMHk
             ]
             load="fts/v1/at.qdl"
             xmd {
                 "exec_phase"=[
                     "post_token",
                     "post_refresh",
                     "post_exchange"
                 ]
             }
         }
         type=wlcg
     }
     identity {
         qdl {
             load="fts/v1/id-token.qdl"
             xmd {
                 "exec_phase"="post_token"
             }
         }
         type=identity
     }
     refresh {
         audience="https://wlcg.cern.ch/jwt/v1/any"
         type=refresh
     }
 }

*/
 // Constants for later
          EPE := 'eduPersonEntitlement';
      VOPAUID := 'voPersonApplicationUID';
         EPPN := 'eduPersonPrincipalName';
 IS_MEMBER_OF := 'isMemberOf';
    vault_uid := 'wlcg.credkey';
           CS := 'wlcg.capabilityset'; // qualifier
      CS_HEAD := CS + ':/';

    at_claims. := script_load('fts/v1/get_user.qdl', claims.eppn);
       trace('FTS', 'at_claims. =' + to_string(at_claims.));

    access_token.sub := hash(claims.eppn); // set this no matter what.
    if[is_defined(at_claims.EPPN)]
  then[access_token.sub := to_uuid(at_claims.EPPN);]; // ⍝
    if[!is_defined(at_claims.EPE.)]
  then[
       trace('FTS', 'at_claims.EPE. undefined');
       access_token.scope := ''; // return empty scopes.
       return(); // nothing to do. No capabilities ==>  no scopes.
      ]; //end if

/* Finish off id token -- figure out any groups */
    if[∃at_claims.isMemberOf.]
  then[
       trace('FTS','running groups');
        // Process any WLCG groups is there is member information
        wlcg_groups :='wlcg.groups';// need this later to assign stem value.
        wlcg_groups. := script_run('fnal/wlcg_groups.qdl', scopes., at_claims.isMemberOf.);
          if[size(wlcg_groups.) != 0]
        then[
               access_token.wlcg_groups. := wlcg_groups.;
               remove(at_claims.isMemberOf.);
            ];
       ];

/* Scope processing starts here */

  if[exec_phase == 'post_token' || size(tx_scopes.) == 0]
then[script_load('fts/v1/access.qdl');]
else[script_load('fts/v1/rtx.qdl');];

   if[0<size(tx_audience.) || 0 < size(tx_resource.)]
 then[access_token.aud. := tx_audience.~tx_resource.;];
