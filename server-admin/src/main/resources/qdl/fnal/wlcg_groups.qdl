/*
    Given a set of scopes and a set of all the groups for a user, return the groups
    that fit the request as per p.17 of the spec:

    https://indico.cern.ch/event/769180/contributions/3563095/attachments/1908176/3152124/WLCG_Common_JWT_Profiles.pdf

    arguments are
    0th - the scopes that the user is requesting.
    1st = the list of all groups the user is a member of
    returns: The wlcg - specified groups.

    Author: Jeff Gaynor
   Created: 2021-06-18T21:36:17.458Z
  Revised : 2025-05-07T11:35:02.781Z

   Arg #0 is the key. This may accept
     (a) simply wlcg.groups in which case all groups are returned
     (b) A list of them in the scopes, e.g. wlcg.groups:/cms/uscms wlcg.groups:/cms/ALARM in which
         case a list (in order requested) is returned.

   Typically arg #1 is the isMemberOf claims, though it can be from other sources. The spec says that
   groups are (only) returned in the access token, so unless there is a policy to return them in the
   identity token as well, make sure you only hand back one copy.

*/
debugger(1);
     fq_groups. ≔  args().0;
    all_groups. ≔  args().1;
  debugger(1,'   ');
  debugger(1,'processing wlcg_groups');
  debugger(1,'   fq groups : ' + to_string(fq_groups.));
  debugger(1,'  all groups : ' + to_string(all_groups.));
              w ≔  'wlcg.groups';
          has_w ≔  w ∈ fq_groups.;  // check if single scope of wlcg.groups is passed in
     fq_groups. ≔ fq_groups. !~ w; // remove w
  debugger(1,'       has_w : ' + to_string(has_w));
          caput ≔  w + ':'; // head of WLCG requested group.
  found_groups. ≔  (('^'+caput+'.*') ≈   fq_groups.)⌆fq_groups. ; // get groups that start with caput
  debugger(1,'found groups : ' + to_string(found_groups.));

    // trivial responses. No found groups and w means return all, otherwise, none
     size(found_groups.) ≡ 0 ⇒ (has_w ⇒ return(all_groups.) : return([]));
   found_groups. ≔  found_groups. - caput; // remove the FQ
  return(~ (found_groups.∈ all_groups.) ⌆ found_groups. );
/*
   Test:
     g. := ['/cms/uscms', '/cms/ALARM','/cms/users']; // typical isMemberOf list is unqualified
     w  := 'wlcg.groups';
     s. := 'openid' ~ 'email' ~ 'profile' ~ 'wlcg.groups:/cms/uscms'; // request for qualified groups.
     ss := os_env('NCSA_DEV_INPUT')+'/oa4mp/server-admin/src/main/resources/qdl/fnal/wlcg_groups.qdl';

     script_run(ss, s., g.); // request a subset
[/cms/uscms]

     script_run(ss, [w], g.); // request all groups
[/cms/uscms,/cms/ALARM,/cms/users]

     script_run(ss, ['openid','wlcg.groups:/cms/uscms', 'wlcg.groups:/cms/foo'],g.); // request for group they do not have access to
[/cms/uscms]

     script_run(ss, ['openid'], g.); // request no groups
 // All together as assertions
 ⊨    ⊗∧⊙(['/cms/uscms']≡script_run(ss, s., g.))`* : 'failed to return singleton subset'; // request a subset
 ⊨    ⊗∧⊙(['/cms/uscms','/cms/ALARM','/cms/users'] ≡ script_run(ss, [w], g.))`* : 'failed to return all';
 ⊨    ⊗∧⊙(['/cms/uscms'] ≡ script_run(ss, ['openid','wlcg.groups:/cms/uscms', 'wlcg.groups:/cms/foo'],g.))`* : 'failed to reject unknown';
 ⊨    0 ≡ size(script_run(ss, ['openid'], g.)) : 'failed to return none';

(no output means alles ok.)

 // All together manually
     script_run(ss, s., g.); // request a subset
     script_run(ss, [w], g.); // request all groups
     script_run(ss, ['openid','wlcg.groups:/cms/uscms', 'wlcg.groups:/cms/foo'],g.); // request for group they do not have access to
     script_run(ss, ['openid'], g.); // request no groups

     [/cms/uscms]
     [/cms/uscms,/cms/ALARM,/cms/users]
     [/cms/uscms]
     []
⊨
     s. := ['openid','profile','email','org.cilogon.userinfo','wlcg.capabilityset:/fermilab','wlcg.groups:/fermilab']
     g. := ['/cms/uscms', '/fermilab']


*/