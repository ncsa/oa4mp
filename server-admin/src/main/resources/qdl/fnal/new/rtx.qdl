/*
   For processing capabilites in the refresh or token exchange phases. Here the original
   capability set is used from the access token request, but the requests generally are
   for subset of the full set of capabilities.
*/
block[
    // Only one capability set at most is allowed.
     // At this point in the code there is no CS ever passed
     // (as per Dave on 6/27/2021), hence we must recover any from
     // the original scope request.
     // 3/20/2022 -- Oopsie! Dave switched to using another client which *always* sends the capability
     // set every time. Remove it if present since these would normally be removed in the access.qdl script.
     debugger(1,'*** FNAL initial access token.=' + print(access_token., {'box':true, 'width':72}));
     tx_scopes. := ~mask(tx_scopes., starts_with(tx_scopes., CS_HEAD)!= 0) ;
     tx_scopes. := ~mask(tx_scopes., starts_with(tx_scopes., 'wlcg.groups:')!= 0) ;
     xi. := claims#resolve_templates(user_record.EPE., tx_scopes., false); // resolves any scopes explicitly granted to user
     debugger(1,'*** FNAL rtx xi.:\n' + print(xi.));

     requested_cs. := ~mask(scopes., -1 < starts_with(scopes., CS_HEAD));
     // Checks that we have a single usable capability set.
     0 == size(requested_cs.) ⇒ raise_error('No requested capabilities.', oa4mp_error, {'error_type':'access_denied'});
     1 < size(requested_cs.) ⇒ raise_error('Multiple capabilities not allowed', oa4mp_error, {'error_type':'access_denied'});
     requested_cs := requested_cs.0; // there is one
     (requested_cs ∉ user_record.EPE) ⇒ raise_error('User does not have access to this capability set.', oa4mp_error, {'error_type':'access_denied'});

     debugger(1,'*** FNAL rtx got ' + CS + ':\n' + print(requested_cs.));
     //DEV-BLOCK
     service_record. :=  script_load('fnal/new/get_service.qdl',  (requested_cs.0-CS_HEAD)+'@fnal.gov', ldap_name);
     //END DEV-BLOCK
     //service_record. :=  script_load('fnal/new/get_service.qdl',  (requested_cs.0-CS_HEAD)+'@fnal.gov');

     debugger(1,'*** FNAL rtx service record:\n' + print(service_record.));

     ∃service_record.VOPAUID ⇒ claims.vault_uid := service_record.VOPAUID;
     ∃service_record.EPPN    ⇒ access_token.'sub' := service_record.EPPN;

       if[∃service_record.EPE.]
     then[
           // Requests for scopes now just reduce from initially granted permissions.
           // I.e. this is all scope reduction/checking
           is_uri(x)->is_defined(to_uri(x).scheme);
           // do any substitutions in the templates.
           s_rec. := claims#template_substitution(service_record.EPE., claims.); // altered service_record.EPE is s_rec.
           uq_. := []~mask(s_rec., !for_each(@is_uri, s_rec.)); // unqualified entries, like compute.cancel
           // If uq_. is empty, i.e., no unqualified names, then skip extracting them.
             if[0 < size(uq_.)]
           then[uq_. := mask(uq_.,reduce(@||, for_each(@==, tx_scopes., uq_.)));];
           // Get any specific overrides.
           eta. := claims#resolve_templates(s_rec., tx_scopes., false);
            xi. := xi. ~ eta. ~ uq_.; // duplicates ok here, removed later
     ]; // end if, when LDAP has entries for capability set

     debugger(1,'*** FNAL rtx.qdl final access token:\n' + print(access_token., {'box':true, 'width':72}));
     debugger(1,'*** FNAL rtx done!');
     access_token.'scope' := detokenize(unique(xi.), ' '); // turn in to string, omit duplications, trailing space
     return(access_token.);
];

