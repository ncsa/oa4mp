/*
   For processing capabilites in the refresh or token exchange phases. Here the original
   capability set is used from the access token request, but the requests generally are
   for subset of the full set of capabilities.
*/
block[
    // Only one capability set at most is allowed.
     // At this point in the code there is no CS ever passed
     // (as per Dave on 6/27/2021), hence we must recover any from
     // the original scope request.
     // 3/20/2022 -- Oopsie! Dave switched to using another client which *always* sends the capability
     // set every time. Remove it if present since these would normally be removed in the access.qdl script.
     SS(y)->say('*** FNAL' +  (is_defined(access_control.)?('[' + access_control.client_id + ']:'):':') + to_string(y));

     SS('scopes.=' + print(scopes.));
     SS('tx_scopes.=' + print(tx_scopes.));
     SS('tx_audience.=' + print(tx_audience.));
     SS('tx_resource.=' + print(tx_resource.));

     tx_scopes. := ~mask(tx_scopes., starts_with(tx_scopes., CS_HEAD)!= 0) ;
     tx_scopes. := ~mask(tx_scopes., starts_with(tx_scopes., 'wlcg.groups:')!= 0) ;
     xi. := claims#resolve_templates(at_claims.EPE., tx_scopes., false); // resolves any scopes explicitly granted to user
     SS('rtx xi.:\n' + print(xi.));

     cs. := []~mask(scopes., -1 < starts_with(scopes., CS_HEAD));
     SS('FNAL rtx cs.=' + print(cs.));
     if[
         1 == size(cs.)
     ][

         SS('rtx got ' + CS + ':\n' + print(cs.));
          record. :=  script_load('fnal/new/get_service.qdl',  (cs.0-CS_HEAD)+'@fnal.gov');

         SS('rtx record:\n' + print(record.));
         if[
              0 < size(record.)
         ][
              if[is_defined(record.VOPAUID)][claims.vault_uid := record.VOPAUID;];
              if[is_defined(record.EPPN)][access_token.sub := record.EPPN;];
              if[
                 is_defined(record.EPE.)
              ][
                  is_uri(x)->is_defined(to_uri(x).scheme);
                  // do any substitutions in the templates.
                  s_rec. := claims#template_substitution(record.EPE., claims.); // use s_rec not record.EPE now
                  SS('rtx s_rec. post subst:\n' + print(s_rec.));
                  uq_. := []~mask(s_rec., !for_each(@is_uri, s_rec.)); // unqualified names
                  SS('rtx uq_.:\n' + print(uq_.));
                  // If uq_. is empty, i.e., no unqualified names, then skip extracting them.
                    if[0 < size(uq_.)]
                  then[uq_. := mask(uq_.,reduce(@||, for_each(@==, tx_scopes., uq_.)));
                       SS('rtx uq_. after reduce:\n' + print(uq_.));
                      ];
                  // Get any specific overrides.
                  eta. := claims#resolve_templates(s_rec., tx_scopes., false);
                  SS('rtx eta.:\n' + print(eta.));
                   xi. := xi. ~ eta. ~ uq_.; // duplicates ok here, removed later
              ]; // end if LDAP has entries for CS.
         ]; // end if something in LDAP to process
     ]; // end if capabilities are requested.

      SS('rtx final xi.:\n' + print(xi.));

      access_token.scope := detokenize(unique(xi.), ' ', 2); // turn in to string, omit duplications, trailing space
      SS('rtx access token scope = \'' + access_token.scope + '\'');

     if[is_defined(record.EPPN)][access_token.sub := record.EPPN;];
     SS('rtx done!');
];

