script_load('fnal/acl.qdl');
 
 // Constants for later
          EPE := 'eduPersonEntitlement';
      VOPAUID := 'voPersonApplicationUID';
         EPPN := 'eduPersonPrincipalName';
 IS_MEMBER_OF := 'isMemberOf';
    vault_uid := 'wlcg.credkey';
           CS := 'wlcg.capabilityset'; // qualifier
      CS_HEAD := CS + ':/';
 say('*** FNAL args ' + to_string(script_args(-1)));


    at_claims. := script_load('fnal/new/get_user.qdl', claims.eppn);

    say('*** FNAL at_claims. =' + to_string(at_claims.));

    access_token.sub := claims.eppn; // set this no matter what.
    if[is_defined(at_claims.EPPN)][access_token.sub := at_claims.EPPN;]; // ⍝
if[
   !is_defined(at_claims.EPE.)
]then[
   say('*** FNAL at_claims.EPE. undefined');
   access_token.scope := ''; // return empty scopes.
   return(); // nothing to do. No capabilities ==>  no scopes.
]; //end if

/* Finish off id token -- figure out any groups */
if[
    is_defined(at_claims.isMemberOf.)
  ][
   say('*** FNAL running groups');
    // Process any WLCG groups is there is member information
    wlcg_groups :='wlcg.groups';// need this later to assign stem value.

    wlcg_groups. := script_run('fnal/wlcg_groups.qdl', scopes., at_claims.isMemberOf.);
    if[
       	 size(wlcg_groups.) != 0
       ][
           access_token.wlcg_groups. := wlcg_groups.;
           remove(at_claims.isMemberOf.);
    ];
];

/* Scope processing starts here */

if[
   exec_phase == 'post_token' || size(tx_scopes.) == 0
  ][
     script_load('fnal/new/access.qdl');
     if[!sys_err.ok][return();]; // If there was an error, bail.

]else[
      say('*** FNAL at.qdl, starting rtx2');
     script_load('fnal/new/rtx.qdl');
];

 if[0<size(tx_audience.) || 0 < size(tx_resource.)][access_token.aud. := tx_audience.~tx_resource.;];
