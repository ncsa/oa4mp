script_load('fnal/acl.qdl');
 debugger(1);
 // Constants for later
          EPE := 'eduPersonEntitlement';
      VOPAUID := 'voPersonApplicationUID';
         EPPN := 'eduPersonPrincipalName';
 IS_MEMBER_OF := 'isMemberOf';
    vault_uid := 'wlcg.credkey';
           CS := 'wlcg.capabilityset'; // qualifier
      CS_HEAD := CS + ':/';

// DEV-block Next block is for my dev machine. Set this to test | dev | prod depending upon which test suite run.
ldap_name := 'prod';
script_load('test#/auto/server/runtime-vars-check.qdl', true, false); // regression testing. DO NOT DEPLOY
user_record. := script_load('fnal/new/get_user.qdl', claims.eppn, ldap_name);
size(user_record.) == 0 ? raise_error('no user record found for ' + claims.eppn);
// END DEV-block

/* Uncomment next line, comment out dev block for other machines */
//user_record. := script_load('fnal/new/get_user.qdl', claims.eppn);


debugger(2,'*** FNAL user_record.\n' + print(user_record., 72));

  if[exec_phase == 'post_token'] // so first pass only
then[
      debugger(1,'*** FNAL ('+ exec_phase + ') setting access token sub from claims.eppn to ' + (claims.'eppn'));
      access_token.'sub' := claims.'eppn'; // set this no matter what.
     if[∃user_record.EPPN]
       [
         debugger(1,'*** FNAL setting access token sub from user record ' + (access_token.'sub') + ' to ' + (user_record.EPPN));
         access_token.'sub' := user_record.EPPN;
         claims.'sub' := user_record.EPPN;
       ]; // end if
    ]; // end if

  if[∄user_record.EPE.]
then[
     access_token.'scope' := ''; // return empty scopes.
     return(); // nothing to do. No capabilities ==>  no scopes.
    ]; //end if

/* Finish off id token -- figure out any groups */
  if[∃user_record.'isMemberOf']
then[
      // Process any WLCG groups is there is member information
       wlcg_groups :='wlcg.groups';// need this later to assign stem value.
      wlcg_groups. := script_run('fnal/wlcg_groups.qdl', scopes., user_record.'isMemberOf');
      if[size(wlcg_groups.) != 0]
        [
           access_token.wlcg_groups := wlcg_groups.;
           remove(user_record.'isMemberOf');
        ]; //end if
    ]; //end if

  if[exec_phase == 'post_token' || size(tx_scopes.) == 0]
then[script_load('fnal/new/access.qdl');]
else[script_load('fnal/new/rtx.qdl');];

 (0<size(tx_audience.) || 0 < size(tx_resource.)) ⇒ access_token.'aud' := tx_audience.~tx_resource.;
