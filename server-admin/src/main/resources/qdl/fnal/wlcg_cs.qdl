/*
   A script for WLCG capability set support.
   Based on pull request

   https://github.com/WLCG-AuthZ-WG/common-jwt-profile/blob/2d9aa500c70453d54bbf2b6c389cfc148c995e1e/profile.md#group-or-role-based-capability-selection

   Actual document: https://github.com/WLCG-AuthZ-WG/common-jwt-profile/blob/master/profile.md
   
   in the WLCG specification.   This returns a list of the capabilites. The spec says that if they request other capabilites
   then just add these.

   Updated: 2021-06-22T14:16:17.407Z
*/

say('*** WLCG_CS debug script arg count = ' + to_string(script_args()));
say('*** WLCG_CS claims defined ? ' + to_string(is_defined(claims.)));


// Constants and such
CS := 'wlcg.capabilityset'; // qualifier
CS_HEAD := CS + ':/';
wlcg_cs. := []; // the WLCG capabilites set we are going to return

// There should be a single one of these per set of scopes.
// N.B. this is from the scopes of the initial request (!) so even if
// the user tries to get another capability set on an exchange, they
// are restricted to just the initial one.
  
//x. := [] ~  mask(requested_scopes.,has_value(index_of(requested_scopes., CS_HEAD), 0));

x. := []~mask(requested_scopes. , -1 < starts_with(requested_scopes., CS_HEAD)); //request capability sets

if[size(x.) == 0][return(wlcg_cs.);]; // no request cs, nothing to do.

if[
   1 < size(x.)
   ][
             sys_err.ok := false;
        sys_err.message := 'Multiple ' + CS + ' scopes are unsupported.';
      sys_err.error_type := 'access_denied';
        return(wlcg_cs.);
   ];

 tail(s, delim)->s - head(s, delim)-delim;

// So we have exactly one. Don't know which element of x it is,
// so list the keys and get the only one

c := x.0;

say('*** WLCG_CS x.=  ' + to_string(x.));
say('*** WLCG_CS c =  ' + to_string(c));

// c looks like e.g., wlcg.capabilityset:/dunepro
//remove c from the scopes


say('*** WLCG_CS requested_scopes before remove  ' + to_string(requested_scopes.));
requested_scopes. := mask(requested_scopes., requested_scopes. != c);
say('*** WLCG_CS requested_scopes after remove  ' + to_string(requested_scopes.));
/*
   From the spec:
   If the requester is not authorized to use the wlcg.capabilityset,
   an error MUST be returned; an access token without the requested
   capabilities will not be issued.

   Implementation: This must be in the user's LDAP record as an EPE.
*/
say('*** WLCG_CS is_defined  ' + to_string(is_defined(at_claims.EPE.)));
say('*** WLCG_CS  has_value  ' + to_string(has_value(c, at_claims.EPE.)));

if[
   (!is_defined(at_claims.EPE.)) || (!has_value(c, at_claims.EPE.))
  ][
    // blow up if the user is not allowed
         sys_err.ok := false;
    sys_err.message := 'User does not have access to this capability set.';
  sys_err.error_type := 'access_denied';
    return(wlcg_cs.);
  ]else[
    say('*** WLCG_CS  FAILED conditional');
  ];

/*
u. := to_uri(c);
parsedPath. := tokenize(u.path, '/');
lastIndex := size(parsedPath.) - 1;
lookupName := parsedPath.lastIndex + '@fnal.gov'; // required to construct the vop id
*/
lookupName := tail(c, ':/') + '@fnal.gov';
VOPAUID := 'voPersonApplicationUID';
EPPN := 'eduPersonPrincipalName';
say('*** WLCG_CS debug: lookup name: ' + lookupName);
say('*** WLCG_CS debug: requested capabilities: ' + c);
say('*** WLCG_CS debug: claims count = ' + to_string(size(claims.)));

                  cs. := new_template('ldap');
         cs.auth_type := 'simple';
           cs.address := 'ldap-test.cilogon.org';
              cs.port := 636;
        cs.claim_name := 'uid';
       cs.search_base := 'ou=services,o=Fermilab,o=CO,dc=cilogon,dc=org';
              cs.type := 'ldap';
         cs.ldap_name := 'voPersonExternalID';
cs.search_attributes. :=  [EPPN, EPE, VOPAUID];
          cs.username := script_args(0);
          cs.password := script_args(1);

record. := get_claims(create_source(cs.), lookupName);

say('*** WLCG_CS debug, returned from LDAP: ' + to_string(record.));

if[!is_defined(record.EPE.)][return(wlcg_cs.);]; // no capabilites means do nothing.

vault_id := null;
at_sub := null;

if[
    is_defined(record.VOPAUID)
  ][
     vault_id :=record.VOPAUID;
];
if[
   is_defined(record.EPPN)
 ][
   at_sub := record.EPPN;
];

wlcg_cs. := record.EPE.;
wlcg_cs. := template_substitution(wlcg_cs., claims.);
say('*** WLCG_CS debug, returning: ' + to_string(wlcg_cs., true));
return([vault_id, at_sub, wlcg_cs.]);
