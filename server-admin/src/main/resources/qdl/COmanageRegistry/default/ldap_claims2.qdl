// Original from Scott 4/9/2024
// Argument 0 should be a JSON object containing LDAP configuration
// details and an another embedded JSON object containing mappings
// from LDAP attribute names to claim names. Argument 0 will be converted
// into a stem.
//
// An example is
//
// {
//  "server_fqdn": "ldap.cilogon.org",
//  "server_port": 636,
//  "bind_dn": "uid=oa4mp_user,ou=system,o=MESS,o=CO,dc=cilogon,dc=org",
//  "bind_password": "XXXXXXXX",
//  "search_base": "ou=people,o=MESS,o=CO,dc=cilogon,dc=org",
//  "search_attribute": "uid",
//  "return_attributes": ["isMemberOf","voPersonID"],
//  "list_attributes": ["isMemberOf"],
//  "ldap_to_claim_mappings": {
//    "eduPersonPrincipalName": "sub",
//    "isMemberOf": "is_member_of",
//    "voPersonID": "voPersonID"
//    }
//  }

// Load the configuration parameters.
config_params. := script_args(0);

// Configure a LDAP client.
ldap_client. := new_template('ldap');
ldap_client.type := 'ldap';
ldap_client.address := config_params.server_fqdn;
ldap_client.port := config_params.server_port;
ldap_client.auth_type := 'simple';
ldap_client.username := config_params.bind_dn;
ldap_client.password := config_params.bind_password;
ldap_client.search_base := config_params.search_base;
ldap_client.claim_name := 'sub';
ldap_client.ldap_name := config_params.search_attribute;
ldap_client.search_attributes. := config_params.return_attributes;
ldap_client.list. := config_params.list_attributes;

// Create an LDAP claim source.
ldap_claim_source. := create_source(ldap_client.);

// Get claims from the LDAP claim source. If the LDAP query fails
// to find a result then the empty set {} is returned rather than an
// empty stem [] (currently), so wrap the return in a stem.
ldap_query_results. := [ get_claims(ldap_claim_source., claims.sub) ];

// If the size of the LDAP query results at key 0 is non zero then
// the query was successful so ammend the claims.
if[
   size(ldap_query_results.0) != 0
]then[
   claims. := claims. ~ ldap_query_results.0;
];

mappings. := config_params.ldap_to_claim_mappings;

// Loop over the keys (LDAP attribute names) in the mappings and if the claim name
// is not the same as the LDAP attribute name then check to see if there is
// a claim with the LDAP attribute name, and if so rename it to use the mapped
// claim name.
while[
      // Loop over the keys in the mappings.
      for_keys(i, mappings.)
]do[
      if[
         // Test if a mapping is to a new claim or the same claim.
         i!=mappings.i
      ]then[
         if[
            // Only rename a claim if it exists.
            has_keys(claims., [i]).0
         ]then[
            claims.mappings.i:=claims.i;
            remove(claims.i);
         ];
      ];
];