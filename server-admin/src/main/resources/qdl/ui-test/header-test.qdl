/*
   This is a test for the user info endpoint. What should happen is that this
   file is called in the post_auth phase, It only sets up a file claim source
   and adds it to the list of sources.
   Then in the access, refresh and user_info phases, the process.qdl file is called.


 tokens{
  identity{
     type=identity
     qdl{
         load="ui-test/header-test.qdl"
         xmd={exec_phase="post_auth"}
       }// end qdl
     } //end identity token
   } //end tokens

   ╔══════════════════════════════════════════════════════════════════════════════╗
   ║  NOTE: j_load uses this in shared state mode as a very specific trick        ║
   ║  to use the QDL header claim source. This is because there is a lot of       ║
   ║  the state that has to be processed. If you don't do this, then when         ║
   ║  you get_claims, none of the state is available to the function and none     ║
   ║  of the headers you set are processed.                                       ║
   ╚══════════════════════════════════════════════════════════════════════════════╝
*/

c2 := j_load($$OA4MP_PATH +'.util.claims', 'share');
cfg. := c2#new_template('header');
cfg.'prefix' := 'x_';
say('starting header test at ' + date_iso());
say('headers:\n' + print(auth_headers.));
// since the claim source uses the auth-headers, we can just use those directly.
// For the remote user test, thje request is made, we add the additional headers in this
// script and then they are processed.
auth_headers. := auth_headers. ~ {'x_foo' :'bar', 'x_arf':'woof', 'y_oink':'oink'};
/*

   ╔══════════════════════════════════════════════════════════════════════════════╗
   ║  NOTE: This will get all of the headers for the user. It is up to the        ║
   ║  script to sort them out. This is in contract to the filter claim source     ║
   ║  which filters headers by a prefix and only returns those that match         ║
   ╚══════════════════════════════════════════════════════════════════════════════╝

*/
cfg. := c2#create_source(cfg.);
headers. := c2#get_claims(cfg., claims.'sub');
say('headers:\n' + print(headers.));
claims. := claims. ~ headers.;
