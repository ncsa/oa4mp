<!--
     Basic configuration for OA4MP. This almost works in that you need to set the authorization method
     below.
-->
<config>
    <!--
         This sets an alias. You then can simply always point to "default" as the
         name of your active configuration.
    -->
    <service name="default" alias="oa4mp.derby.filestore"/>

    <!--
         See https://oa4mp.org/server/dtd/server-dtd-service-tag.html
         This sets the most commonly used defaults, such as lifetimes,
         and such.
    -->
    <service
            address="https://${OA4MP_HOST}/oauth2"
            authorizationGrantLifetime="750 sec"
            clientSecretLength="64"
            defaultAccessTokenLifetime="900 sec."
            enableTokenExchange="true"
            issuer="https://${OA4MP_HOST}/oauth2"
            maxAccessTokenLifetime="20 min"
            maxAllowedNewClientRequests="100"
            maxClientRefreshTokenLifetime="1296000000 ms."
            maxRefreshTokenLifetime="2592000 sec"
            name="oa4mp.derby.filestore"
            qdlConfigName="qdl-default"
            refreshTokenEnabled="true"
            refreshTokenLifetime="30 days"
            rtGracePeriod="3600 sec"
            scheme="oa4mp"
            schemeSpecificPart="">
        <!--
             See https://oa4mp.org/server/configuration/signing.html
             You should create a key by issuing.

              ${OA4MP_HOME}bin/jwt -batchFile ${OA4MP_HOME}etc/create_keys.cmd

              this calls the very useful key utility included with OA4MP. It will
              list keys at various strength. Choose one of the id's as the default
              and put it in below.
        -->
        <JSONWebKey defaultKeyID="${JWT_KEY_ID}">
            <path><![CDATA[${OA4MP_HOME}etc/keys.jwk]]></path>
        </JSONWebKey>
        <scopes>
            <scope>openid</scope>
            <scope>email</scope>
            <scope>profile</scope>
            <!--   <scope>org.cilogon.userinfo</scope> -->
            <scope>org.oa4mp:userinfo</scope>
        </scopes>
<!--
                <authorizationServlet useHeader="true"
                                      requireHeader="true"
                                      headerFieldName="REMOTE_USER"
                />
-->
<!--
               <authorizationServlet useProxy="true"
                                     cfgFile="${OA4MP_HOME}etc/client-oa2.xml"
                                     cfgName="proxy-client"
                                     authorizationURI="https://${OA4MP_HOST}oauth2/authorize"
                                   />
 -->
        <derby storeType="file"
               path="${OA4MP_HOME}var/storage/server">
            <transactions/>
            <clients/>
            <clientApprovals/>
            <permissions/>
            <adminClients/>
            <txStore/>
            <voStore/>
        </derby>
        <clientManagement>
            <api protocol="rfc7591"
                 enabled="true"
                 anonymousOK="true"
                 anonymousAllowedDomains="localhost,127.0.0.1"
                 autoApprove="false"
            />
            <api protocol="rfc7592" enabled="true"/>
        </clientManagement>
        <logging
                logFileName="${OA4MP_HOME}log/server.log"
                logName="oa4mp"
                logSize="100000"
                logFileCount="2"
                debug="tue"/>

        <qdl name="qdl-default"
             enabled="true"
             debug="info"
             skipBadModulesOnLoad="true"
             restricted_io="false"
             strict_acls="false"
             server_mode_on="false"
             script_path="vfs#/scripts/">
            <virtual_file_systems>
                <vfs type="pass_through"
                     access="rw">
                    <root_dir>${OA4MP_HOME}qdl/scripts</root_dir>
                    <scheme><![CDATA[vfs]]></scheme>
                    <mount_point>/scripts</mount_point>
                </vfs>
            </virtual_file_systems>
            <modules version="2.0">
                <module type="java"
                        import_on_start="true">
                    <class_name>edu.uiuc.ncsa.myproxy.oa4mp.qdl.OA2QDLLoader</class_name>
                </module>
            </modules>
            <modules>
                <module type="java"
                        import_on_start="true">
                    <class_name>edu.uiuc.ncsa.myproxy.oa4mp.qdl.claims.TokenHandlerLoader</class_name>
                </module>
            </modules>
        </qdl>

    </service>

</config>