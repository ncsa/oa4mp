/*
{"tokens": {"access": {
 "qdl":  {
  "load": "ligo/vo4/at.qdl", // main driver script.
  "xmd": {"exec_phase":   [
   "post_token",
   "post_exchange",
   "post_refresh"
  ]}
 },
 "type": "sci_token"
}}}

   Sets up the access token in the initial pass.
*/


  attributes. := script_load('ligo/vo4/get_attributes.qdl', claims.'eppn');

SS('*** LIGO -- got a attributes ' + input_form(attributes.));

   permissions. := null;
     robot_name := null;
  if[is_robot]
    [
SS('*** LIGO -- got a robot');
       robot_name := robots.0 - robot_caput;
SS('*** LIGO -- name =' + robot_name);
       if[true ∈ ([ 'gw-astronomy:KAGRA-LIGO:Robots:' + robot_name + ':SciTokens:authorized',
                    'Services:Robots:' + robot_name + ':SciTokens:authorized'] ∈ attributes.'isMemberOf')
       ][
SS('*** LIGO -- in robots group');
                  moniker := robot_name + '@ligo.org';
       access_token.'sub' :=   claims.'sub' := moniker ;
            r_attributes. := script_load('ligo/vo4/get_attributes.qdl', moniker);
             permissions. := get_permissions(r_attributes.'isMemberOf');
              attributes. := r_attributes.; // use robot attributes instead now.
       ]else[
SS('*** LIGO -- not in robots group');
          err('you do not have permission to use the robot named "' + robot_name + '"','access_denied');
       ];
    ]else[
            permissions. := get_permissions(attributes.'isMemberOf');
      access_token.'sub' := claims.'sub' := claims.'eppn';
   ]; // end robots


  // Scope processing. Return only permissions requested.
//permissions. :=    ~values(mask(ζ., in_group2(keys(ζ.),(attributes.'isMemberOf'))));
SS('*** LIGO -- permissions' + to_string(permissions.));
SS('*** LIGO -- requested scopes' + to_string(requested_scopes.));
permissions. := reduce(@~,ζ\((attributes.'isMemberOf')\*\name));

permissions. := resolve_templates(permissions., requested_scopes., exec_phase=='post_token');
//         permissions. := ~mask(permissions., permissions. ∈ requested_scopes.);

SS('*** LIGO -- permissions after templates:' + to_string(permissions.));
 access_token.'scope' := detokenize(unique(permissions.), ' ', 2); // turn in to string, omit duplications, trailing space

// Audience processing.
    access_token.'aud' := requested_audience.;

/*
   Tidy up id token aka claims.
*/
claims.'uid' := is_defined(attributes.'uid')?attributes.'uid':claims.'eppn';
if[is_defined(attributes.'uin')]
  [claims.'uin' := attributes.'uin';];


 SS('*** LIGO: final access token = ' + to_string(access_token.));
 SS('*** LIGO: final claims  = ' + to_string(claims.));