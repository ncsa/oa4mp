Index: server-test/src/main/resources/flow-tests/dev/vo_1.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Tests the client with no configuration\n\n*/\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\ncfg.'id'  := 'dev:test/vo1';\ncfg.'idp'  := 'NCSA';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Basic VO test.';\ncfg.'flow_type' := 'df'; // Note to use df you need to set param for the token endpoint\n\nrc := script_load('driver.qdl', cfg.);\nif[rc!='ok'][return(rc);];\n\ntokens. := clc#access();\nat. := tokens.'access_token'.'jwt';\n⊨ is_defined(tokens.'refresh_token') : 'Missing refresh token';\nrt. := tokens.'refresh_token'; // This is not a JWT, but a basic token\n⊨ tokens.'refresh_token'.'lifetime' == 1000000000: ' wrong RT lifetime';\n⊨ tokens.'access_token'.'lifetime' == 900000: ' wrong AT lifetime';\n⊨ is_defined(at.'wlcg.ver')  : 'Not an WLCG token';\n⊨ at.'wlcg.ver' == '1.0' : 'Wrong WLCG version';\n⊨ at.'aud' == 'https://wlcg.cern.ch/jwt/v1/any' : 'incorrect audience';\n⊨ at.'scope' == '/home/jeff' : ' incorrect scope';\n⊨ at.'iss' == 'https://dev.cilogon.org/oauth2/myVO' : 'wrong issuer';\n⊨ claims().'aud' == cfg.'id' : 'wrong audience';\n⊨ claims().'iss' == 'https://dev.cilogon.org/oauth2/myVO' : 'wrong issuer';\n⊨ claims().'eppn' == 'jgaynor@ncsa.illinois.edu' : 'wrong eppn (did you use NCSA as the IDP?)';\n//⊨ tokens.'access_token'.'lifetime' == 1009000 : 'wrong access token lifetime';\n//⊨ tokens.'refresh_token'.'lifetime' == 1000000000 : 'wrong refresh token lifetime';\nsay('Basic VO test ok');\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/dev/vo_1.qdl b/server-test/src/main/resources/flow-tests/dev/vo_1.qdl
--- a/server-test/src/main/resources/flow-tests/dev/vo_1.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/dev/vo_1.qdl	(date 1683029456556)
@@ -4,7 +4,7 @@
    Tests the client with no configuration
 
 */
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 cfg.'id'  := 'dev:test/vo1';
 cfg.'idp'  := 'NCSA';
Index: server-test/src/main/resources/flow-tests/dev/df.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Tests the client with no configuration\n\n*/\n\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\ncfg.'id'  := 'dev:test/df';\ncfg.'idp'  := 'NCSA';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Test basic device flow on DEV.';\ncfg.'flow_type' := 'df'; \n\nrc := script_load('driver.qdl', cfg.);\nif[rc!='ok'][return(rc);];\n\ntokens. := clc#access();\nat. := tokens.'access_token';\nrt. := tokens.'refresh_token';\n⊨ claims().'aud' == cfg.'id' : 'wrong audience';\n⊨ at.'lifetime' == 900000 : 'wrong access token lifetime';\n⊨ rt.'lifetime' == 7200000 : 'wrong refresh token lifetime';\n\ntokens. := refresh();\nat. := tokens.'access_token';\nrt. := tokens.'refresh_token';\n\n⊨ claims().'aud' == cfg.'id' : 'wrong audience';\n⊨ at.'lifetime' == 900000 : 'wrong access token lifetime';\n⊨ rt.'lifetime' == 7200000 : 'wrong refresh token lifetime';\n\nat. := exchange().'access_token';\nrt. := exchange('-rt').'refresh_token';\n⊨ at.'lifetime' == 900000 : 'wrong access token lifetime';\n⊨ rt.'lifetime' == 7200000 : 'wrong refresh token lifetime';\n\nsay('ok');
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/dev/df.qdl b/server-test/src/main/resources/flow-tests/dev/df.qdl
--- a/server-test/src/main/resources/flow-tests/dev/df.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/dev/df.qdl	(date 1683029456148)
@@ -5,7 +5,7 @@
 
 */
 
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 cfg.'id'  := 'dev:test/df';
 cfg.'idp'  := 'NCSA';
Index: server-test/src/main/resources/flow-tests/local/rtx.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Tests the client with an old configuration and does repeated refresh and token\n   exchanges. This mimicks pretty rugged usages and checks that even over long\n   chains of refreshes and exchanges the endpoints continue to work.\n*/\n\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\n\ncfg.'id'  := 'localhost:scitokens'; // name of the configuration, not the id\ncfg.'idp'  := 'Github';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Test multiple exchanges and refreshes.';\ncfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint\nuser_id := 'http://cilogon.org/serverT/users/21340363';\n\nrc := script_load('driver.qdl', cfg.);\nif[rc!='ok'][return(rc);];\n\ntokens. := clc#access();\n// This emulates a service that is running for a long time and does several exchanges followed by a refresh now\n// and then to get user information.\nclc#refresh();\nclc#refresh();\nclc#refresh();\nclc#refresh();\nclc#exchange();\nclc#exchange();\nclc#exchange();\nclc#exchange();\nclc#exchange();\nclc#exchange();\nclc#exchange('-rt');\nclc#refresh();\nclc#exchange();\nclc#exchange('-rt'); \nclc#exchange();\nclc#exchange('-rt');\nclc#exchange('-rt');\nclc#exchange('-rt');\nclc#refresh();\nclc#exchange();\nclc#exchange();\nclc#refresh();\n\nsay('multiple exchange and refresh: ok');
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/local/rtx.qdl b/server-test/src/main/resources/flow-tests/local/rtx.qdl
--- a/server-test/src/main/resources/flow-tests/local/rtx.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/local/rtx.qdl	(date 1683029456496)
@@ -6,7 +6,7 @@
    chains of refreshes and exchanges the endpoints continue to work.
 */
 
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 
 cfg.'id'  := 'localhost:scitokens'; // name of the configuration, not the id
Index: server-test/src/main/resources/flow-tests/dev/ncsa_qdl.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Tests the client with no configuration\n\n*/\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\ncfg.'id'  := 'dev:/test/ncsa_qdl';\ncfg.'idp'  := 'NCSA';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Test standard NCSA claims processing using QDL. Critical regression test.';\ncfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint\n\nrc := script_load('driver.qdl', cfg.);\nif[rc!='ok'][return(rc);];\n\ntokens. := clc#access();\nclaims. := claims();\n\n⊨ claims.'aud' == cfg.'id' : 'wrong audience';\ngroups. := claims.'isMemberOf';\n⊨ groups. << List : 'is member of claim is not a group';\n⊨ groups.0 << String : 'is member of claim is not a flat list';\n⊨ tokens.'access_token'.'lifetime' == 1009000 : 'wrong access token lifetime';\n⊨ tokens.'refresh_token'.'lifetime' == 1000000 : 'wrong refresh token lifetime';\n\ntokens. := refresh();\nclaims. := claims();\n⊨ claims.'aud' == cfg.'id' : 'wrong audience';\ngroups. := claims.'isMemberOf';\n⊨ groups. << List : 'is member of claim is not a group';\n⊨ groups.0 << String : 'is member of claim is not a list';\n⊨ tokens.'access_token'.'lifetime' == 1009000 : 'wrong access token lifetime';\n⊨ tokens.'refresh_token'.'lifetime' == 1000000 : 'wrong refresh token lifetime';\n\nsay('ok');\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/dev/ncsa_qdl.qdl b/server-test/src/main/resources/flow-tests/dev/ncsa_qdl.qdl
--- a/server-test/src/main/resources/flow-tests/dev/ncsa_qdl.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/dev/ncsa_qdl.qdl	(date 1683029457424)
@@ -4,7 +4,7 @@
    Tests the client with no configuration
 
 */
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 cfg.'id'  := 'dev:/test/ncsa_qdl';
 cfg.'idp'  := 'NCSA';
Index: server-test/src/main/resources/flow-tests/local/rtx_exchanges.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Tests the client with an old configuration and does repeated refresh and token\n   exchanges. This mimicks pretty rugged usages and checks that even over long\n   chains of refreshes and exchanges the endpoints continue to work.\n*/\n\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\n\ncfg.'id'  := 'localhost:scitokens'; // name of the configuration, not the id\ncfg.'idp'  := 'Github';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Test multiple exchanges.';\ncfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint\nuser_id := 'http://cilogon.org/serverT/users/21340363';\nparams.'authz' :=  {'scope': 'read: x.y: x.z write:'}; // initial request is query\nparams.'token' :=  {'scope': 'read:/foo read:/home/' + user_id  + ' x.y:/abc/def/pqr write:/data/' + user_id + '/cluster/node47'};\n\nparams.'exchange' :=  {'scope': 'read:/home/'+user_id  + // read\n                                ' write:/home/'+user_id + // write -- wrong, not granted\n                                ' read:/public/lsst/' + user_id + // ok\n                                ' x.y:/abc/def/pqr' + // works since it add component to path\n                                ' x.y:/abc/defpqr'}; // not granted since the path is wrong\nrc := script_load('driver.qdl', cfg., params.);\nif[rc!='ok'][return(rc);];\n\ntokens. := clc#access();\nwhile[i∈[;10]][\n target := 0==mod(i, 3)?'-at':'-rt';\n clc#exchange(target);\n];\n\nsay('multiple exchanges: ok');
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/local/rtx_exchanges.qdl b/server-test/src/main/resources/flow-tests/local/rtx_exchanges.qdl
--- a/server-test/src/main/resources/flow-tests/local/rtx_exchanges.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/local/rtx_exchanges.qdl	(date 1683029456740)
@@ -6,7 +6,7 @@
    chains of refreshes and exchanges the endpoints continue to work.
 */
 
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 
 cfg.'id'  := 'localhost:scitokens'; // name of the configuration, not the id
Index: server-test/src/main/resources/flow-tests/dev/no_config.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Tests the client with no configuration\n\n*/\n path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\n if[path∉script_path()][script_path(path ~ script_path());];\ncfg.'id'  := 'dev:test/no_cfg';\ncfg.'idp'  := 'ANY';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Test with no configuration -- most basic test.';\ncfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint\n\nrc := script_load('driver.qdl', cfg.);\nif[rc!='ok'][return(rc);];\n\ntokens. := clc#access();\nsay(tokens., true);\n⊨ claims().'aud' == cfg.'id' : 'wrong audience';\n⊨ tokens.'access_token'.'lifetime' == 1009000 : 'wrong access token lifetime';\n⊨ tokens.'refresh_token'.'lifetime' == 1000000000 : 'wrong refresh token lifetime';\nsay('ok');
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/dev/no_config.qdl b/server-test/src/main/resources/flow-tests/dev/no_config.qdl
--- a/server-test/src/main/resources/flow-tests/dev/no_config.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/dev/no_config.qdl	(date 1683029457004)
@@ -4,7 +4,7 @@
    Tests the client with no configuration
 
 */
- path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+ path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
  if[path∉script_path()][script_path(path ~ script_path());];
 cfg.'id'  := 'dev:test/no_cfg';
 cfg.'idp'  := 'ANY';
Index: server-test/src/main/resources/flow-tests/local/rtx_refreshes.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Tests the client with an old configuration and does repeated refresh and token\n   exchanges. This mimicks pretty rugged usages and checks that even over long\n   chains of refreshes and exchanges the endpoints continue to work.\n*/\n\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\n\ncfg.'id'  := 'localhost:scitokens'; // name of the configuration, not the id\ncfg.'idp'  := 'Github';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Test multiple refreshes only.';\ncfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint\nuser_id := 'http://cilogon.org/serverT/users/21340363';\nparams.'authz' :=  {'scope': 'read: x.y: x.z write:'}; // initial request is query\nparams.'token' :=  {'scope': 'read:/foo read:/home/' + user_id  + ' x.y:/abc/def/pqr write:/data/' + user_id + '/cluster/node47'};\n\nparams.'exchange' :=  {'scope': 'read:/home/'+user_id  + // read\n                                ' write:/home/'+user_id + // write -- wrong, not granted\n                                ' read:/public/lsst/' + user_id + // ok\n                                ' x.y:/abc/def/pqr' + // works since it add component to path\n                                ' x.y:/abc/defpqr'}; // not granted since the path is wrong\n\nrc := script_load('driver.qdl', cfg., params.);\nif[rc!='ok'][return(rc);];\n\ntokens. := clc#access();\nwhile[i ∈[;10]][\n  clc#refresh();\n];\n\nsay('multiple refreshes: ok');
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/local/rtx_refreshes.qdl b/server-test/src/main/resources/flow-tests/local/rtx_refreshes.qdl
--- a/server-test/src/main/resources/flow-tests/local/rtx_refreshes.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/local/rtx_refreshes.qdl	(date 1683029455884)
@@ -6,7 +6,7 @@
    chains of refreshes and exchanges the endpoints continue to work.
 */
 
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 
 cfg.'id'  := 'localhost:scitokens'; // name of the configuration, not the id
Index: server-test/src/main/resources/flow-tests/dev/functor.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Tests the client with no configuration\n\n*/\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\ncfg.'id'  := 'dev:test/functor';\ncfg.'idp'  := 'GitHub';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Test old functor claims processing. Critical regression test.';\ncfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint\n\nrc := script_load('/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests/driver.qdl', cfg.);\nif[rc!='ok'][return(rc);];\n\ntokens. := clc#access();\n\ntokens. := refresh();\n⊨ is_defined(tokens.'refresh_token'): ' missing refresh token';\n⊨ tokens.'access_token'.'lifetime' == 900000: ' wrong AT lifetime';\n⊨ tokens.'refresh_token'.'lifetime' == 1000000000: ' wrong RT lifetime';\nclaims. := claims();\n⊨ claims.'aud' == cfg.'id' : 'wrong audience';\n⊨ claims.'iss' == 'https://dev.cilogon.org' : 'wrong issuer';\n⊨ claims.'cert_subject_dn' == '/DC=org/DC=cilogon/C=US/O=GitHub/CN=Jeff Gaynor D4620' : 'wrong cert subject DN';\n⊨ claims.'oidc' == '2953537' : 'wrong oidc identifier';\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/dev/functor.qdl b/server-test/src/main/resources/flow-tests/dev/functor.qdl
--- a/server-test/src/main/resources/flow-tests/dev/functor.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/dev/functor.qdl	(date 1683029457308)
@@ -4,7 +4,7 @@
    Tests the client with no configuration
 
 */
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 cfg.'id'  := 'dev:test/functor';
 cfg.'idp'  := 'GitHub';
@@ -12,7 +12,7 @@
 cfg.'description' :=  'Test old functor claims processing. Critical regression test.';
 cfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint
 
-rc := script_load('/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests/driver.qdl', cfg.);
+rc := script_load('/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests/driver.qdl', cfg.);
 if[rc!='ok'][return(rc);];
 
 tokens. := clc#access();
Index: server-test/src/main/resources/flow-tests/dev/revoke.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Tests the revocation (and introspection) machinery for a client.\n*/\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\ncfg.'id'  := 'dev:test/no_cfg';\ncfg.'idp'  := 'NCSA';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Test revocation and introspection machinery for a client.';\ncfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint\n\nrc := script_load('driver.qdl', cfg.);\nif[rc!='ok'][return(rc);];\n\ntokens. := clc#access();\n\n⊨ introspect().'active':'access token not active';\n⊨ introspect('-rt').'active':'refresh token not active';\n⊨ revoke():'token not revoked';\n⊨ !introspect().'active' : 'AT is not active';\n\ntry[\n  exchange();\n  ⊨ false : 'token should be invalid.';\n]catch[\n  say('caught TX exception');\n];\n\nsay(exchange('-at', '-x')); // Get a new access token for later before we invalidate the refresh token\n\n// RT tests\ntokens. := exchange('-rt');\n⊨ introspect('-rt').'active':'refresh token not active';\n\n⊨ revoke('-rt'): 'refresh token not revoked';\n⊨ !introspect('-rt').'active':'refresh token not active';\ntry[\n  exchange('-rt');\n  ⊨ false : 'token should be invalid.';\n]catch[\n say('caught TX  exception');\n];\n\n exchange('-at'); // can still get an access token\n\n⊨ introspect().'active':'access token not active';\n\nsay('ok');\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/dev/revoke.qdl b/server-test/src/main/resources/flow-tests/dev/revoke.qdl
--- a/server-test/src/main/resources/flow-tests/dev/revoke.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/dev/revoke.qdl	(date 1683029456356)
@@ -3,7 +3,7 @@
 /*
    Tests the revocation (and introspection) machinery for a client.
 */
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 cfg.'id'  := 'dev:test/no_cfg';
 cfg.'idp'  := 'NCSA';
Index: server-test/src/main/resources/flow-tests/test/resume.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Tests the client with no configuration\n\n*/\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\nsave_path := '/home/ncsa/dev/flow-test';\nids. := script_load(path + '/test/ids.qdl');\n\n say('starting...');\n \nwhile[\n  x ∈ ids.\n  ][\n   try[\n       say('reading ' + x);\n       clc#read(save_path + '/' + encode(x, 32) + '.xml');\n       tokens. := clc#refresh();\n       tokens. := clc#exchange();\n       tokens. := clc#exchange('-rt');\n       say('   check ok');\n     ]catch[\n       say('check failed for ' + x + ': ' + error_message);\n  ];\n];\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/test/resume.qdl b/server-test/src/main/resources/flow-tests/test/resume.qdl
--- a/server-test/src/main/resources/flow-tests/test/resume.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/test/resume.qdl	(date 1683029456936)
@@ -4,7 +4,7 @@
    Tests the client with no configuration
 
 */
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 save_path := '/home/ncsa/dev/flow-test';
 ids. := script_load(path + '/test/ids.qdl');
Index: server-test/src/main/resources/flow-tests/test/start.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Starts a bunch of flows, saves them and waits for restart.qdl\n*/\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nscript_path(path ~ script_path());\nids. := script_load(path + '/test/ids.qdl');\nsay('ids=' + to_string(ids.));\nsave_path := '/home/ncsa/dev/flow-test';\n\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint\n\n\nwhile[x∈ids.][\n   cfg.'id' := x;\n   cfg.'description' :=  'Test of ' + x;\n   cfg.'idp'  := 'ligo'<x?'LIGO':'NCSA';\n\n   rc := script_load('driver.qdl', cfg.);\n   tokens. := clc#access();\n   save_to := save_path+'/' +encode(x, 32) + '.xml';\n   try[\n     rm(save_to);     // get rid of it if it is there so user is not repeatedly prompted.\n   ]catch[\n   // ok if it doesn't exist.\n   ];\n   clc#write(save_to);\n   say('write ok for ' + x + ' (' + tokens.'refresh_token'.'lifetime'+ ' ms.)');\n];\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/test/start.qdl b/server-test/src/main/resources/flow-tests/test/start.qdl
--- a/server-test/src/main/resources/flow-tests/test/start.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/test/start.qdl	(date 1683029455720)
@@ -3,7 +3,7 @@
 /*
    Starts a bunch of flows, saves them and waits for restart.qdl
 */
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 script_path(path ~ script_path());
 ids. := script_load(path + '/test/ids.qdl');
 say('ids=' + to_string(ids.));
Index: server-test/src/main/resources/flow-tests/local/prototype.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\n/* Next should be set in the main.qdl script.*/\ncfg.'id'  := 'localhost:test/prototype';\ncfg.'idp'  := 'ANY';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'flow_type' := 'df';\ncfg.'description' :=  'This tests prototype, i.e., inheritance. The client inherits from localhost:command.line2';\nscript_load('local/vo_test-suite.qdl', cfg., 'https://localhost:9443/oauth2');\nsay('Prototype test: ok!');\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/local/prototype.qdl b/server-test/src/main/resources/flow-tests/local/prototype.qdl
--- a/server-test/src/main/resources/flow-tests/local/prototype.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/local/prototype.qdl	(date 1683029456860)
@@ -1,5 +1,5 @@
 #! /usr/bin/env -S qdl-run
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 /* Next should be set in the main.qdl script.*/
 cfg.'id'  := 'localhost:test/prototype';
Index: server-test/src/main/resources/flow-tests/local/test_ncsa.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Tests the client with no configuration\n   Client config 2022-11-09\n   {\"tokens\": {\"identity\": {\n       \"qdl\":  {\n        \"args\": [\"true\"],\n        \"load\": \"ncsa/ncsa-default.qdl\",\n        \"xmd\": {\"exec_phase\":   [\n         \"pre_auth\",\n         \"post_all\"                           ]}\n       },\n       \"type\": \"identity\"\n      }}}\n*/\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\n\ncfg.'id'  := 'localhost:test/ncsa'; // name of the configuration, not the id\ncfg.'idp'  := 'NCSA';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Basic NCSA test using default QDL script. START VPN or this hangs!';\ncfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint\nrc := script_load('driver.qdl', cfg.);\nif[rc!='ok'][return(rc);];\n\ntokens. := clc#access();\nclaims. := claims();\n⊨ tokens.'access_token'.'lifetime' == 1009000 : 'wrong access token lifetime';\n⊨ tokens.'refresh_token'.'lifetime' == 950400000 : 'wrong refresh token lifetime';\n⊨ claims.'aud' == cfg.'id' : 'wrong audience';  // Audience is a little different than usual.\n⊨ claims.'eppn' == 'jgaynor@illinois.edu' : 'wrong eppn';\n⊨ claims.'isMemberOf' << List : 'isMemberOf claim is not a simple list';\n⊨ claims.'isMemberOf'.0 << String  : ' isMemberOf should be a list';\nissued_at := claims.'iat'; // store for future use.\ntokens. := refresh();\n⊨ issued_at < claims().'iat' : 'id tokens should be issued at different time to show they are different';\nuser_info. := user_info();\n⊨ user_info.'isMemberOf' << List : 'isMemberOf claim in user info is not a simple list';\n⊨ user_info.'isMemberOf'.0 << String  : ' isMemberOf in user info should be a list';\n\nsay('test NCSA QDL script: ok');
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/local/test_ncsa.qdl b/server-test/src/main/resources/flow-tests/local/test_ncsa.qdl
--- a/server-test/src/main/resources/flow-tests/local/test_ncsa.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/local/test_ncsa.qdl	(date 1683029457484)
@@ -14,7 +14,7 @@
        "type": "identity"
       }}}
 */
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 
 cfg.'id'  := 'localhost:test/ncsa'; // name of the configuration, not the id
Index: server-test/src/main/resources/flow-tests/local/fnal-3.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\ncfg.'id'  := 'localhost:test/fnal';\ncfg.'idp'  := 'GitHub';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Test FNAL with no scopes -- fails';\ncfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint\ncfg.'description' :=  'Test FNAL with basic scopes';\n\nparams.'authz' :=  {'scope': 'storage.read:/ wlcg.capabilityset:/duneana wlcg.groups'};\nrc := script_load('driver.qdl', cfg., params.);\nif[rc!='ok'][return(rc);];\n\ntokens. := access();\nat. := tokens.'access_token'.'jwt';\nrt. := tokens.'refresh_token'.'jwt';\nclaims. := claims();\niat := claims.'iat'; // for later, to check it changes\n⊨ claims.'eppn' == 'cilogontest@fnal.gov' : 'wrong eppn';\n⊨ is_defined(claims.'wlcg.credkey')  : 'missing wlcg.credkey';\n⊨ 'cilogontest' == claims.'wlcg.credkey'  : 'wrong wlcg.credkey';\n⊨ is_defined(at.'wlcg.ver') : 'Not a WLCG token';\n⊨ at.'aud' == 'https://wlcg.cern.ch/jwt/v1/any' : 'incorrect access token audience';\n⊨ rt.'aud' == 'https://wlcg.cern.ch/jwt/v1/any' : 'incorrect refresh token audience';\n⊨ at.'sub' == 'cilogontest@fnal.gov': 'wrong subject';\nexpected_scopes. := ['compute.create', 'compute.read', 'compute.cancel', 'compute.modify', 'storage.create:/dune/scratch/users/cilogontest', 'storage.read:/dune'];\nss. := tokenize(at.'scope', ' ');\n⊨ reduce(@&&, expected_scopes. ∈ ss.) : 'incorrect access token scopes';\n⊨ abs(tokens.'access_token'.'lifetime' - 750000)<2000 : 'wrong lifetime, expected 750000, got ' + (tokens.'access_token'.'lifetime');\n\ntokens. := refresh();\nat. := tokens.'access_token'.'jwt';\nrt. := tokens.'refresh_token'.'jwt';\nclaims. := claims();\n⊨ claims.'iat' != iat : 'id token timestamp did not change. This implies the token is not updating.';\n⊨ claims.'eppn' == 'cilogontest@fnal.gov' : 'wrong eppn';\n⊨ is_defined(claims.'wlcg.credkey')  : 'missing wlcg.credkey';\n⊨ 'cilogontest' == claims.'wlcg.credkey'  : 'wrong wlcg.credkey';\n⊨ is_defined(at.'wlcg.ver') : 'Not a WLCG token';\n⊨ at.'aud' == 'https://wlcg.cern.ch/jwt/v1/any' : 'incorrect access token audience';\n⊨ rt.'aud' == 'https://wlcg.cern.ch/jwt/v1/any' : 'incorrect refresh token audience';\n⊨ at.'sub' == 'cilogontest@fnal.gov': 'wrong subject';\nexpected_scopes. := ['compute.create', 'compute.read', 'compute.cancel', 'compute.modify', 'storage.create:/dune/scratch/users/cilogontest', 'storage.read:/dune'];\nss. := tokenize(at.'scope', ' ');\n⊨ reduce(@&&, expected_scopes. ∈ ss.) : 'incorrect access token scopes';\n⊨ abs(tokens.'access_token'.'lifetime' - 750000)<2000 : 'wrong lifetime, expected 750000, got ' + (tokens.'access_token'.'lifetime');\nat.'access_token' := exchange('-at');\nrt.'refresh_token' := exchange('-rt');\nexpected_scopes. := ['compute.create', 'compute.read', 'compute.cancel', 'compute.modify', 'storage.create:/dune/scratch/users/cilogontest', 'storage.read:/dune'];\nss. := tokenize(at.'scope', ' ');\n⊨ reduce(@&&, expected_scopes. ∈ ss.) : 'incorrect access token scopes';\n⊨ abs(tokens.'access_token'.'lifetime' -750000)<2000 : 'wrong lifetime, expected 750000, got ' + (tokens.'access_token'.'lifetime');\nsay('FNAL test: ok');\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/local/fnal-3.qdl b/server-test/src/main/resources/flow-tests/local/fnal-3.qdl
--- a/server-test/src/main/resources/flow-tests/local/fnal-3.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/local/fnal-3.qdl	(date 1683029456436)
@@ -1,5 +1,5 @@
 #! /usr/bin/env -S qdl-run
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 cfg.'id'  := 'localhost:test/fnal';
 cfg.'idp'  := 'GitHub';
Index: server-test/src/main/resources/flow-tests/local/cil1550.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Tests the client with no configuration\n*/\n\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\n\ncfg.'id'  := 'localhost:cil1550'; // name of the configuration, not the id\ncfg.'idp'  := 'NCSA';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Test with Tiger Dev Functor script. This tests that the claim source serialization works.';\ncfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint\n\nrc := script_load('driver.qdl', cfg.);\nif[rc!='ok'][return(rc);];\ntokens. := clc#access();\n⊨ tokens.'access_token'.'lifetime' == 900000 : 'wrong access token lifetime';\n⊨ tokens.'refresh_token'.'lifetime' == 2592000000 : 'wrong refresh token lifetime';\n⊨ claims().'aud' == 'test:cil1550' : 'wrong audience';  // Audience is a little different than usual.\n⊨ claims().'eppn' == 'jgaynor@ncsa.illinois.edu' : 'wrong eppn';\nsay('CIL1550 (serialization of claims sources) test: ok');
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/local/cil1550.qdl b/server-test/src/main/resources/flow-tests/local/cil1550.qdl
--- a/server-test/src/main/resources/flow-tests/local/cil1550.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/local/cil1550.qdl	(date 1683029457784)
@@ -4,7 +4,7 @@
    Tests the client with no configuration
 */
 
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 
 cfg.'id'  := 'localhost:cil1550'; // name of the configuration, not the id
Index: server-test/src/main/resources/flow-tests/local/vo_test.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\n\n/* Next should be set in the main.qdl script.*/\ncfg.'id'  := 'localhost:command.line2';\ncfg.'idp'  := 'ANY';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'flow_type' := 'df';\ncfg.'description' :=  'This tests code challenge machinery, AT permissions, device flow and exchanges.';\nscript_load('local/vo_test-suite.qdl', cfg., 'http://localhost:9443/custom/issuer');\nsay('VO test: ok!');\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/local/vo_test.qdl b/server-test/src/main/resources/flow-tests/local/vo_test.qdl
--- a/server-test/src/main/resources/flow-tests/local/vo_test.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/local/vo_test.qdl	(date 1683029457360)
@@ -1,5 +1,5 @@
 #! /usr/bin/env -S qdl-run
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 
 /* Next should be set in the main.qdl script.*/
Index: server-test/src/main/resources/flow-tests/local/ersatz.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Tests an ersatz client\n*/\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\n\ncfg.'id'  := 'localhost:command.line2';\ncfg.'idp'  := 'UIUC';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Test ersatz client machinery.';\ncfg.'flow_type' := 'df'; // Note to use df you need to set param for the token endpoint\n\n\nparams.'authz' :=  {\n                    'scope': 'read: write: x.y',\n          'code_challenge' : 'N_zjM2czxZIWNar-lWUiuS7-Pacwh-k-L_Akpje6AmY',\n   'code_challenge_method' : 'S256'\n   };\nparams.'token' := {\n  'code_verifier' : 'qBdfP8Wmpomgkq6aJwcvZQMHx553RK4P7LAYxmzMAkmo8cM7MlE8ViJSOx38nlHr',\n          'scope' : 'read: write: x.y'\n   };\nparams.'exchange':={'scope':'read:/home/jeff write:/data/jeff/cluster x.y:/abc/def/ghi'};\nrc := script_load('driver.qdl', cfg., params.);\nif[rc!='ok'][return(rc);];\n\ntokens. := clc#access();\n// Save this, reload saved configuration.\noriginal_claims. := claims();\n\nsaved_cfg := '/tmp/ersatz-test.json';\nrm(saved_cfg); // just in case\nclc#write(saved_cfg);\nclc#init(cfg.'file', 'client:/my_ersatz');\nclc#read(saved_cfg , '-p'); // -p switch tell client that this is an ersatz client\n\n\n// Now go and do the exchanges for rt and at ASAP.\nat. := exchange('-at').'access_token';\nrt. := exchange('-rt').'refresh_token';\n// check that the id token has been updated\ntokens. := refresh();\nclaims. := claims();\n⊨ tokens.'access_token'.'lifetime' == 900000 : 'wrong access token lifetime';\n⊨ tokens.'refresh_token'.'lifetime' == 1800000 : 'wrong refresh token lifetime';\n⊨ claims().'aud' == 'client:/my_ersatz' : 'wrong audience';\n⊨ claims().'iss' == 'https://localhost:9443/oauth2/fermilab' : 'wrong issuer';\nsay('\uD835\uDD70\uD835\uDD97s\uD835\uDD86\uD835\uDD99\uD835\uDD9F client test: ok');
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/local/ersatz.qdl b/server-test/src/main/resources/flow-tests/local/ersatz.qdl
--- a/server-test/src/main/resources/flow-tests/local/ersatz.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/local/ersatz.qdl	(date 1683029456796)
@@ -3,7 +3,7 @@
 /*
    Tests an ersatz client
 */
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 
 cfg.'id'  := 'localhost:command.line2';
Index: server-test/src/main/resources/flow-tests/local/fnal-1.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\n\ncfg.'id'  := 'localhost:test/fnal';\ncfg.'idp'  := 'GitHub';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Test FNAL with no scopes -- fails';\ncfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint\n\n// Next test -- request bogus capability set.\nparams.'authz' :=  {'scope': 'wlcg.capabilityset:/fubar'};\ncfg.'description' :=  'Test FNAL with bad scope -- fails';\nrc := script_load('driver.qdl', cfg., params.);\nif[rc!='ok'][return(rc);];\n\ntokens. := null;\ntry[\n  tokens. := access(); // fails.\n]catch[\n  ⊨'access_denied' < error_message:'unknown error:' + error_message;\n];\nsay('FNAL test no scopes: ok');
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/local/fnal-1.qdl b/server-test/src/main/resources/flow-tests/local/fnal-1.qdl
--- a/server-test/src/main/resources/flow-tests/local/fnal-1.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/local/fnal-1.qdl	(date 1683029456680)
@@ -1,5 +1,5 @@
 #! /usr/bin/env -S qdl-run
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 
 cfg.'id'  := 'localhost:test/fnal';
Index: server-test/src/main/resources/flow-tests/local/no_config.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Tests the client with no configuration\n\n*/\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\n\ncfg.'id'  := 'localhost:test/no_cfg';\ncfg.'idp'  := 'ANY';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Test with no configuration -- most basic test. (Uses Derby)';\ncfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint\n\nrc := script_load('driver.qdl', cfg.);\nif[rc!='ok'][return(rc);];\n\ntokens. := clc#access();\n⊨ tokens.'access_token'.'lifetime' == 1009000 : 'wrong access token lifetime';\n⊨ tokens.'refresh_token'.'lifetime' == 950400000 : 'wrong refresh token lifetime';\n⊨ claims().'aud' == cfg.'id' : 'wrong audience';\nsay('Test no config: ok');
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/local/no_config.qdl b/server-test/src/main/resources/flow-tests/local/no_config.qdl
--- a/server-test/src/main/resources/flow-tests/local/no_config.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/local/no_config.qdl	(date 1683029457604)
@@ -4,7 +4,7 @@
    Tests the client with no configuration
 
 */
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 
 cfg.'id'  := 'localhost:test/no_cfg';
Index: server-test/src/main/resources/flow-tests/local/scitokens2.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Tests the client with scitokens configuration AND QDL claim sources\n   Client config 2022-11-09\n{\n\t\"tokens\": {\n\t\t\"access\": {\n\t\t\t\"audience\": \"https://localhost/fermilab\",\n\t\t\t\"lifetime\": 300000,\n\t\t\t\"qdl\": {\n\t\t\t\t\"load\": \"ui-test/process.qdl\",\n\t\t\t\t\"xmd\": {\n\t\t\t\t\t\"exec_phase\": [\n\t\t\t\t\t\t\"post_token\",\n\t\t\t\t\t\t\"post_refresh\",\n\t\t\t\t\t\t\"post_user_info\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\"templates\": [{\n\t\t\t\"aud\": \"https://localhost/fermilab\",\n\t\t\t\"paths\": [{\n\t\t\t\t\t\"op\": \"read\",\n\t\t\t\t\t\"path\": \"/home/${sub}\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"op\": \"x.y\",\n\t\t\t\t\t\"path\": \"/abc/def\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"op\": \"write\",\n\t\t\t\t\t\"path\": \"/data/${sub}/cluster\"\n\t\t\t\t}\n\t\t\t]\n\t\t}],\n\t\t\"type\": \"scitoken\"\n\t},\n\t\"refresh\": {\n\t\t\"audience\": \"https://localhost/test\",\n\t\t\"lifetime\": 900000,\n\t\t\"type\": \"refresh\"\n\t}\n}}\n\n*/\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\n\ncfg.'id'  := 'localhost:scitokens2'; // name of the configuration, not the id\ncfg.'idp'  := 'Github';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Test basic configuration for Scitokens, with scripting.';\ncfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint\nuser_id := 'http://cilogon.org/serverT/users/21340363'; // id from Github on test.cilogon.org\n\nparams.'authz' :=  {'scope': 'read: x.y: x.z write:'}; // initial request is query\nparams.'token' :=  {'scope': 'read:/foo read:/home/' + user_id  + ' x.y:/abc/def/pqr write:/data/' + user_id + '/cluster/node47'};\n\nexpected_token_scopes. :=  ['read:/home/' + user_id , 'x.y:/abc/def/pqr', 'write:/data/' + user_id + '/cluster/node47'];\nparams.'exchange' :=  {'scope': 'read:/home/'+user_id  + // read\n                                ' write:/home/'+user_id + // write -- wrong, not granted\n                                ' read:/public/lsst/' + user_id + // ok\n                                ' x.y:/abc/def/pqr' + // works since it add component to path\n                                ' x.y:/abc/defpqr'}; // not granted since the path is wrong\n\nexpected_exchange_scopes. := ['read:/home/' + user_id  , // read\n                             'write:/home/' + user_id,\n                             'x.y:/abc/def/pqr',  // works since it add component to path\n                             'x.y:/abc/defpqr',\n                             'x.y:/xyz/qrs'];\n\ndefine[test(tokens., expected_scopes., user_id)][\n    // Define the tests to run after access and refresh.\n    issuer := 'https://localhost:9443/oauth2';\n    at. := tokens.'access_token'.'jwt';\n    s. := tokenize(at.'scope', ' ');\n    rt. := tokens.'refresh_token'.'jwt';\n    ⊨ tokens.'access_token'.'lifetime' - 300000 < 2000 : 'wrong access token lifetime';\n    ⊨ at.'sub' ≡ user_id : 'wrong AT subject';\n    ⊨ at.'iss' ≡ issuer : 'wrong AT issuer';\n    ⊨ at.'aud' ≡ 'https://localhost/fermilab' : 'wrong AT audience';\n    ⊨ ¬is_defined(at.'cid') : 'Still getting cid claim in scitoken'; // regression test. No cid claim\n    ⊨ at.'ver' ≡ 'scitoken:2.0' : 'incorrect scitokens version claim';\n    ⊨ reduce(@∧, expected_scopes. ∈ s.) : 'incorrect AT scopes';\n    ⊨ rt.'aud' ≡ 'https://localhost/test' : 'wrong RT audience';\n    ⊨ tokens.'refresh_token'.'lifetime' - 900000 < 2000 : 'wrong refresh token lifetime';\n];\n\nrc := script_load('driver.qdl', cfg., params.);\nif[rc!='ok'][return(rc);];\n\ntokens. := clc#access();\ntest(tokens., expected_token_scopes., user_id);\nissued_at := claims().'iat';\ntokens. := refresh();\n⊨ issued_at <= claims().'iat' : 'ID token not updated';\ntest(tokens., expected_token_scopes., user_id);\n\nsay('Scitokens test: ok');
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/local/scitokens2.qdl b/server-test/src/main/resources/flow-tests/local/scitokens2.qdl
--- a/server-test/src/main/resources/flow-tests/local/scitokens2.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/local/scitokens2.qdl	(date 1683029457064)
@@ -44,7 +44,7 @@
 }}
 
 */
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 
 cfg.'id'  := 'localhost:scitokens2'; // name of the configuration, not the id
Index: server-test/src/main/resources/flow-tests/local/test-template.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Tests the client with handler configurations and templates,\n   but no QDL or other claim sources.\n   This is a pretty long and comprehensive test.\n   It also tests various types of downscoping and upscoping\n\n   Current client config (2022-11-09):\n  {\"tokens\": {\n   \"access\":  {\n    \"audience\": \"https://wlcg.cern.ch/jwt/v1/access\",\n    \"issuer\": \"https://access.cilogon.org\",\n    \"lifetime\": 750019,\n    \"templates\": [  {\n     \"aud\": \"https://wlcg.cern.ch/jwt/v1/access\",\n     \"paths\":    [\n          {\"op\": \"read\",\"path\": \"/home/${sub}\"},\n          {\"op\": \"read\",\"path\": \"/public/lsst/${sub}\"},\n          {\"op\": \"x.y\",\"path\": \"/abc/def\"},\n          {\"op\": \"x.z\"},\n          {\"op\": \"write\",\"path\": \"/data/cluster\"}\n     ]\n    }],\n    \"type\": \"wlcg\"\n   },\n   \"identity\":  {\n    \"lifetime\": 2400000,\n    \"type\": \"identity\"\n   },\n   \"refresh\":  {\n    \"audience\": \"https://wlcg.cern.ch/jwt/refresh\",\n    \"issuer\": \"https://refresh.cilogon.org\",\n    \"lifetime\": 3600000,\n    \"type\": \"default\"\n   }\n  }}\n\n\n*/\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\n\ncfg.'id'  := 'localhost:test/no_qdl'; //id\ncfg.'idp'  := 'Google -- use \"j g\" identity';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Test that a plain handler configuration (w/ templates, no qdl) works.';\ncfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint\nuser_id := 'http://cilogon.org/serverA/users/6849'; // for given IDP and identitu\nparams.'authz' :=  {'scope': 'read: x.y: x.z write:'}; // initial request is query\nparams.'token' :=  {'scope': 'read: x.y: x.z write:'}; // token exchange attempts to upscope.\nparams.'exchange' :=  {'scope': 'read:/home/'+user_id  + // read\n                                ' write:/home/'+user_id + // write -- wrong, not granted\n                                ' read:/public/lsst/' + user_id + // ok\n                                ' x.y:/abc/def/pqr' + // works since it add component to path\n                                ' x.y:/abc/defpqr'}; // not granted since the path is wrong\n\nrc := script_load('driver.qdl', cfg., params.);\nif[rc!='ok'][return(rc);];\n\ntokens. := clc#access();\nat. := tokens.'access_token'.'jwt';\nrt. := tokens.'refresh_token'.'jwt';\n\n// check scopes\ns. := tokenize(at.'scope', ' ');\n⊨ reduce(@∧, ['x.z', 'write:/data/cluster',\n               'read:/home/' + user_id,\n               'read:/public/lsst/' + user_id,\n               'x.y:/abc/def'] ∈ s.) : 'Wrong scopes in access token:' + to_string(s.);\n⊨ tokens.'access_token'.'lifetime' - 750000 ≤ 2000 : 'wrong access token lifetime';\n⊨ at.'iss' == 'https://access.cilogon.org' : 'wrong access token issuer';\n⊨ at.'aud' == 'https://wlcg.cern.ch/jwt/v1/access' : 'wrong access token audience';\n⊨ at.'sub' == user_id : 'wrong access token subject';\n⊨ at.'wlcg.ver' == '1.0' : 'wrong access token wlcg version';\n\n⊨ tokens.'refresh_token'.'lifetime' == 3600000 : 'wrong refresh token lifetime';\n⊨ rt.'iss' == 'https://refresh.cilogon.org' : 'wrong refresh token issuer';\n\n⊨ claims().'aud' == cfg.'id' : 'wrong audience';  // Audience is a little different than usual.\n⊨ claims().'sub' == user_id: 'wrong user id';\n\ntokens. := refresh();\nat. := tokens.'access_token'.'jwt';\nrt. := tokens.'refresh_token'.'jwt';\n⊨ 'x.z'== at.'scope' : 'Wrong scopes in access token. Expected only x.z and got ' + at.'scope';\n⊨ tokens.'access_token'.'lifetime' - 750000 ≤ 2000 : 'wrong access token lifetime'; // some skew may happen. Allow a couple of seconds.\n⊨ at.'iss' == 'https://access.cilogon.org' : 'wrong access token issuer';\n⊨ at.'aud' == 'https://wlcg.cern.ch/jwt/v1/access' : 'wrong access token audience';\n⊨ tokens.'refresh_token'.'lifetime' == 3600000 : 'wrong refresh token lifetime';\n\n// now to test the exchange\n\ntokens. := exchange();\nat. := tokens.'access_token'.'jwt';\ns. := tokenize(at.'scope', ' ');\n/*\n Exchange tests down-scoping (works for scopes that are uris and have paths)\n and up-scoping (fails).\n*/\n⊨ reduce(@∧, [ 'read:/home/' + user_id,\n               'read:/public/lsst/' + user_id,\n               'x.y:/abc/def/pqr'] ∈ s.) : 'Wrong scopes in access token';\n⊨ tokens.'access_token'.'lifetime' == 750000 : 'wrong access token lifetime';\n⊨ at.'iss' == 'https://access.cilogon.org' : 'wrong access token issuer';\n⊨ at.'aud' == 'https://wlcg.cern.ch/jwt/v1/access' : 'wrong access token audience';\n\ntokens. := exchange('-rt');\nrt. := tokens.'refresh_token'.'jwt';\n⊨ tokens.'refresh_token'.'lifetime' == 3600000 : 'wrong refresh token lifetime';\n\nsay('Test basic client configuration: ok');
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/local/test-template.qdl b/server-test/src/main/resources/flow-tests/local/test-template.qdl
--- a/server-test/src/main/resources/flow-tests/local/test-template.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/local/test-template.qdl	(date 1683029457124)
@@ -38,7 +38,7 @@
 
 
 */
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 
 cfg.'id'  := 'localhost:test/no_qdl'; //id
Index: oa4mp-server-oauth2/buildNumber.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#maven.buildNumber.plugin properties file\n#Thu Apr 27 12:18:59 CDT 2023\nbuildNumber\\\\d*=9327\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/oa4mp-server-oauth2/buildNumber.properties b/oa4mp-server-oauth2/buildNumber.properties
--- a/oa4mp-server-oauth2/buildNumber.properties	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/oa4mp-server-oauth2/buildNumber.properties	(date 1683153468820)
@@ -1,3 +1,3 @@
 #maven.buildNumber.plugin properties file
-#Thu Apr 27 12:18:59 CDT 2023
-buildNumber\\d*=9327
+#Wed May 03 17:37:48 CDT 2023
+buildNumber\\d*=9345
Index: server-admin/src/main/resources/new-form/minimal-file.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n \"config\":  [\n  \"Configuration that contains new scripting notation 9/24/2018\",\n  \"This uses a file-backed store for users. It is stored in /home/ncsa/dev/csd/config/backup/354c-file.xml\",\n  \"This may be used in testing.\"\n ],\n \"claims\":  {\n  \"sourceConfig\": [{\"default\":   {\n   \"failOnError\": \"true\",\n   \"enabled\": true,\n   \"filePath\": \"/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/test-claims.json\",\n   \"id\": \"ed63b62d1a78\"\n  }}],\n  \"preProcessing\": {\"script\":   [\n   \"set_claim_source('file-system-default','ed63b62d1a78');\"\n  ]}\n },\n \"isSaved\": true\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-admin/src/main/resources/new-form/minimal-file.json b/server-admin/src/main/resources/new-form/minimal-file.json
--- a/server-admin/src/main/resources/new-form/minimal-file.json	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-admin/src/main/resources/new-form/minimal-file.json	(date 1683029416187)
@@ -8,7 +8,7 @@
   "sourceConfig": [{"default":   {
    "failOnError": "true",
    "enabled": true,
-   "filePath": "/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/test-claims.json",
+   "filePath": "/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/test-claims.json",
    "id": "ed63b62d1a78"
   }}],
   "preProcessing": {"script":   [
Index: server-test/buildNumber.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#maven.buildNumber.plugin properties file\n#Thu Apr 27 12:18:59 CDT 2023\nbuildNumber\\\\d*=8353\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/server-test/buildNumber.properties b/server-test/buildNumber.properties
--- a/server-test/buildNumber.properties	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/buildNumber.properties	(date 1683153467584)
@@ -1,3 +1,3 @@
 #maven.buildNumber.plugin properties file
-#Thu Apr 27 12:18:59 CDT 2023
-buildNumber\\d*=8353
+#Wed May 03 17:37:47 CDT 2023
+buildNumber\\d*=8371
Index: server-test/src/main/resources/flow-tests/cm-tests/anon-basic.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n/*\n say('args=' + args());\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests/cm-tests/';\nscript_path(path ~ script_path());\n*/\nscript_load('anon-init.qdl');\n\npayload. := from_json(file_read(ini.'payloads' + 'create.json'));\nresp. := http#post(payload.);\n⊨ resp.'status'.'code' == 201 : 'incorrect returned status of ' + resp.'status'.'code';\n⊨ reduce(@∧, resp.'content'.'scope' ∈ payload.'scope') : 'incorrect scopes, got ' + resp.'content'.'scope';\n\nclient_id := resp.'content'.'client_id';\ntry[\n  r. := http#get({'client_id':client_id});\n  ⊨ false : 'was able to get anonymous client';\n]catch[];\n\ntry[\n  r. := http#post(payload.);\n  ⊨ false : 'was able to delete anonymous client';\n]catch[];\n\n\ntry[\n  r. := http#delete({'client_id':client_id});\n  ⊨ false : 'was able to delete anonymous client';\n]catch[];\n\ntry[\n  script_load('anon-cleanup.qdl', client_id);\n]catch[\n  say('there was a problem deleting the client with id ' + client_id);\n];\nsay('ok: Anonymous basic client test');
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/cm-tests/anon-basic.qdl b/server-test/src/main/resources/flow-tests/cm-tests/anon-basic.qdl
--- a/server-test/src/main/resources/flow-tests/cm-tests/anon-basic.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/cm-tests/anon-basic.qdl	(date 1683029456292)
@@ -1,7 +1,7 @@
 #! /usr/bin/env -S qdl-run
 /*
  say('args=' + args());
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests/cm-tests/';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests/cm-tests/';
 script_path(path ~ script_path());
 */
 script_load('anon-init.qdl');
Index: server-test/src/main/resources/flow-tests/cm-tests/anon-cfg.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n/*\n  This is an anonyumous attempt to set several things that are off limits, such\n  as a cfg property with the letter qdl in it, or whether to change the server policies\n  for skipping server scripts.\n*/\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests/cm-tests/';\nscript_path(path ~ script_path());\nscript_load('anon-init.qdl');\n\npayload. := from_json(file_read(ini.'payloads' + 'create-cfg.json'));\ntry[\n  resp. := http#post(payload.);\n  ⊨ false : 'was able to create an anonymous client with a qdl cfg';\n]catch[];\n\nsay('ok: Anonymous client with cfg property (which is rejected w/ error)');
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/cm-tests/anon-cfg.qdl b/server-test/src/main/resources/flow-tests/cm-tests/anon-cfg.qdl
--- a/server-test/src/main/resources/flow-tests/cm-tests/anon-cfg.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/cm-tests/anon-cfg.qdl	(date 1683029455532)
@@ -4,7 +4,7 @@
   as a cfg property with the letter qdl in it, or whether to change the server policies
   for skipping server scripts.
 */
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests/cm-tests/';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests/cm-tests/';
 script_path(path ~ script_path());
 script_load('anon-init.qdl');
 
Index: server-test/src/main/resources/flow-tests/prod/ligo-robot.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/prod/ligo-robot.qdl b/server-test/src/main/resources/flow-tests/prod/ligo-robot.qdl
new file mode 100755
--- /dev/null	(date 1683059316325)
+++ b/server-test/src/main/resources/flow-tests/prod/ligo-robot.qdl	(date 1683059316325)
@@ -0,0 +1,94 @@
+#! /usr/bin/env -S qdl-run
+
+/*
+   Tests the client with LIGO configuration but passes in a robot scope
+   created: 2023-03-15T20:18:26.265Z
+   Client config (on test.cilogon.org)
+
+{"tokens": {"access": {
+    "qdl":  {
+     "args": ["igwn"],
+     "load": "ligo/vo4/at.qdl",
+     "xmd": {"exec_phase":   [
+      "post_token",
+      "post_exchange",
+      "post_refresh"
+     ]}
+    },
+    "type": "sci_token"
+   }}}
+
+
+*/
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests/';
+if[path∉script_path()][script_path(path ~ script_path());];
+
+cfg.'id'  := 'prod:jeff/ligo';
+cfg.'idp'  := 'LIGO';
+cfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';
+cfg.'description' :=  'Robot test for LIGO';
+cfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint
+params.'authz' :=  {'scope': 'scitokentesting.read scitokentesting.write igwn.robot:ligorobottesting'}; // initial request
+
+rc := script_load('driver.qdl', cfg., params.);
+if[rc!='ok'][return(rc);];
+
+tokens. := clc#access();
+
+at. := tokens.'access_token'.'jwt';
+rt. := tokens.'refresh_token';
+idt.:= claims();
+say('idt:\n'+print(idt.));
+say('at:\n'+print(at.));
+say('rt.:\n'+print(rt.));
+⊨ idt.'sub' ≡ 'ligorobottesting@ligo.org' : 'wrong ID token subject';
+⊨ idt.'iss' ≡ 'https://cilogon.org/igwn' : 'wrong issuer'; // Check it's in VO
+⊨ idt.'aud' ≡ (cfg.'id') : 'wrong audience, got \'' + idt.'aud' + '\'';
+⊨ idt.'uid' ≡ 'ligorobottesting' : 'wrong uid'; // uid must not have trailing domain or LIGO's credmon will lose track
+⊨ idt.'eppn' ≡ 'jeffrey.gaynor@ligo.org' : 'wrong EPPN'; // eppn should be the same as the person requesting the robot
+
+⊨ at.'sub' ≡ 'ligorobottesting@ligo.org' : 'wrong AT subject';
+⊨ at.'aud' ≡ 'ANY' : 'wrong AT audience';
+⊨ 'scitokentesting.write'< at.'scope' &&  'scitokentesting.read' < at.'scope' : 'wrong AT scope';
+⊨ at.'iss' ≡ 'https://cilogon.org/igwn' : 'wrong AT issuer';
+
+say('LIGO robot test ok');
+/*
+
+ JWT access token:{
+ "sub": "ligorobottesting@ligo.org",
+ "aud": "ANY",
+ "ver": "scitoken:2.0",
+ "nbf": 1678913696,
+ "scope": "scitokentesting.write scitokentesting.read",
+ "iss": "https://test.cilogon.org/ligo",
+ "exp": 1678914601,
+ "iat": 1678913701,
+ "jti": "https://test.cilogon.org/oauth2/6c6b09e0e1213eb96a8c12cc54edbcf9?type=accessToken&ts=1678913708335&version=v2.0&lifetime=900000"
+}
+
+
+{
+  "sub": "ligorobottesting@ligo.org",
+  "idp_name": "LIGO Scientific Collaboration",
+  "eppn": "jeffrey.gaynor@ligo.org",
+  "ou": "People",
+  "cert_subject_dn": "/DC=org/DC=cilogon/C=US/O=LIGO/CN=Jeffrey Gaynor jeffrey.gaynor@ligo.org",
+  "iss": "https://test.cilogon.org/ligo",
+  "given_name": "Jeffrey",
+  "nonce": "lZNE2Uf9b5w32Y1XC9HXjOs1uFBEBAEZMtViFgSSDHw",
+  "acr": "https://refeds.org/profile/sfa",
+  "aud": "test:jeff/ligo",
+  "uid": "ligorobottesting",
+  "pairwise_id": "DLXYPSPLINUMVKFUYBK5UAV7UO5NWKGG@ligo.org",
+  "idp": "https://login.ligo.org/idp/shibboleth",
+  "auth_time": 1678911294,
+  "name": "Jeffrey Gaynor",
+  "exp": 1678914601,
+  "family_name": "Gaynor",
+  "iat": 1678913701,
+  "email": "jeffrey.gaynor@ligo.org",
+  "jti": "https://test.cilogon.org/oauth2/idToken/13b5ef7cf2a74e16dc45fae8b20fd31/1678913701435"
+}
+
+*/
\ No newline at end of file
Index: server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/claims/ClaimsSourceGetter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.uiuc.ncsa.myproxy.oa4mp.qdl.claims;\n\nimport edu.uiuc.ncsa.myproxy.oa4mp.oauth2.storage.transactions.OA2ServiceTransaction;\nimport edu.uiuc.ncsa.myproxy.oa4mp.oauth2.claims.*;\nimport edu.uiuc.ncsa.myproxy.oa4mp.qdl.scripting.OA2State;\nimport edu.uiuc.ncsa.qdl.evaluate.IOEvaluator;\nimport edu.uiuc.ncsa.qdl.expressions.ConstantNode;\nimport edu.uiuc.ncsa.qdl.expressions.Polyad;\nimport edu.uiuc.ncsa.qdl.extensions.QDLFunction;\nimport edu.uiuc.ncsa.qdl.state.State;\nimport edu.uiuc.ncsa.qdl.variables.Constant;\nimport edu.uiuc.ncsa.qdl.variables.QDLList;\nimport edu.uiuc.ncsa.qdl.variables.QDLStem;\nimport edu.uiuc.ncsa.security.core.Identifier;\nimport edu.uiuc.ncsa.security.core.util.DebugUtil;\nimport net.sf.json.JSONArray;\nimport net.sf.json.JSONObject;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static edu.uiuc.ncsa.qdl.variables.QDLStem.STEM_INDEX_MARKER;\n\n/**\n * QDLFunction to convert claims to a stem. For use in the OA4MP QDL module.\n * <p>Created by Jeff Gaynor<br>\n * on 2/10/20 at  10:18 AM\n */\npublic class ClaimsSourceGetter implements QDLFunction, CSConstants {\n    public static final String GET_CLAIMS_NAME = \"get_claims\";\n\n    @Override\n    public String getName() {\n        return GET_CLAIMS_NAME;\n    }\n\n    @Override\n    public int[] getArgCount() {\n        return new int[]{2};\n    }\n\n    ConfigtoCS configtoCS = null;\n\n    protected ConfigtoCS getConfigToCS() {\n        if (configtoCS == null) {\n            configtoCS = new ConfigtoCS();\n        }\n        return configtoCS;\n    }\n\n    @Override\n    public Object evaluate(Object[] objects, State state) {\n        if (objects.length < 2) {\n            throw new IllegalArgumentException(\"Error: \" + getName() + \" requires at least two arguments\");\n        }\n        if (!(objects[0] instanceof QDLStem)) {\n            throw new IllegalArgumentException(\"Error: \" + getName() + \" requires a stem variable as its first argument\");\n        }\n\n        QDLStem arg = (QDLStem) objects[0];\n        if (objects[1] == null || !(objects[1] instanceof String)) {\n            throw new IllegalArgumentException(\"Error: \" + getName() + \" requires the name of the user as its second argument\");\n        }\n        String username = (String) objects[1];\n        if (!arg.containsKey(CS_DEFAULT_TYPE)) {\n            throw new IllegalStateException(\"Error: \" + getName() + \" must have the type of claim source\");\n        }\n        QDLStem headers = null;\n        if (arg.getString(CS_DEFAULT_TYPE).equals(CS_TYPE_HEADERS)) {\n            headers = (QDLStem) arg.get(\"headers.\");\n        }\n        switch (arg.getString(CS_DEFAULT_TYPE)) {\n            case CS_TYPE_CODE:\n                return doCode(arg, username, headers, state);\n            case CS_TYPE_FILE:\n                return doFS(arg, username, state);\n            case CS_TYPE_LDAP:\n                return doLDAP(arg, username, state);\n            case CS_TYPE_HEADERS:\n                return doHeaders(arg, username, headers, state);\n            case CS_TYPE_NCSA:\n                return doNCSA(arg, username, state);\n        }\n        return null;\n    }\n\n    protected QDLStem doCode(QDLStem arg, String username, QDLStem headers, State state) {\n        OA2State oa2State = null;\n        if (state instanceof OA2State) {\n            oa2State = (OA2State) state;\n        }\n        BasicClaimsSourceImpl basicClaimsSource = (BasicClaimsSourceImpl) getConfigToCS().convert(arg, oa2State == null ? null : oa2State.getOa2se());\n        OA2ServiceTransaction t = new OA2ServiceTransaction((Identifier) null);\n        t.setUsername(username);\n        JSONObject claims = new JSONObject();\n        TestHTTPRequest req = new TestHTTPRequest(headers);\n        claims = basicClaimsSource.process(claims, req, t);\n        QDLStem output = new QDLStem();\n        output.fromJSON(claims);\n        return output;\n\n    }\n\n    protected QDLStem doNCSA(QDLStem arg, String username, State state) {\n        OA2State oa2State = null;\n        if (state instanceof OA2State) {\n            oa2State = (OA2State) state;\n        }\n        DebugUtil.setIsEnabled(true);\n        DebugUtil.setDebugLevel(DebugUtil.DEBUG_LEVEL_TRACE);\n        NCSALDAPClaimSource ncsaldapClaimSource = (NCSALDAPClaimSource) getConfigToCS().convert(arg, (oa2State == null ? null : oa2State.getOa2se()));\n        OA2ServiceTransaction t = new OA2ServiceTransaction((Identifier) null);\n        t.setUsername(username);\n        JSONObject protoClaims = new JSONObject();\n        protoClaims.put(NCSALDAPClaimSource.DEFAULT_SEACH_NAME, username);\n\n        JSONObject j = ncsaldapClaimSource.process(protoClaims, t);\n        QDLStem output = new QDLStem();\n        output.fromJSON(j);\n        return output;\n    }\n\n    public QDLStem doHeaders(QDLStem arg, String username, QDLStem headers, State state) {\n        OA2State oa2State = null;\n        if (state instanceof OA2State) {\n            oa2State = (OA2State) state;\n        }\n        HTTPHeaderClaimsSource httpHeaderClaimsSource = (HTTPHeaderClaimsSource) getConfigToCS().convert(arg, oa2State == null ? null : oa2State.getOa2se());\n\n        OA2ServiceTransaction t = new OA2ServiceTransaction((Identifier) null);\n        t.setUsername(username);\n        JSONObject protoClaims = new JSONObject();\n\n        TestHTTPRequest req = new TestHTTPRequest(headers);\n        JSONObject j = httpHeaderClaimsSource.process(protoClaims, req, t);\n        QDLStem output = new QDLStem();\n        output.fromJSON(j);\n        return output;\n\n    }\n\n    /**\n     * This does the get and makes a dummy transaction with the right name. This means a claim name\n     * of uid should always be used.\n     *\n     * @param arg\n     * @param username\n     * @param state\n     * @return\n     */\n    private QDLStem doLDAP(QDLStem arg, String username, State state) {\n        OA2State oa2State = null;\n        if (state instanceof OA2State) {\n            oa2State = (OA2State) state;\n        }\n        LDAPClaimsSource ldapClaimsSource = (LDAPClaimsSource) getConfigToCS().convert(arg, oa2State == null ? null : oa2State.getOa2se());\n        OA2ServiceTransaction t = new OA2ServiceTransaction((Identifier) null);\n        t.setUsername(username);\n        JSONObject protoClaims = new JSONObject();\n        protoClaims.put(arg.getString(CS_LDAP_SEARCH_NAME), username);\n        JSONObject j = ldapClaimsSource.process(protoClaims, t);\n        QDLStem output = claimsToStem(j);\n        // CIL-1426 -- we do not want to return the parameter we created,\n        // HOWEVER there is nothing at all stopping them from searching for this parameter and getting it back\n        // THEREFORE, only return it if it changed.\n        // This way, if there are no hits, the user gets an empty claim list, showing nothing was found,\n        // rather than a false positive that there was a single attribute (actually the one we passed in)\n        // in the claim source.\n        if (output.containsKey(arg.getString(CS_LDAP_SEARCH_NAME)) && output.getString(arg.getString(CS_LDAP_SEARCH_NAME)).equals(username)) {\n            output.remove(arg.getString(CS_LDAP_SEARCH_NAME));\n        }\n        return output;\n    }\n\n    /**\n     * It is a bit hard to convert from stems to claims, so this does it.\n     *\n     * @param claims\n     * @return\n     */\n    protected QDLStem claimsToStem(JSONObject claims) {\n        QDLStem out = new QDLStem();\n        for (Object k : claims.keySet()) {\n            String key = k.toString();\n            Object obj = claims.get(k);\n            if (obj instanceof JSONObject) {\n                out.put(k + STEM_INDEX_MARKER, claimsToStem((JSONObject) obj));\n            } else {\n                if (obj instanceof JSONArray) {\n                    JSONArray array = (JSONArray) obj;\n                    // turn in to stemList\n                    QDLList sl = new QDLList();\n                    for (int i = 0; i < array.size(); i++) {\n                        Object obj1 = array.get(i);\n                        QDLStem out1 = null;\n                        if (obj1 instanceof JSONObject) {\n                            out1 = claimsToStem((JSONObject) obj1);\n                            sl.append(out1);\n                        } else {\n                            sl.append(array.get(i));\n                        }\n                    }\n                    QDLStem st1 = new QDLStem();\n                    st1.setQDLList(sl);\n                    out.put(key + STEM_INDEX_MARKER, st1);\n                } else {\n                    out.put(key, obj.toString());\n                }\n            }\n        }\n        return out;\n    }\n\n    /*\nvfs_cfg.type :='pass_through';\nvfs_cfg.scheme := 'vfs2';\nvfs_cfg.mount_point := '/test2';\nvfs_cfg.access := 'rw';\nvfs_cfg.root_dir := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-admin-oauth2/src/main/resources/qdl/weitzel';\nvfs_mount(vfs_cfg.);\ncfg. := new_template('file')\ncfg.file_path := 'vfs2#/test2/test-claims.json'\nget_claims(cfg., 'dweitzel2@unl.edu')\n     */\n\n    /**\n     * Note that this needs to send a transaction to the {@link FSClaimSource},\n     * so it creates one and sets the user name. Practically then the\n     * {@link #CS_FILE_CLAIM_KEY} then is ignored, since the function accepts\n     * the username directly.\n     *\n     * @param arg\n     * @param username\n     * @param state\n     * @return\n     */\n    protected QDLStem doFS(QDLStem arg, String username, State state) {\n        OA2State oa2State = null;\n        if (state instanceof OA2State) {\n            oa2State = (OA2State) state;\n        }\n        String rawJSON = null;\n        // resolve files against VFS's so scripts have access to them in server mode.\n        if (arg.containsKey(CS_FILE_FILE_PATH)) {\n            Polyad polyad = new Polyad(IOEvaluator.READ_FILE);\n            polyad.addArgument(new ConstantNode(arg.getString(CS_FILE_FILE_PATH), Constant.STRING_TYPE));\n            state.getMetaEvaluator().evaluate(polyad, state);\n            rawJSON = polyad.getResult().toString();\n        } else {\n            if (arg.containsKey(CS_FILE_STEM_CLAIMS)) {\n                Object ooo = arg.get(CS_FILE_STEM_CLAIMS);\n                if (!(ooo instanceof QDLStem)) {\n                    throw new IllegalArgumentException(\"the \" + CS_FILE_STEM_CLAIMS + \" argument must be a stem of claims\");\n                }\n                rawJSON = ((QDLStem) ooo).toJSON().toString();\n            }\n        }\n        if (rawJSON == null) {\n            throw new IllegalStateException(\"neither a path to the claims nor a stem of claims has been given\");\n        }\n        FSClaimSource fsClaimSource = (FSClaimSource) getConfigToCS().convert(arg, oa2State, oa2State == null ? null : oa2State.getOa2se());\n        fsClaimSource.setRawJSON(rawJSON);\n        OA2ServiceTransaction t = new OA2ServiceTransaction((Identifier) null);\n        t.setUsername(username);\n        JSONObject claims = fsClaimSource.process(new JSONObject(), t);\n        QDLStem output = new QDLStem();\n        output.fromJSON(claims);\n        return output;\n\n    }\n\n\n    protected static void testFS() {\n        QDLStem mystem = new QDLStem();\n        mystem.put(CS_DEFAULT_TYPE, CS_TYPE_FILE);\n        mystem.put(CS_FILE_FILE_PATH, \"/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/test-claims.json\");\n        CreateSourceConfig csc = new CreateSourceConfig();\n        QDLStem out = (QDLStem) csc.evaluate(new Object[]{mystem}, null);\n        System.out.println(out.toJSON().toString(2));\n\n\n        ClaimsSourceGetter cst = new ClaimsSourceGetter();\n        QDLStem claims = (QDLStem) cst.evaluate(new Object[]{mystem, \"jeff\"}, null);\n        System.out.println(\"File claim source configuration:\");\n        System.out.println(claims.toJSON().toString(2));\n    }\n\n    protected static void testLDAP2() {\n        QDLStem mystem = new QDLStem();\n\n        mystem.put(CS_DEFAULT_TYPE, CS_TYPE_LDAP);\n        mystem.put(CS_LDAP_SERVER_ADDRESS, \"ldap1.ncsa.illinois.edu,ldap2.ncsa.illinois.edu\");\n        mystem.put(CS_LDAP_SEARCH_FILTER_ATTRIBUTE, \"uid\");\n        mystem.put(CS_LDAP_SEARCH_BASE, \"ou=People,dc=ncsa,dc=illinois,dc=edu\");\n        mystem.put(CS_LDAP_SEARCH_NAME, \"uid\");\n        mystem.put(CS_LDAP_AUTHZ_TYPE, \"none\");\n        CreateSourceConfig createSourceConfig = new CreateSourceConfig();\n        QDLStem cfg = (QDLStem) createSourceConfig.evaluate(new Object[]{mystem}, null);\n\n        ClaimsSourceGetter cst = new ClaimsSourceGetter();\n        QDLStem claims = (QDLStem) cst.evaluate(new Object[]{cfg, \"jgaynor\"}, null);\n        System.out.println(claims.toJSON().toString(2));\n\n    }\n\n    protected static void testNCSA() {\n        CreateSourceConfig csc = new CreateSourceConfig();\n        QDLStem cfg = new QDLStem();\n\n        csc.doNCSA(new QDLStem(), cfg); // populates the cfg\n        System.out.println(\"NCSA default config:\" + cfg.toString(1));\n        ClaimsSourceGetter cst = new ClaimsSourceGetter();\n        QDLStem claims = (QDLStem) cst.evaluate(new Object[]{cfg, \"jgaynor\"}, null);\n        System.out.println(claims.toString(2));\n\n    }\n\n    protected static void testLDAP() {\n        QDLStem mystem = new QDLStem();\n        mystem.put(CS_DEFAULT_TYPE, CS_TYPE_LDAP);\n        mystem.put(CS_LDAP_SERVER_ADDRESS, \"ldap4.ncsa.illinois.edu,ldap2.ncsa.illinois.edu,ldap1.ncsa.illinois.edu\");\n        mystem.put(CS_LDAP_AUTHZ_TYPE, \"none\");\n        mystem.put(CS_LDAP_SEARCH_NAME, \"uid\");\n        mystem.put(CS_DEFAULT_IS_ENABLED, Boolean.TRUE);\n        mystem.put(CS_LDAP_SEARCH_FILTER_ATTRIBUTE, \"uid\");\n        mystem.put(CS_LDAP_SEARCH_BASE, \"ou=People,dc=ncsa,dc=illinois,dc=edu\");\n\n        ArrayList<Object> searchAttr = new ArrayList<>();\n        searchAttr.add(\"mail\");\n        searchAttr.add(\"uid\");\n        searchAttr.add(\"uidNumber\");\n        searchAttr.add(\"cn\");\n        searchAttr.add(\"memberOf\");\n        QDLStem sa = new QDLStem();\n        sa.addList(searchAttr);\n        QDLStem groupNames = new QDLStem();\n\n        groupNames.put(\"0\", \"memberOf\");\n        mystem.put(CS_LDAP_SEARCH_ATTRIBUTES, sa);\n        mystem.put(CS_LDAP_GROUP_NAMES, groupNames);\n        System.out.println(\"\\n-----\\nldap cfg:\\n-----\\n\" + mystem.toString(1));\n        ClaimsSourceGetter cst = new ClaimsSourceGetter();\n        QDLStem claims = (QDLStem) cst.evaluate(new Object[]{mystem, \"jgaynor\"}, null);\n        System.out.println(claims.toString(2));\n\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Testing File System claims\");\n        testFS();\n        System.out.println(\"Testing LDAP claims\");\n        testLDAP();\n        System.out.println(\"Testing NCSA claims\");\n        testNCSA();\n\n    }\n\n    @Override\n    public List<String> getDocumentation(int argCount) {\n        ArrayList<String> docs = new ArrayList<>();\n        docs.add(getName() + \"(config., user_name) -- test a given claims configuration, returning a stem of claims\");\n        docs.add(\"Note that this is dependent on several factors, e.g. if you are testing LDAP, you may need to be on a VPN\");\n        return docs;\n    }\n\n    // Next is a functional configuration, old style, so we have a reference for debugging.\n    static String rawConfig = \" {\\n\" +\n            \"        \\\"ldap\\\": {\\n\" +\n            \"          \\\"id\\\": \\\"ncsa-default\\\",\\n\" +\n            \"          \\\"name\\\": \\\"ncsa-default\\\",\\n\" +\n            \"          \\\"address\\\": \\\"ldap1.ncsa.illinois.edu,ldap2.ncsa.illinois.edu\\\",\\n\" +\n            \"          \\\"port\\\": 636,\\n\" +\n            \"          \\\"enabled\\\": true,\\n\" +\n            \"          \\\"authorizationType\\\": \\\"none\\\",\\n\" +\n            \"          \\\"failOnError\\\": false,\\n\" +\n            \"          \\\"notifyOnFail\\\": false,\\n\" +\n            \"          \\\"searchAttributes\\\": [\\n\" +\n            \"            {\\n\" +\n            \"              \\\"name\\\": \\\"mail\\\",\\n\" +\n            \"              \\\"returnAsList\\\": false,\\n\" +\n            \"              \\\"returnName\\\": \\\"email\\\"\\n\" +\n            \"            },\\n\" +\n            \"            {\\n\" +\n            \"              \\\"name\\\": \\\"cn\\\",\\n\" +\n            \"              \\\"returnAsList\\\": false,\\n\" +\n            \"              \\\"returnName\\\": \\\"name\\\"\\n\" +\n            \"            },\\n\" +\n            \"            {\\n\" +\n            \"              \\\"name\\\": \\\"uidNumber\\\",\\n\" +\n            \"              \\\"returnAsList\\\": false,\\n\" +\n            \"              \\\"returnName\\\": \\\"uidNumber\\\"\\n\" +\n            \"            },\\n\" +\n            \"            {\\n\" +\n            \"              \\\"name\\\": \\\"uid\\\",\\n\" +\n            \"              \\\"returnAsList\\\": false,\\n\" +\n            \"              \\\"returnName\\\": \\\"uid\\\"\\n\" +\n            \"            },\\n\" +\n            \"            {\\n\" +\n            \"              \\\"name\\\": \\\"memberOf\\\",\\n\" +\n            \"              \\\"IsInGroup\\\": true,\\n\" +\n            \"              \\\"returnAsList\\\": false,\\n\" +\n            \"              \\\"returnName\\\": \\\"isMemberOf\\\"\\n\" +\n            \"            }\\n\" +\n            \"          ],\\n\" +\n            \"          \\\"searchBase\\\": \\\"ou=People,dc=ncsa,dc=illinois,dc=edu\\\",\\n\" +\n            \"          \\\"searchName\\\": \\\"uid\\\",\\n\" +\n            \"          \\\"searchFilterAttribute\\\": \\\"uid\\\",\\n\" +\n            \"          \\\"contextName\\\": \\\"\\\",\\n\" +\n            \"          \\\"ssl\\\": {\\n\" +\n            \"            \\\"keystore\\\": {},\\n\" +\n            \"            \\\"tlsVersion\\\": \\\"TLS\\\",\\n\" +\n            \"            \\\"useJavaTrustStore\\\": true,\\n\" +\n            //\"            \\\"password\\\": \\\"changeit\\\",\\n\" +\n            //\"            \\\"type\\\": \\\"jks\\\"\\n\" +\n            \"          }\\n\" +\n            \"        }\\n\" +\n            \"      }\";\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/claims/ClaimsSourceGetter.java b/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/claims/ClaimsSourceGetter.java
--- a/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/claims/ClaimsSourceGetter.java	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/claims/ClaimsSourceGetter.java	(date 1683029416387)
@@ -273,7 +273,7 @@
     protected static void testFS() {
         QDLStem mystem = new QDLStem();
         mystem.put(CS_DEFAULT_TYPE, CS_TYPE_FILE);
-        mystem.put(CS_FILE_FILE_PATH, "/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/test-claims.json");
+        mystem.put(CS_FILE_FILE_PATH, "/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/test-claims.json");
         CreateSourceConfig csc = new CreateSourceConfig();
         QDLStem out = (QDLStem) csc.evaluate(new Object[]{mystem}, null);
         System.out.println(out.toJSON().toString(2));
Index: server-test/src/main/resources/flow-tests/local/test_qdl.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Tests running a sequence of QDL scripts on the server.\n   Note that this also tests extended attribute support, which is\n   enabled in the CLI (using the ea_support command). This should return\n   a string of two values that can be parsed. \n*/\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\n\ncfg.'id'  := 'localhost:test/qdl';\ncfg.'idp'  := 'ANY';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Test chained QDL scripts in a single handler.';\ncfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint\nparams.'a' := {'oa4mp:/tokens/access/lifetime':1000000,'oa4mp:/roles':'admin,all-user'};\nrc := script_load('driver.qdl', cfg., params.);\nif[rc!='ok'][return(rc);];\n\ntokens. := clc#access();\nclaims. := claims();\n\n⊨ tokens.'access_token'.'lifetime' ≡ 900000 : 'wrong access token lifetime';\n⊨ tokens.'refresh_token'.'lifetime' ≡ 1000000 : 'wrong refresh token lifetime';\n⊨ claims.'seq0' ≡ 636 : 'wrong seq 0 value';\n⊨ claims.'roles'.0 ≡ 'admin,all-user' : 'wrong extended attribute value';\n⊨ claims.'seq0_phase' ≡ 'post_token' : 'wrong seq0_phase value';\n⊨ claims.'seq1' ≡ 'is_member_of' : 'wrong seq 1 value';\n⊨ claims.'seq2' ≡ 'seq 2 passed post_token' : 'wrong seq 2 value';\n\nold_claims. := claims.;\ntokens. := refresh();\nclaims. := claims();\n⊨ tokens.'access_token'.'lifetime' ≡ 900000 : 'wrong access token lifetime';\n⊨ tokens.'refresh_token'.'lifetime' ≡ 1000000 : 'wrong refresh token lifetime';\n⊨ claims.'seq0' ≡ 636 : 'wrong seq 0 value';\n⊨ claims.'seq0_phase' ≡ 'post_refresh' : 'wrong seq0_phase value';\n⊨ claims.'seq1' ≡ 'is_member_of' : 'wrong seq 1 value';\n⊨ claims.'seq2' ≡ 'seq 2 passed post_refresh' : 'wrong seq 2 value';\n\n// No exchange at this point since that does nothing to the claims.\nsay('Test multiple QDL scripts: ok');
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/local/test_qdl.qdl b/server-test/src/main/resources/flow-tests/local/test_qdl.qdl
--- a/server-test/src/main/resources/flow-tests/local/test_qdl.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/local/test_qdl.qdl	(date 1683029416307)
@@ -6,7 +6,7 @@
    enabled in the CLI (using the ea_support command). This should return
    a string of two values that can be parsed. 
 */
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 
 cfg.'id'  := 'localhost:test/qdl';
Index: server-test/src/main/resources/flow-tests/prod/ligo.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/prod/ligo.qdl b/server-test/src/main/resources/flow-tests/prod/ligo.qdl
new file mode 100755
--- /dev/null	(date 1683059919933)
+++ b/server-test/src/main/resources/flow-tests/prod/ligo.qdl	(date 1683059919933)
@@ -0,0 +1,106 @@
+#! /usr/bin/env -S qdl-run
+
+/*
+   Tests the client with LIGO configuration
+   created: 2023-03-15T20:18:26.265Z
+   Client config (on test.cilogon.org)
+
+{"tokens": {"access": {
+    "qdl":  {
+     "args": ["igwn"],
+     "load": "ligo/vo4/at.qdl",
+     "xmd": {"exec_phase":   [
+      "post_token",
+      "post_exchange",
+      "post_refresh"
+     ]}
+    },
+    "type": "sci_token"
+   }}}
+
+
+*/
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests/';
+if[path∉script_path()][script_path(path ~ script_path());];
+say(script_path());
+cfg.'id'  := 'prod:jeff/ligo';
+cfg.'idp'  := 'LIGO';
+cfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';
+cfg.'description' :=  'Test basic configuration for LIGO';
+cfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint
+params.'authz' :=  {'scope': 'read:/frames'}; // initial request
+params.'token' :=  {'scope': 'read:/shared read:/staging', 'audience':'ALL'};
+params.'exchange' :=  {'scope': 'read:/frames'};
+
+rc := script_load('driver.qdl', cfg., params.);
+if[rc!='ok'][return(rc);];
+
+tokens. := clc#access();
+at. := tokens.'access_token'.'jwt';
+rt. := tokens.'refresh_token';
+idt.:=claims();
+say('idt:\n'+print(idt.));
+say('at:\n'+print(at.));
+say('rt.:\n'+print(rt.));
+⊨ idt.'sub' ≡ 'jeffrey.gaynor@ligo.org' : 'wrong ID token subject';
+⊨ idt.'iss' ≡ 'https://cilogon.org/igwn' : 'wrong issuer, got \'' + (idt.'iss') + '\''; // Check it's in VO
+⊨ idt.'aud' ≡ 'prod:jeff/ligo' : 'wrong audience';
+⊨ idt.'uid' ≡ 'jeffrey.gaynor' : 'incorrect user'; // uid must not have trailing domain or LIGO's credmon will lose track
+
+⊨ at.'sub' ≡ 'jeffrey.gaynor@ligo.org' : 'wrong AT subject';
+⊨ at.'aud' ≡ 'ALL' : 'wrong AT audience';
+⊨ at.'iss' ≡ 'https://cilogon.org/igwn' : 'wrong AT issuer';
+⊨ ∃at.'scope' ∧ 0<size(at.'scope'): 'missing AT scopes';
+⊨ @∧⊙['read:/shared', 'read:/staging']< at.'scope'  : 'wrong AT scope, got \'' + at.'scope' + '\'';
+
+say('basic LIGO test ok');
+clc#refresh();
+at. := tokens.'access_token'.'jwt';
+rt. := tokens.'refresh_token';
+say('at:\n'+print(at.));
+say('rt.:\n'+print(rt.));
+
+⊨ at.'sub' ≡ 'jeffrey.gaynor@ligo.org' : 'wrong AT subject';
+⊨ at.'aud' ≡ 'ALL' : 'wrong AT audience';
+⊨ at.'iss' ≡ 'https://cilogon.org/igwn' : 'wrong AT issuer';
+⊨ ∃at.'scope' ∧ 0<size(at.'scope'): 'missing AT scopes';
+⊨ @∧⊙['read:/frames']< at.'scope'  : 'wrong AT scope, got \'' + at.'scope' + '\'';
+
+/*
+  JWT access token:{
+ "sub": "jeffrey.gaynor@ligo.org",
+ "aud": "ANY",
+ "ver": "scitoken:2.0",
+ "nbf": 1678912432,
+ "scope": "read:/frames",
+ "iss": "https://test.cilogon.org/ligo",
+ "exp": 1678913337,
+ "iat": 1678912437,
+ "jti": "https://test.cilogon.org/oauth2/175693d3d84e28a4022e9b6106103b16?type=accessToken&ts=1678912442824&version=v2.0&lifetime=900000"
+}
+
+
+
+  "sub": "jeffrey.gaynor@ligo.org",
+  "idp_name": "LIGO Scientific Collaboration",
+  "eppn": "jeffrey.gaynor@ligo.org",
+  "ou": "People",
+  "cert_subject_dn": "/DC=org/DC=cilogon/C=US/O=LIGO/CN=Jeffrey Gaynor jeffrey.gaynor@ligo.org",
+  "iss": "https://test.cilogon.org/ligo",
+  "given_name": "Jeffrey",
+  "nonce": "QK5tFmjrOoJIEosX-7y0vJjkNPzARHFodAJMDW7zaFU",
+  "acr": "https://refeds.org/profile/sfa",
+  "aud": "test:jeff/ligo",
+  "uid": "jeffrey.gaynor",
+  "pairwise_id": "DLXYPSPLINUMVKFUYBK5UAV7UO5NWKGG@ligo.org",
+  "idp": "https://login.ligo.org/idp/shibboleth",
+  "auth_time": 1678911294,
+  "name": "Jeffrey Gaynor",
+  "exp": 1678913337,
+  "family_name": "Gaynor",
+  "iat": 1678912437,
+  "email": "jeffrey.gaynor@ligo.org",
+  "jti": "https://test.cilogon.org/oauth2/idToken/42f2d167400414ba741345c6caf5d05a/1678912437032"
+}
+
+*/
\ No newline at end of file
Index: server-test/src/main/resources/flow-tests/prod/cil1550.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/prod/cil1550.qdl b/server-test/src/main/resources/flow-tests/prod/cil1550.qdl
new file mode 100755
--- /dev/null	(date 1683059291625)
+++ b/server-test/src/main/resources/flow-tests/prod/cil1550.qdl	(date 1683059291625)
@@ -0,0 +1,22 @@
+#! /usr/bin/env -S qdl-run
+
+/*
+   Tests the client with no configuration
+*/
+
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
+if[path∉script_path()][script_path(path ~ script_path());];
+cfg.'id'  := 'prod:cil1550'; // name of the configuration, not the id
+cfg.'idp'  := 'NCSA';
+cfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';
+cfg.'description' :=  'Test with Tiger Dev Functor script. This tests that the claim source serialization works.';
+cfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint
+
+rc := script_load('driver.qdl', cfg.);
+if[rc!='ok'][return(rc);];
+tokens. := clc#access();
+⊨ tokens.'access_token'.'lifetime' == 900000 : 'wrong access token lifetime';
+⊨ tokens.'refresh_token'.'lifetime' == 2592000000 : 'wrong refresh token lifetime';
+⊨ claims().'aud' == 'test:cil1550' : 'wrong audience';  // Audience is a little different than usual.
+⊨ claims().'eppn' == 'jgaynor@ncsa.illinois.edu' : 'wrong eppn';
+say('CIL1550 (serialization of claims sources) test: ok');
\ No newline at end of file
Index: server-test/src/main/resources/flow-tests/prod/all.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/prod/all.qdl b/server-test/src/main/resources/flow-tests/prod/all.qdl
new file mode 100755
--- /dev/null	(date 1683059258772)
+++ b/server-test/src/main/resources/flow-tests/prod/all.qdl	(date 1683059258772)
@@ -0,0 +1,10 @@
+#! /usr/bin/env -S qdl-run
+// If you want to run an indivdual test, add the next two lines to it or none of the utilities
+// will be found.
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
+script_path(path ~ script_path());
+
+test.:=(path + '/prod/') + ['cil1550.qdl',
+                            'ligo.qdl',
+                            'ligo-robot.qdl'];
+script_load('runner.qdl', test.);
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ArtifactsWorkspaceSettings\">\n    <artifacts-to-build>\n      <artifact name=\"client-oauth2:war\" />\n      <artifact name=\"oa4mp-server-oauth2:war\" />\n    </artifacts-to-build>\n  </component>\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"eb414374-02ed-40a4-9689-d382715049b9\" name=\"Changes\" comment=\"\">\n      <change afterPath=\"$PROJECT_DIR$/server-admin/src/main/java/edu/uiuc/ncsa/myproxy/oauth2/Banners.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/oa4mp-server-oauth2/buildNumber.properties\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/oa4mp-server-oauth2/buildNumber.properties\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/qdl/buildNumber.properties\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/qdl/buildNumber.properties\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server-admin/src/main/java/edu/uiuc/ncsa/myproxy/oauth2/base/BaseCommands.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/server-admin/src/main/java/edu/uiuc/ncsa/myproxy/oauth2/base/BaseCommands.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server-admin/src/main/java/edu/uiuc/ncsa/myproxy/oauth2/tools/OA2Commands.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/server-admin/src/main/java/edu/uiuc/ncsa/myproxy/oauth2/tools/OA2Commands.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/OA2QDLConfigurationLoader.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/OA2QDLConfigurationLoader.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/OA2QDLEnvironment.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/OA2QDLEnvironment.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server-test/buildNumber.properties\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/server-test/buildNumber.properties\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/server-test/src/main/resources/utils/check_dir.qdl\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/server-test/src/main/resources/utils/check_dir.qdl\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"CodeInsightWorkspaceSettings\">\n    <option name=\"optimizeImportsOnTheFly\" value=\"true\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"PUSH_AUTO_UPDATE\" value=\"true\" />\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"5.3.0\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"LogFilters\">\n    <option name=\"FILTER_ERRORS\" value=\"false\" />\n    <option name=\"FILTER_WARNINGS\" value=\"false\" />\n    <option name=\"FILTER_INFO\" value=\"true\" />\n    <option name=\"FILTER_DEBUG\" value=\"true\" />\n    <option name=\"CUSTOM_FILTER\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"MavenImportPreferences\">\n    <option name=\"generalSettings\">\n      <MavenGeneralSettings>\n        <option name=\"useMavenConfig\" value=\"true\" />\n      </MavenGeneralSettings>\n    </option>\n  </component>\n  <component name=\"ProjectId\" id=\"2LNVaK3mRfYzvMjy3UbYNQkOjGb\" />\n  <component name=\"ProjectLevelVcsManager\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectReloadState\">\n    <option name=\"STATE\" value=\"0\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"autoscrollFromSource\" value=\"true\" />\n    <option name=\"autoscrollToSource\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n    <option name=\"showMembers\" value=\"true\" />\n    <option name=\"showModules\" value=\"false\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/home/ncsa/dev/ncsa-git/oa4mp/client-webapp/src/main/webapp/static/images&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;project.structure.last.edited&quot;: &quot;Libraries&quot;,\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\n    &quot;project.structure.side.proportion&quot;: &quot;0.5883041&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;project.propCompiler&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/client-webapp/src/main/webapp/static/images\" />\n      <recent name=\"$PROJECT_DIR$/client-webapp/src/main/webapp/static\" />\n      <recent name=\"$PROJECT_DIR$/oa4mp-website\" />\n      <recent name=\"$PROJECT_DIR$/oa4mp-server-test-oauth2/src/main/resources/flow-tests/local\" />\n      <recent name=\"$PROJECT_DIR$/oa4mp-server-test-oauth2/src/main/resources/flow-tests\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$/oa4mp-server-test-oauth2/src/main/resources/flow-tests/test\" />\n      <recent name=\"$PROJECT_DIR$/oa4mp-server-admin-oauth2/src/main/resources/qdl/bnl/sphenix/v2\" />\n      <recent name=\"$PROJECT_DIR$/oa4mp-server-admin-oauth2/src/main/resources/qdl/bnl/matter_most/v1\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Application.OA2CommandLineClient\">\n    <configuration default=\"true\" type=\"Applet\" factoryName=\"Applet\">\n      <option name=\"WIDTH\" value=\"400\" />\n      <option name=\"HEIGHT\" value=\"300\" />\n      <option name=\"POLICY_FILE\" value=\"$APPLICATION_HOME_DIR$/bin/appletviewer.policy\" />\n      <module />\n      <method />\n    </configuration>\n    <configuration name=\"&lt;template&gt;\" type=\"WebApp\" default=\"true\" selected=\"false\">\n      <Host>localhost</Host>\n      <Port>5050</Port>\n    </configuration>\n    <configuration name=\"CLI\" type=\"Application\" factoryName=\"Application\">\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"11.0.8\" />\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"edu.uiuc.ncsa.myproxy.oauth2.tools.OA2Commands\" />\n      <module name=\"server-admin\" />\n      <option name=\"PROGRAM_PARAMETERS\" value=\"-cfg $PROJECT_DIR$/../../csd/config/server-oa2.xml -name localhost:oa4mp.oa2.mariadb\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"OA2CommandLineClient\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"edu.uiuc.ncsa.myproxy.oauth2.tools.OA2CommandLineClient\" />\n      <module name=\"server-admin\" />\n      <option name=\"PROGRAM_PARAMETERS\" value=\"-cfg $USER_HOME$/csd/config/clients.xml -name localhost:command.line\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"edu.uiuc.ncsa.myproxy.oauth2.tools.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"QDL\" type=\"Application\" factoryName=\"Application\">\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"/usr/lib/jvm/java-1.11.0-openjdk-amd64\" />\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"edu.uiuc.ncsa.qdl.workspace.QDLWorkspace\" />\n      <module name=\"qdl\" />\n      <option name=\"PROGRAM_PARAMETERS\" value=\"-cfg $PROJECT_DIR$/../../csd/config/qdl-cfg.xml -name oa2-dev -gui\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration default=\"true\" type=\"Application\" factoryName=\"Application\">\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"Test Suite\" type=\"JUnit\" factoryName=\"JUnit\">\n      <module name=\"server-test\" />\n      <option name=\"ALTERNATIVE_JRE_PATH_ENABLED\" value=\"true\" />\n      <option name=\"ALTERNATIVE_JRE_PATH\" value=\"/usr/lib/jvm/java-11-openjdk-amd64\" />\n      <option name=\"PACKAGE_NAME\" value=\"test\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"test.ServiceTestSuite2\" />\n      <option name=\"METHOD_NAME\" value=\"\" />\n      <option name=\"TEST_OBJECT\" value=\"class\" />\n      <option name=\"VM_PARAMETERS\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"TEST_SEARCH_SCOPE\">\n        <value defaultName=\"moduleWithDependencies\" />\n      </option>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"JUnit\" factoryName=\"JUnit\">\n      <option name=\"TEST_OBJECT\" value=\"class\" />\n      <option name=\"VM_PARAMETERS\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"TEST_SEARCH_SCOPE\">\n        <value defaultName=\"moduleWithDependencies\" />\n      </option>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"OA4MP\" type=\"#com.intellij.j2ee.web.tomcat.TomcatRunConfigurationFactory\" factoryName=\"Local\" APPLICATION_SERVER_NAME=\"Tomcat 9.0.65\" ALTERNATIVE_JRE_ENABLED=\"false\">\n      <option name=\"OPEN_IN_BROWSER_URL\" value=\"https://localhost:9443/client2/\" />\n      <option name=\"UPDATING_POLICY\" value=\"restart-server\" />\n      <deployment>\n        <artifact name=\"client-oauth2:war\">\n          <settings>\n            <option name=\"CONTEXT_PATH\" value=\"/client2\" />\n          </settings>\n        </artifact>\n        <artifact name=\"oa4mp-server-oauth2:war\">\n          <settings>\n            <option name=\"CONTEXT_PATH\" value=\"/oauth2\" />\n          </settings>\n        </artifact>\n      </deployment>\n      <server-settings>\n        <option name=\"BASE_DIRECTORY_NAME\" value=\"830c3b35-5fb1-4c0f-8124-c76a4938fc19\" />\n        <option name=\"HTTPS_PORT\" value=\"9443\" />\n      </server-settings>\n      <predefined_log_file enabled=\"true\" id=\"Tomcat\" />\n      <predefined_log_file enabled=\"true\" id=\"Tomcat Catalina\" />\n      <predefined_log_file id=\"Tomcat Manager\" />\n      <predefined_log_file id=\"Tomcat Host Manager\" />\n      <predefined_log_file id=\"Tomcat Localhost Access\" />\n      <RunnerSettings RunnerId=\"Debug\">\n        <option name=\"DEBUG_PORT\" value=\"38593\" />\n      </RunnerSettings>\n      <ConfigurationWrapper VM_VAR=\"JAVA_OPTS\" RunnerId=\"Cover\">\n        <option name=\"USE_ENV_VARIABLES\" value=\"true\" />\n        <STARTUP>\n          <option name=\"USE_DEFAULT\" value=\"true\" />\n          <option name=\"SCRIPT\" value=\"\" />\n          <option name=\"VM_PARAMETERS\" value=\"\" />\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\n        </STARTUP>\n        <SHUTDOWN>\n          <option name=\"USE_DEFAULT\" value=\"true\" />\n          <option name=\"SCRIPT\" value=\"\" />\n          <option name=\"VM_PARAMETERS\" value=\"\" />\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\n        </SHUTDOWN>\n      </ConfigurationWrapper>\n      <ConfigurationWrapper VM_VAR=\"JAVA_OPTS\" RunnerId=\"Debug\">\n        <option name=\"USE_ENV_VARIABLES\" value=\"true\" />\n        <STARTUP>\n          <option name=\"USE_DEFAULT\" value=\"true\" />\n          <option name=\"SCRIPT\" value=\"\" />\n          <option name=\"VM_PARAMETERS\" value=\"\" />\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\n        </STARTUP>\n        <SHUTDOWN>\n          <option name=\"USE_DEFAULT\" value=\"true\" />\n          <option name=\"SCRIPT\" value=\"\" />\n          <option name=\"VM_PARAMETERS\" value=\"\" />\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\n        </SHUTDOWN>\n      </ConfigurationWrapper>\n      <ConfigurationWrapper VM_VAR=\"JAVA_OPTS\" RunnerId=\"Profile\">\n        <option name=\"USE_ENV_VARIABLES\" value=\"true\" />\n        <STARTUP>\n          <option name=\"USE_DEFAULT\" value=\"true\" />\n          <option name=\"SCRIPT\" value=\"\" />\n          <option name=\"VM_PARAMETERS\" value=\"\" />\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\n        </STARTUP>\n        <SHUTDOWN>\n          <option name=\"USE_DEFAULT\" value=\"true\" />\n          <option name=\"SCRIPT\" value=\"\" />\n          <option name=\"VM_PARAMETERS\" value=\"\" />\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\n        </SHUTDOWN>\n      </ConfigurationWrapper>\n      <ConfigurationWrapper VM_VAR=\"JAVA_OPTS\" RunnerId=\"Run\">\n        <option name=\"USE_ENV_VARIABLES\" value=\"true\" />\n        <STARTUP>\n          <option name=\"USE_DEFAULT\" value=\"true\" />\n          <option name=\"SCRIPT\" value=\"\" />\n          <option name=\"VM_PARAMETERS\" value=\"\" />\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\n        </STARTUP>\n        <SHUTDOWN>\n          <option name=\"USE_DEFAULT\" value=\"true\" />\n          <option name=\"SCRIPT\" value=\"\" />\n          <option name=\"VM_PARAMETERS\" value=\"\" />\n          <option name=\"PROGRAM_PARAMETERS\" value=\"\" />\n        </SHUTDOWN>\n      </ConfigurationWrapper>\n      <method v=\"2\">\n        <option name=\"BuildArtifacts\" enabled=\"true\">\n          <artifact name=\"client-oauth2:war\" />\n          <artifact name=\"oa4mp-server-oauth2:war\" />\n        </option>\n      </method>\n    </configuration>\n    <list>\n      <item itemvalue=\"Application.CLI\" />\n      <item itemvalue=\"Application.QDL\" />\n      <item itemvalue=\"Application.OA2CommandLineClient\" />\n      <item itemvalue=\"JUnit.Test Suite\" />\n      <item itemvalue=\"Tomcat Server.OA4MP\" />\n    </list>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.OA2CommandLineClient\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"SvnConfiguration\" maxAnnotateRevisions=\"500\">\n    <option name=\"USER\" value=\"\" />\n    <option name=\"PASSWORD\" value=\"\" />\n    <option name=\"mySSHConnectionTimeout\" value=\"30000\" />\n    <option name=\"mySSHReadTimeout\" value=\"30000\" />\n    <option name=\"LAST_MERGED_REVISION\" />\n    <option name=\"MERGE_DRY_RUN\" value=\"false\" />\n    <option name=\"MERGE_DIFF_USE_ANCESTRY\" value=\"true\" />\n    <option name=\"UPDATE_LOCK_ON_DEMAND\" value=\"false\" />\n    <option name=\"IGNORE_SPACES_IN_MERGE\" value=\"false\" />\n    <option name=\"DETECT_NESTED_COPIES\" value=\"true\" />\n    <option name=\"CHECK_NESTED_FOR_QUICK_MERGE\" value=\"false\" />\n    <option name=\"IGNORE_SPACES_IN_ANNOTATE\" value=\"true\" />\n    <option name=\"SHOW_MERGE_SOURCES_IN_ANNOTATE\" value=\"true\" />\n    <option name=\"FORCE_UPDATE\" value=\"false\" />\n    <myIsUseDefaultProxy>false</myIsUseDefaultProxy>\n  </component>\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"eb414374-02ed-40a4-9689-d382715049b9\" name=\"Changes\" comment=\"\" />\n      <created>1675711590313</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1675711590313</updated>\n      <workItem from=\"1675711591797\" duration=\"35967000\" />\n      <workItem from=\"1675946561261\" duration=\"37648000\" />\n      <workItem from=\"1677181831620\" duration=\"33264000\" />\n      <workItem from=\"1679599166366\" duration=\"83126000\" />\n      <workItem from=\"1680272326954\" duration=\"9000000\" />\n      <workItem from=\"1680299621593\" duration=\"37341000\" />\n      <workItem from=\"1680795008170\" duration=\"3871000\" />\n      <workItem from=\"1680868723426\" duration=\"1387000\" />\n      <workItem from=\"1680895479158\" duration=\"1047000\" />\n      <workItem from=\"1681146206952\" duration=\"70430000\" />\n      <workItem from=\"1681620673482\" duration=\"11844000\" />\n      <workItem from=\"1681763797199\" duration=\"15000\" />\n      <workItem from=\"1681763897018\" duration=\"35646000\" />\n      <workItem from=\"1681938417039\" duration=\"28645000\" />\n      <workItem from=\"1682353140670\" duration=\"14923000\" />\n      <workItem from=\"1682610844149\" duration=\"3194000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Migrated a bunch of static utilities into classes.\">\n      <created>1675892170361</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1675892170361</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"CIL-1389 (updated documentation) and CIL-1266 testing improvements. Addressed a few niggling point.\">\n      <created>1677542348075</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1677542348075</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Git hub fixes for QDL #15 (quit using QDLException). Script updates for BNL and LIGO. Fixed documentation.\">\n      <created>1677883776506</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1677883776506</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"tweaked various QDL scripts.\">\n      <created>1678230441558</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1678230441558</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Much QDL scripting. Deployments for BNL and LIGO.\">\n      <created>1678915098571</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1678915098571</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"CIL-1671. All the script updates (which are already elsewhere in Git) from last week.\">\n      <created>1680041917152</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1680041917152</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"CIL-1677 First cut\">\n      <created>1680122969963</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1680122969963</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"CIL-1677 Redux. Improved flow tests.\">\n      <created>1680208361385</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1680208361385</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"Changed visibility on an internal variable.\">\n      <created>1680214323770</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1680214323770</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"CIL-1677 documentation.\">\n      <created>1680215649133</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1680215649133</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"Snapshot version bumped to 5.3\">\n      <created>1680299087589</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1680299087590</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"Added LibLoader implementation for QDL. Getting website javadoc to build sanely.\">\n      <created>1680645158923</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1680645158923</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"Maven build improvements\">\n      <created>1680735148832</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1680735148832</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"Checkin before travel\">\n      <created>1680735535542</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1680735535542</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"Checkin before travel\">\n      <created>1680795142012</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1680795142012</updated>\n    </task>\n    <task id=\"LOCAL-00016\" summary=\"Fixing broken javadoc build.\">\n      <created>1681240839691</created>\n      <option name=\"number\" value=\"00016\" />\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1681240839691</updated>\n    </task>\n    <task id=\"LOCAL-00017\" summary=\"Fixing broken javadoc build. Part 2. 1339 files that were missing.\">\n      <created>1681241399069</created>\n      <option name=\"number\" value=\"00017\" />\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1681241399069</updated>\n    </task>\n    <task id=\"LOCAL-00018\" summary=\"Package renames\">\n      <created>1681250328297</created>\n      <option name=\"number\" value=\"00018\" />\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1681250328297</updated>\n    </task>\n    <task id=\"LOCAL-00019\" summary=\"General build improvements\">\n      <created>1681308937919</created>\n      <option name=\"number\" value=\"00019\" />\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1681308937919</updated>\n    </task>\n    <task id=\"LOCAL-00020\" summary=\"Website update\">\n      <created>1681309066443</created>\n      <option name=\"number\" value=\"00020\" />\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1681309066443</updated>\n    </task>\n    <task id=\"LOCAL-00021\" summary=\"Website update. Style sheets, logo (new!) etc.\">\n      <created>1681421038486</created>\n      <option name=\"number\" value=\"00021\" />\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1681421038486</updated>\n    </task>\n    <task id=\"LOCAL-00022\" summary=\"Website update. Style sheets, logo (new!) etc.\">\n      <created>1681487990769</created>\n      <option name=\"number\" value=\"00022\" />\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1681487990770</updated>\n    </task>\n    <task id=\"LOCAL-00023\" summary=\"Website update. Style sheets, logo (new!) etc.\">\n      <created>1681498800846</created>\n      <option name=\"number\" value=\"00023\" />\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1681498800846</updated>\n    </task>\n    <task id=\"LOCAL-00024\" summary=\"Website update. Style sheets, logo (new!) etc.\">\n      <created>1681499843861</created>\n      <option name=\"number\" value=\"00024\" />\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1681499843861</updated>\n    </task>\n    <task id=\"LOCAL-00025\" summary=\"Test of scripts that build everything.\">\n      <created>1681510642681</created>\n      <option name=\"number\" value=\"00025\" />\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1681510642681</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"26\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"UnknownFeatures\">\n    <option featureType=\"com.intellij.fileTypeFactory\" implementationName=\"*.ini\" />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"CHECK_CODE_SMELLS_BEFORE_PROJECT_COMMIT\" value=\"false\" />\n    <option name=\"CHECK_NEW_TODO\" value=\"false\" />\n    <MESSAGE value=\"Migrated a bunch of static utilities into classes.\" />\n    <MESSAGE value=\"CIL-1389 (updated documentation) and CIL-1266 testing improvements. Addressed a few niggling point.\" />\n    <MESSAGE value=\"Git hub fixes for QDL #15 (quit using QDLException). Script updates for BNL and LIGO. Fixed documentation.\" />\n    <MESSAGE value=\"tweaked various QDL scripts.\" />\n    <MESSAGE value=\"Much QDL scripting. Deployments for BNL and LIGO.\" />\n    <MESSAGE value=\"CIL-1671. All the script updates (which are already elsewhere in Git) from last week.\" />\n    <MESSAGE value=\"CIL-1677 First cut\" />\n    <MESSAGE value=\"CIL-1677 Redux. Improved flow tests.\" />\n    <MESSAGE value=\"Changed visibility on an internal variable.\" />\n    <MESSAGE value=\"CIL-1677 documentation.\" />\n    <MESSAGE value=\"Snapshot version bumped to 5.3\" />\n    <MESSAGE value=\"Added LibLoader implementation for QDL. Getting website javadoc to build sanely.\" />\n    <MESSAGE value=\"Maven build improvements\" />\n    <MESSAGE value=\"Checkin before travel\" />\n    <MESSAGE value=\"Fixing broken javadoc build.\" />\n    <MESSAGE value=\"Fixing broken javadoc build. Part 2. 1339 files that were missing.\" />\n    <MESSAGE value=\"Package renames\" />\n    <MESSAGE value=\"General build improvements\" />\n    <MESSAGE value=\"Website update\" />\n    <MESSAGE value=\"Website update. Style sheets, logo (new!) etc.\" />\n    <MESSAGE value=\"Test of scripts that build everything.\" />\n    <MESSAGE value=\"Brandind, method changed.\" />\n    <MESSAGE value=\"Weirdly, a bunch of files seem to have removed themselves from GIT. Recommitting.\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Weirdly, a bunch of files seem to have removed themselves from GIT. Recommitting.\" />\n    <option name=\"MAKE_NEW_CHANGELIST_ACTIVE\" value=\"true\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>jar://$MAVEN_REPOSITORY$/edu/uiuc/ncsa/security/util/5.2-SNAPSHOT/util-5.2-SNAPSHOT-sources.jar!/edu/uiuc/ncsa/security/util/functor/logic/jMatch.java</url>\n          <line>19</line>\n          <option name=\"timeStamp\" value=\"4\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/oauth2/claims/NCSALDAPClaimSource.java</url>\n          <line>54</line>\n          <option name=\"timeStamp\" value=\"13\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/oauth2/claims/NCSALDAPClaimSource.java</url>\n          <line>61</line>\n          <option name=\"timeStamp\" value=\"14\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/oauth2/servlet/OA2TokenUtils.java</url>\n          <line>88</line>\n          <option name=\"timeStamp\" value=\"17\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/qdl/src/main/java/edu/uiuc/ncsa/oa2/qdl/CLC.java</url>\n          <line>356</line>\n          <option name=\"timeStamp\" value=\"23\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>jar://$MAVEN_REPOSITORY$/edu/uiuc/ncsa/security/util/5.2-SNAPSHOT/util-5.2-SNAPSHOT-sources.jar!/edu/uiuc/ncsa/security/util/mail/MailUtil.java</url>\n          <line>230</line>\n          <option name=\"timeStamp\" value=\"30\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/oauth2/cm/oidc_cm/OIDCCMServlet.java</url>\n          <line>740</line>\n          <option name=\"timeStamp\" value=\"33\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/oauth2/storage/vo/VOConverter.java</url>\n          <line>70</line>\n          <option name=\"timeStamp\" value=\"51\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>jar://$MAVEN_REPOSITORY$/edu/uiuc/ncsa/security/storage/5.2-SNAPSHOT/storage-5.2-SNAPSHOT-sources.jar!/edu/uiuc/ncsa/security/storage/cli/StoreCommands.java</url>\n          <line>1922</line>\n          <option name=\"timeStamp\" value=\"53\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>jar://$MAVEN_REPOSITORY$/edu/uiuc/ncsa/security/storage/5.2-SNAPSHOT/storage-5.2-SNAPSHOT-sources.jar!/edu/uiuc/ncsa/security/storage/cli/StoreCommands.java</url>\n          <line>1211</line>\n          <option name=\"timeStamp\" value=\"54\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>jar://$MAVEN_REPOSITORY$/edu/uiuc/ncsa/security/storage/5.2-SNAPSHOT/storage-5.2-SNAPSHOT-sources.jar!/edu/uiuc/ncsa/security/storage/cli/StoreCommands.java</url>\n          <line>1361</line>\n          <option name=\"timeStamp\" value=\"55\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>jar://$MAVEN_REPOSITORY$/edu/uiuc/ncsa/security/storage/5.2-SNAPSHOT/storage-5.2-SNAPSHOT-sources.jar!/edu/uiuc/ncsa/security/storage/cli/StoreCommands.java</url>\n          <line>1348</line>\n          <option name=\"timeStamp\" value=\"56\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>jar://$MAVEN_REPOSITORY$/edu/uiuc/ncsa/qdl/language/1.5-QDL-SNAPSHOT/language-1.5-QDL-SNAPSHOT-sources.jar!/edu/uiuc/ncsa/qdl/state/State.java</url>\n          <line>281</line>\n          <option name=\"timeStamp\" value=\"62\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/server-admin/src/main/java/edu/uiuc/ncsa/myproxy/oauth2/tools/OA2Commands.java</url>\n          <line>77</line>\n          <option name=\"timeStamp\" value=\"63\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/server-admin/src/main/java/edu/uiuc/ncsa/myproxy/oauth2/base/BaseCommands.java</url>\n          <line>103</line>\n          <option name=\"timeStamp\" value=\"65\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\n          <url>file://$PROJECT_DIR$/server-admin/src/main/java/edu/uiuc/ncsa/myproxy/oauth2/tools/OA2CommandLineClient.java</url>\n          <line>68</line>\n          <option name=\"timeStamp\" value=\"66\" />\n        </line-breakpoint>\n        <line-breakpoint enabled=\"true\" type=\"java-field\">\n          <url>file://$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/oauth2/loader/OA2ConfigurationLoader.java</url>\n          <line>105</line>\n          <properties field=\"CLEANUP_LOCKING_ENABLED\" class=\"edu.uiuc.ncsa.myproxy.oa4mp.oauth2.loader.OA2ConfigurationLoader\" />\n          <option name=\"timeStamp\" value=\"34\" />\n        </line-breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/.idea/workspace.xml	(date 1683317503739)
@@ -11,15 +11,50 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="eb414374-02ed-40a4-9689-d382715049b9" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/server-admin/src/main/java/edu/uiuc/ncsa/myproxy/oauth2/Banners.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/prod/all.qdl" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/prod/cil1550.qdl" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/prod/ligo-robot.qdl" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/prod/ligo.qdl" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/oa4mp-server-oauth2/buildNumber.properties" beforeDir="false" afterPath="$PROJECT_DIR$/oa4mp-server-oauth2/buildNumber.properties" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/qdl/buildNumber.properties" beforeDir="false" afterPath="$PROJECT_DIR$/qdl/buildNumber.properties" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/server-admin/src/main/java/edu/uiuc/ncsa/myproxy/oauth2/base/BaseCommands.java" beforeDir="false" afterPath="$PROJECT_DIR$/server-admin/src/main/java/edu/uiuc/ncsa/myproxy/oauth2/base/BaseCommands.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/server-admin/src/main/java/edu/uiuc/ncsa/myproxy/oauth2/tools/OA2Commands.java" beforeDir="false" afterPath="$PROJECT_DIR$/server-admin/src/main/java/edu/uiuc/ncsa/myproxy/oauth2/tools/OA2Commands.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/OA2QDLConfigurationLoader.java" beforeDir="false" afterPath="$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/OA2QDLConfigurationLoader.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/OA2QDLEnvironment.java" beforeDir="false" afterPath="$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/OA2QDLEnvironment.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-admin/src/main/resources/new-form/minimal-file.json" beforeDir="false" afterPath="$PROJECT_DIR$/server-admin/src/main/resources/new-form/minimal-file.json" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-admin/src/main/resources/qdl/ligo/vo4/init.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-admin/src/main/resources/qdl/ligo/vo4/init.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-admin/src/main/resources/qdl/utils/cs.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-admin/src/main/resources/qdl/utils/cs.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/claims/ClaimsSourceGetter.java" beforeDir="false" afterPath="$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/claims/ClaimsSourceGetter.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/QDLJSONConfigUtil.java" beforeDir="false" afterPath="$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/QDLJSONConfigUtil.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/QDLRuntimeEngine.java" beforeDir="false" afterPath="$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/QDLRuntimeEngine.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/server-test/buildNumber.properties" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/buildNumber.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/cm-tests/anon-basic.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/cm-tests/anon-basic.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/cm-tests/anon-cfg.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/cm-tests/anon-cfg.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/dev/df.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/dev/df.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/dev/functor.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/dev/functor.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/dev/ncsa_qdl.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/dev/ncsa_qdl.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/dev/no_config.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/dev/no_config.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/dev/revoke.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/dev/revoke.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/dev/vo_1.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/dev/vo_1.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/driver.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/driver.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/cil1550.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/cil1550.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/ersatz.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/ersatz.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/fnal-1.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/fnal-1.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/fnal-3.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/fnal-3.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/no_config.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/no_config.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/prototype.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/prototype.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/rtx.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/rtx.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/rtx_exchanges.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/rtx_exchanges.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/rtx_refreshes.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/rtx_refreshes.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/scitokens.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/scitokens.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/scitokens2.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/scitokens2.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/test-template.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/test-template.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/test_ncsa.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/test_ncsa.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/test_qdl.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/test_qdl.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/vo_test.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/local/vo_test.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/main.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/main.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/runner.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/runner.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/test/ligo-robot.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/test/ligo-robot.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/test/ligo.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/test/ligo.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/test/resume.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/test/resume.qdl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/test/start.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/test/start.qdl" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/server-test/src/main/resources/utils/check_dir.qdl" beforeDir="false" afterPath="$PROJECT_DIR$/server-test/src/main/resources/utils/check_dir.qdl" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -77,30 +112,30 @@
     <option name="showMembers" value="true" />
     <option name="showModules" value="false" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
-    &quot;last_opened_file_path&quot;: &quot;/home/ncsa/dev/ncsa-git/oa4mp/client-webapp/src/main/webapp/static/images&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;project.structure.last.edited&quot;: &quot;Libraries&quot;,
-    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
-    &quot;project.structure.side.proportion&quot;: &quot;0.5883041&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;project.propCompiler&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "WebServerToolWindowFactoryState": "false",
+    "last_opened_file_path": "/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests/prod",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "project.structure.last.edited": "Libraries",
+    "project.structure.proportion": "0.15",
+    "project.structure.side.proportion": "0.5883041",
+    "settings.editor.selected.configurable": "project.propCompiler"
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
+      <recent name="$PROJECT_DIR$/server-test/src/main/resources/flow-tests/prod" />
       <recent name="$PROJECT_DIR$/client-webapp/src/main/webapp/static/images" />
       <recent name="$PROJECT_DIR$/client-webapp/src/main/webapp/static" />
       <recent name="$PROJECT_DIR$/oa4mp-website" />
       <recent name="$PROJECT_DIR$/oa4mp-server-test-oauth2/src/main/resources/flow-tests/local" />
-      <recent name="$PROJECT_DIR$/oa4mp-server-test-oauth2/src/main/resources/flow-tests" />
     </key>
     <key name="MoveFile.RECENT_KEYS">
       <recent name="$PROJECT_DIR$/oa4mp-server-test-oauth2/src/main/resources/flow-tests/test" />
@@ -108,7 +143,7 @@
       <recent name="$PROJECT_DIR$/oa4mp-server-admin-oauth2/src/main/resources/qdl/bnl/matter_most/v1" />
     </key>
   </component>
-  <component name="RunManager" selected="Application.OA2CommandLineClient">
+  <component name="RunManager" selected="Application.QDL">
     <configuration default="true" type="Applet" factoryName="Applet">
       <option name="WIDTH" value="400" />
       <option name="HEIGHT" value="300" />
@@ -331,7 +366,9 @@
       <workItem from="1681763897018" duration="35646000" />
       <workItem from="1681938417039" duration="28645000" />
       <workItem from="1682353140670" duration="14923000" />
-      <workItem from="1682610844149" duration="3194000" />
+      <workItem from="1682610844149" duration="3904000" />
+      <workItem from="1682686240690" duration="1829000" />
+      <workItem from="1682970763595" duration="31704000" />
     </task>
     <task id="LOCAL-00001" summary="Migrated a bunch of static utilities into classes.">
       <created>1675892170361</created>
@@ -508,7 +545,21 @@
       <option name="project" value="LOCAL" />
       <updated>1681510642681</updated>
     </task>
-    <option name="localTasksCounter" value="26" />
+    <task id="LOCAL-00026" summary="Some updates but mostly catching up on documentation.">
+      <created>1682616135005</created>
+      <option name="number" value="00026" />
+      <option name="presentableId" value="LOCAL-00026" />
+      <option name="project" value="LOCAL" />
+      <updated>1682616135005</updated>
+    </task>
+    <task id="LOCAL-00027" summary="Some updates but mostly catching up on documentation.">
+      <created>1682616209375</created>
+      <option name="number" value="00027" />
+      <option name="presentableId" value="LOCAL-00027" />
+      <option name="project" value="LOCAL" />
+      <updated>1682616209375</updated>
+    </task>
+    <option name="localTasksCounter" value="28" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -543,7 +594,8 @@
     <MESSAGE value="Test of scripts that build everything." />
     <MESSAGE value="Brandind, method changed." />
     <MESSAGE value="Weirdly, a bunch of files seem to have removed themselves from GIT. Recommitting." />
-    <option name="LAST_COMMIT_MESSAGE" value="Weirdly, a bunch of files seem to have removed themselves from GIT. Recommitting." />
+    <MESSAGE value="Some updates but mostly catching up on documentation." />
+    <option name="LAST_COMMIT_MESSAGE" value="Some updates but mostly catching up on documentation." />
     <option name="MAKE_NEW_CHANGELIST_ACTIVE" value="true" />
   </component>
   <component name="XDebuggerManager">
@@ -610,11 +662,6 @@
           <option name="timeStamp" value="56" />
         </line-breakpoint>
         <line-breakpoint enabled="true" type="java-line">
-          <url>jar://$MAVEN_REPOSITORY$/edu/uiuc/ncsa/qdl/language/1.5-QDL-SNAPSHOT/language-1.5-QDL-SNAPSHOT-sources.jar!/edu/uiuc/ncsa/qdl/state/State.java</url>
-          <line>281</line>
-          <option name="timeStamp" value="62" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
           <url>file://$PROJECT_DIR$/server-admin/src/main/java/edu/uiuc/ncsa/myproxy/oauth2/tools/OA2Commands.java</url>
           <line>77</line>
           <option name="timeStamp" value="63" />
@@ -628,6 +675,41 @@
           <url>file://$PROJECT_DIR$/server-admin/src/main/java/edu/uiuc/ncsa/myproxy/oauth2/tools/OA2CommandLineClient.java</url>
           <line>68</line>
           <option name="timeStamp" value="66" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>file://$PROJECT_DIR$/qdl/src/main/java/edu/uiuc/ncsa/oa2/qdl/QDLToolsLoader.java</url>
+          <line>21</line>
+          <option name="timeStamp" value="67" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>jar://$MAVEN_REPOSITORY$/edu/uiuc/ncsa/qdl/language/1.5-QDL-SNAPSHOT/language-1.5-QDL-SNAPSHOT-sources.jar!/edu/uiuc/ncsa/qdl/statements/TryCatch.java</url>
+          <line>56</line>
+          <option name="timeStamp" value="68" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>jar://$MAVEN_REPOSITORY$/edu/uiuc/ncsa/qdl/language/1.5-QDL-SNAPSHOT/language-1.5-QDL-SNAPSHOT-sources.jar!/edu/uiuc/ncsa/qdl/statements/TryCatch.java</url>
+          <line>63</line>
+          <option name="timeStamp" value="69" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>jar://$MAVEN_REPOSITORY$/edu/uiuc/ncsa/qdl/language/1.5-QDL-SNAPSHOT/language-1.5-QDL-SNAPSHOT-sources.jar!/edu/uiuc/ncsa/qdl/statements/TryCatch.java</url>
+          <line>99</line>
+          <option name="timeStamp" value="70" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>jar://$MAVEN_REPOSITORY$/edu/uiuc/ncsa/qdl/language/1.5-QDL-SNAPSHOT/language-1.5-QDL-SNAPSHOT-sources.jar!/edu/uiuc/ncsa/qdl/evaluate/SystemEvaluator.java</url>
+          <line>2279</line>
+          <option name="timeStamp" value="71" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>jar://$MAVEN_REPOSITORY$/edu/uiuc/ncsa/qdl/language/1.5-QDL-SNAPSHOT/language-1.5-QDL-SNAPSHOT-sources.jar!/edu/uiuc/ncsa/qdl/statements/TryCatch.java</url>
+          <line>88</line>
+          <option name="timeStamp" value="72" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>jar://$MAVEN_REPOSITORY$/edu/uiuc/ncsa/qdl/language/1.5-QDL-SNAPSHOT/language-1.5-QDL-SNAPSHOT-sources.jar!/edu/uiuc/ncsa/qdl/statements/AssertStatement.java</url>
+          <line>54</line>
+          <option name="timeStamp" value="73" />
         </line-breakpoint>
         <line-breakpoint enabled="true" type="java-field">
           <url>file://$PROJECT_DIR$/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/oauth2/loader/OA2ConfigurationLoader.java</url>
Index: server-test/src/main/resources/flow-tests/test/ligo.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Tests the client with LIGO configuration\n   created: 2023-03-15T20:18:26.265Z\n   Client config (on test.cilogon.org)\n\n{\"tokens\": {\"access\": {\n    \"qdl\":  {\n     \"args\": [\"igwn\"],\n     \"load\": \"ligo/vo4/at.qdl\",\n     \"xmd\": {\"exec_phase\":   [\n      \"post_token\",\n      \"post_exchange\",\n      \"post_refresh\"\n     ]}\n    },\n    \"type\": \"sci_token\"\n   }}}\n\n\n*/\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\n\ncfg.'id'  := 'test:jeff/ligo';\ncfg.'idp'  := 'LIGO';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Test basic configuration for LIGO';\ncfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint\nuser_id := 'http://cilogon.org/serverT/users/21340363'; // id from Github on test.cilogon.org\nparams.'authz' :=  {'scope': 'read:/frames'}; // initial request\nparams.'token' :=  {'scope': 'write:/frames', 'audience':'ALL'}; // initial request\nparams.'exchange' :=  {'scope': 'read:/frames'}; // initial request\n\nrc := script_load('driver.qdl', cfg., params.);\nif[rc!='ok'][return(rc);];\n\ntokens. := clc#access();\nat. := tokens.'access_token'.'jwt';\nrt. := tokens.'refresh_token';\nidt.:= claims();\n⊨ idt.'sub' ≡ 'jeffrey.gaynor@ligo.org' : 'wrong ID token subject';\n⊨ idt.'iss' ≡ 'https://test.cilogon.org/ligo'; // Check it's in VO\n⊨ idt.'aud' ≡ 'test:jeff/ligo';\n⊨ idt.'uid' ≡ 'jeffrey.gaynor'; // uid must not have trailing domain or LIGO's credmon will lose track\n\n⊨ at.'sub' ≡ 'jeffrey.gaynor@ligo.org' : 'wrong AT subject';\n⊨ at.'aud' ≡ 'ANY' : 'wrong AT audience';\n⊨ at.'scope' ≡ 'read:/frames' : 'wrong AT scope';\n⊨ at.'iss' ≡ 'https://test.cilogon.org/ligo' : 'wrong AT sissuer';\n\nsay('basic LIGO test ok');\n/*\n  JWT access token:{\n \"sub\": \"jeffrey.gaynor@ligo.org\",\n \"aud\": \"ANY\",\n \"ver\": \"scitoken:2.0\",\n \"nbf\": 1678912432,\n \"scope\": \"read:/frames\",\n \"iss\": \"https://test.cilogon.org/ligo\",\n \"exp\": 1678913337,\n \"iat\": 1678912437,\n \"jti\": \"https://test.cilogon.org/oauth2/175693d3d84e28a4022e9b6106103b16?type=accessToken&ts=1678912442824&version=v2.0&lifetime=900000\"\n}\n\n\n\n  \"sub\": \"jeffrey.gaynor@ligo.org\",\n  \"idp_name\": \"LIGO Scientific Collaboration\",\n  \"eppn\": \"jeffrey.gaynor@ligo.org\",\n  \"ou\": \"People\",\n  \"cert_subject_dn\": \"/DC=org/DC=cilogon/C=US/O=LIGO/CN=Jeffrey Gaynor jeffrey.gaynor@ligo.org\",\n  \"iss\": \"https://test.cilogon.org/ligo\",\n  \"given_name\": \"Jeffrey\",\n  \"nonce\": \"QK5tFmjrOoJIEosX-7y0vJjkNPzARHFodAJMDW7zaFU\",\n  \"acr\": \"https://refeds.org/profile/sfa\",\n  \"aud\": \"test:jeff/ligo\",\n  \"uid\": \"jeffrey.gaynor\",\n  \"pairwise_id\": \"DLXYPSPLINUMVKFUYBK5UAV7UO5NWKGG@ligo.org\",\n  \"idp\": \"https://login.ligo.org/idp/shibboleth\",\n  \"auth_time\": 1678911294,\n  \"name\": \"Jeffrey Gaynor\",\n  \"exp\": 1678913337,\n  \"family_name\": \"Gaynor\",\n  \"iat\": 1678912437,\n  \"email\": \"jeffrey.gaynor@ligo.org\",\n  \"jti\": \"https://test.cilogon.org/oauth2/idToken/42f2d167400414ba741345c6caf5d05a/1678912437032\"\n}\n\n*/
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/test/ligo.qdl b/server-test/src/main/resources/flow-tests/test/ligo.qdl
--- a/server-test/src/main/resources/flow-tests/test/ligo.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/test/ligo.qdl	(date 1683054895372)
@@ -20,7 +20,7 @@
 
 
 */
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 
 cfg.'id'  := 'test:jeff/ligo';
@@ -39,16 +39,19 @@
 tokens. := clc#access();
 at. := tokens.'access_token'.'jwt';
 rt. := tokens.'refresh_token';
-idt.:= claims();
+idt.:=claims();
+say('idt:\n'+print(idt.));
+say('at:\n'+print(at.));
+say('rt.:\n'+print(rt.));
 ⊨ idt.'sub' ≡ 'jeffrey.gaynor@ligo.org' : 'wrong ID token subject';
-⊨ idt.'iss' ≡ 'https://test.cilogon.org/ligo'; // Check it's in VO
-⊨ idt.'aud' ≡ 'test:jeff/ligo';
-⊨ idt.'uid' ≡ 'jeffrey.gaynor'; // uid must not have trailing domain or LIGO's credmon will lose track
+⊨ idt.'iss' ≡ 'https://test.cilogon.org/igwn' : 'wrong issuer, got \'' + (idt.'iss') + '\''; // Check it's in VO
+⊨ idt.'aud' ≡ 'test:jeff/ligo' : 'wrong audience';
+⊨ idt.'uid' ≡ 'jeffrey.gaynor' : 'incorrect user'; // uid must not have trailing domain or LIGO's credmon will lose track
 
 ⊨ at.'sub' ≡ 'jeffrey.gaynor@ligo.org' : 'wrong AT subject';
-⊨ at.'aud' ≡ 'ANY' : 'wrong AT audience';
-⊨ at.'scope' ≡ 'read:/frames' : 'wrong AT scope';
-⊨ at.'iss' ≡ 'https://test.cilogon.org/ligo' : 'wrong AT sissuer';
+⊨ at.'aud' ≡ 'ALL' : 'wrong AT audience';
+⊨ ∃at.'scope' ∧ 0<size(at.'scope'): 'missing AT scopes';
+⊨ at.'iss' ≡ 'https://test.cilogon.org/igwn' : 'wrong AT issuer';
 
 say('basic LIGO test ok');
 /*
Index: server-test/src/main/resources/flow-tests/test/ligo-robot.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Tests the client with LIGO configuration but passes in a robot scope\n   created: 2023-03-15T20:18:26.265Z\n   Client config (on test.cilogon.org)\n\n{\"tokens\": {\"access\": {\n    \"qdl\":  {\n     \"args\": [\"igwn\"],\n     \"load\": \"ligo/vo4/at.qdl\",\n     \"xmd\": {\"exec_phase\":   [\n      \"post_token\",\n      \"post_exchange\",\n      \"post_refresh\"\n     ]}\n    },\n    \"type\": \"sci_token\"\n   }}}\n\n\n*/\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\n\ncfg.'id'  := 'test:jeff/ligo';\ncfg.'idp'  := 'LIGO';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Robot test for LIGO';\ncfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint\nuser_id := 'http://cilogon.org/serverT/users/21340363'; // id from Github on test.cilogon.org\nparams.'authz' :=  {'scope': 'scitokentesting.read scitokentesting.write igwn.robot:ligorobottesting'}; // initial request\n\nrc := script_load('driver.qdl', cfg., params.);\nif[rc!='ok'][return(rc);];\n\ntokens. := clc#access();\n\nat. := tokens.'access_token'.'jwt';\nrt. := tokens.'refresh_token';\nidt.:= claims();\n⊨ idt.'sub' ≡ 'ligorobottesting@ligo.org' : 'wrong ID token subject';\n⊨ idt.'iss' ≡ 'https://test.cilogon.org/ligo'; // Check it's in VO\n⊨ idt.'aud' ≡ 'test:jeff/ligo';\n⊨ idt.'uid' ≡ 'ligorobottesting'; // uid must not have trailing domain or LIGO's credmon will lose track\n⊨ idt.'eppn' ≡ 'jeffrey.gaynor@ligo.org'; // eppn should be the same as the person requesting the robot\n\n⊨ at.'sub' ≡ 'ligorobottesting@ligo.org' : 'wrong AT subject';\n⊨ at.'aud' ≡ 'ANY' : 'wrong AT audience';\n⊨ 'scitokentesting.write'< at.'scope' &&  'scitokentesting.read' < at.'scope' : 'wrong AT scope';\n⊨ at.'iss' ≡ 'https://test.cilogon.org/ligo' : 'wrong AT sissuer';\n\nsay('LIGO robot test ok');\n/*\n\n JWT access token:{\n \"sub\": \"ligorobottesting@ligo.org\",\n \"aud\": \"ANY\",\n \"ver\": \"scitoken:2.0\",\n \"nbf\": 1678913696,\n \"scope\": \"scitokentesting.write scitokentesting.read\",\n \"iss\": \"https://test.cilogon.org/ligo\",\n \"exp\": 1678914601,\n \"iat\": 1678913701,\n \"jti\": \"https://test.cilogon.org/oauth2/6c6b09e0e1213eb96a8c12cc54edbcf9?type=accessToken&ts=1678913708335&version=v2.0&lifetime=900000\"\n}\n\n\n{\n  \"sub\": \"ligorobottesting@ligo.org\",\n  \"idp_name\": \"LIGO Scientific Collaboration\",\n  \"eppn\": \"jeffrey.gaynor@ligo.org\",\n  \"ou\": \"People\",\n  \"cert_subject_dn\": \"/DC=org/DC=cilogon/C=US/O=LIGO/CN=Jeffrey Gaynor jeffrey.gaynor@ligo.org\",\n  \"iss\": \"https://test.cilogon.org/ligo\",\n  \"given_name\": \"Jeffrey\",\n  \"nonce\": \"lZNE2Uf9b5w32Y1XC9HXjOs1uFBEBAEZMtViFgSSDHw\",\n  \"acr\": \"https://refeds.org/profile/sfa\",\n  \"aud\": \"test:jeff/ligo\",\n  \"uid\": \"ligorobottesting\",\n  \"pairwise_id\": \"DLXYPSPLINUMVKFUYBK5UAV7UO5NWKGG@ligo.org\",\n  \"idp\": \"https://login.ligo.org/idp/shibboleth\",\n  \"auth_time\": 1678911294,\n  \"name\": \"Jeffrey Gaynor\",\n  \"exp\": 1678914601,\n  \"family_name\": \"Gaynor\",\n  \"iat\": 1678913701,\n  \"email\": \"jeffrey.gaynor@ligo.org\",\n  \"jti\": \"https://test.cilogon.org/oauth2/idToken/13b5ef7cf2a74e16dc45fae8b20fd31/1678913701435\"\n}\n\n*/
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/test/ligo-robot.qdl b/server-test/src/main/resources/flow-tests/test/ligo-robot.qdl
--- a/server-test/src/main/resources/flow-tests/test/ligo-robot.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/test/ligo-robot.qdl	(date 1683046637136)
@@ -20,7 +20,7 @@
 
 
 */
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 
 cfg.'id'  := 'test:jeff/ligo';
@@ -40,10 +40,10 @@
 rt. := tokens.'refresh_token';
 idt.:= claims();
 ⊨ idt.'sub' ≡ 'ligorobottesting@ligo.org' : 'wrong ID token subject';
-⊨ idt.'iss' ≡ 'https://test.cilogon.org/ligo'; // Check it's in VO
-⊨ idt.'aud' ≡ 'test:jeff/ligo';
-⊨ idt.'uid' ≡ 'ligorobottesting'; // uid must not have trailing domain or LIGO's credmon will lose track
-⊨ idt.'eppn' ≡ 'jeffrey.gaynor@ligo.org'; // eppn should be the same as the person requesting the robot
+⊨ idt.'iss' ≡ 'https://test.cilogon.org/ligo' : 'wrong audience'; // Check it's in VO
+⊨ idt.'aud' ≡ 'test:jeff/ligo' : 'wrong audience';
+⊨ idt.'uid' ≡ 'ligorobottesting' : 'wrong uid'; // uid must not have trailing domain or LIGO's credmon will lose track
+⊨ idt.'eppn' ≡ 'jeffrey.gaynor@ligo.org' : 'wrong EPPN'; // eppn should be the same as the person requesting the robot
 
 ⊨ at.'sub' ≡ 'ligorobottesting@ligo.org' : 'wrong AT subject';
 ⊨ at.'aud' ≡ 'ANY' : 'wrong AT audience';
Index: server-test/src/main/resources/flow-tests/runner.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n// If you want to run an indivdual test, add the next two lines to it or none of the utilities\n// will be found.\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nscript_path(path ~ script_path());\ntest. := args().0;\nsay('**** Flow test suite for OA4MP. ****');\nsay('This will do several local tests for various modes of operation.');\nsay('In each case, read carefully what is on the screen and do what it says.');\nsay('Have your browser handy, since you will need to log in with the requested IDP repeatedly. ');\nsay('This suite does take a bit to run, but it is quite a thorough test. If testing for an OA4MP release,');\nsay('all tests MUST pass');\nsay('There are also client management tests in the cm-tests directory to run.');\nsay('****\\n');\n/*test.:=(path + '/local/') + ['cil1550.qdl',\n                             'file_claims.qdl',\n                             'fnal-0.qdl',\n                             'fnal-1.qdl',\n                             'fnal-2.qdl',\n                             'fnal-3.qdl',\n                             'no_config.qdl',\n                             'test-template.qdl',\n                             'prototype.qdl',\n                             'rtx_refreshes.qdl',\n                             'rtx_exchanges.qdl',\n                             'rtx.qdl',\n                             'scitokens.qdl',\n                             'scitokens2.qdl',\n                             'test_ncsa.qdl',\n                             'test_qdl.qdl',\n                             'vo_test.qdl'];*/\ncounter.'pass' := 0;\ncounter.'fail' := 0;\ncounter.'skipped' := 0;\nfailures. := [];\nwhile[x∈test.][\ntry[\n  rc := script_load(x);\n  if[rc == 'q'][break();]; // exit app\n  if[rc=='s'][counter.'skipped'+=1;continue();]; // skip this test\n  say(''); // blank line for clean display.\n  counter.'pass' += 1;\n  ]catch[\n     say('error running script ' + x);\n     say('error message:' + error_message);\n    counter.'fail' += 1;\n    failures. := failures. ~ x;\n  ];\n];\n\nsay(counter.'pass' + ' passed');\nsay(counter.'fail' + ' failed');\nsay(counter.'skipped' + ' skipped');\nsay('total tests run: ' + reduce(@+, counter.));\n// hand back a nice list\nif[0 < size(failures.)][\n  say('failed tests :' );\n  while[x ∈ failures.][\n     say('   ' + x);\n  ];\n];
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/runner.qdl b/server-test/src/main/resources/flow-tests/runner.qdl
--- a/server-test/src/main/resources/flow-tests/runner.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/runner.qdl	(date 1683043167845)
@@ -1,7 +1,7 @@
 #! /usr/bin/env -S qdl-run
 // If you want to run an indivdual test, add the next two lines to it or none of the utilities
 // will be found.
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 script_path(path ~ script_path());
 test. := args().0;
 say('**** Flow test suite for OA4MP. ****');
@@ -35,17 +35,19 @@
 failures. := [];
 while[x∈test.][
 try[
-  rc := script_load(x);
-  if[rc == 'q'][break();]; // exit app
-  if[rc=='s'][counter.'skipped'+=1;continue();]; // skip this test
-  say(''); // blank line for clean display.
-  counter.'pass' += 1;
-  ]catch[
+     rc := script_load(x);
+     if[rc == 'q'][break();]; // exit app
+     if[rc=='s'][counter.'skipped'+=1;continue();]; // skip this test
+     say(''); // blank line for clean display.
+     counter.'pass' += 1;
+  ]
+catch[
      say('error running script ' + x);
      say('error message:' + error_message);
-    counter.'fail' += 1;
-    failures. := failures. ~ x;
-  ];
+     say('error code:' + error_code);
+     counter.'fail' += 1;
+     failures. := failures. ~ x;
+   ];
 ];
 
 say(counter.'pass' + ' passed');
Index: server-test/src/main/resources/flow-tests/local/scitokens.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   Tests the client with scitokens configuratioin\n   Client config 2022-11-09\n{\"tokens\": {\n   \"access\":  {\n    \"audience\": \"https://localhost/fermilab\",\n    \"lifetime\": 300000,\n    \"templates\": [  {\n     \"aud\": \"https://localhost/fermilab\",\n     \"paths\":    [\n          {\"op\": \"read\", \"path\": \"/home/${sub}\"},\n          {\"op\": \"x.y\",\"path\": \"/abc/def\"},\n          {\"op\": \"write\",\"path\": \"/data/${sub}/cluster\"}\n     ]\n    }],\n    \"type\": \"scitoken\"\n   },\n   \"refresh\":  {\n    \"audience\": \"https://localhost/test\",\n    \"lifetime\": 900000,\n    \"type\": \"refresh\"\n   }\n  }}\n\n*/\npath := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';\nif[path∉script_path()][script_path(path ~ script_path());];\n\ncfg.'id'  := 'localhost:scitokens'; // name of the configuration, not the id\ncfg.'idp'  := 'Github';\ncfg.'file' := '/home/ncsa/dev/csd/config/client-oa2.xml';\ncfg.'description' :=  'Test basic configuration for Scitokens, no scripting.';\ncfg.'flow_type' := 'uri'; // Note to use df you need to set param for the token endpoint\nuser_id := 'http://cilogon.org/serverT/users/21340363'; // id from Github on test.cilogon.org\n\nparams.'authz' :=  {'scope': 'read: x.y: x.z write:'}; // initial request is query\nparams.'token' :=  {'scope': 'read:/foo read:/home/' + user_id  + ' x.y:/abc/def/pqr write:/data/' + user_id + '/cluster/node47'};\n\nexpected_token_scopes. :=  ['read:/home/' + user_id , 'x.y:/abc/def/pqr', 'write:/data/' + user_id + '/cluster/node47'];\nparams.'exchange' :=  {'scope': 'read:/home/'+user_id  + // read\n                                ' write:/home/'+user_id + // write -- wrong, not granted\n                                ' read:/public/lsst/' + user_id + // ok\n                                ' x.y:/abc/def/pqr' + // works since it add component to path\n                                ' x.y:/abc/defpqr'}; // not granted since the path is wrong\n\nexpected_exchange_scopes. := ['read:/home/' + user_id  , // read\n                             'write:/home/' + user_id,\n                             'x.y:/abc/def/pqr',  // works since it add component to path\n                             'x.y:/abc/defpqr',\n                             'x.y:/xyz/qrs'];\n\ndefine[test(tokens., expected_scopes., user_id)][\n    // Define the tests to run after access and refresh.\n    issuer := 'https://localhost:9443/oauth2';\n    at. := tokens.'access_token'.'jwt';\n    s. := tokenize(at.'scope', ' ');\n    rt. := tokens.'refresh_token'.'jwt';\n    ⊨ tokens.'access_token'.'lifetime' - 300000 < 2000 : 'wrong access token lifetime';\n    ⊨ at.'sub' ≡ user_id : 'wrong AT subject';\n    ⊨ at.'iss' ≡ issuer : 'wrong AT issuer';\n    ⊨ at.'aud' ≡ 'https://localhost/fermilab' : 'wrong AT audience';\n    ⊨ ¬is_defined(at.'cid') : 'Still getting cid claim in scitoken'; // regression test. No cid claim\n    ⊨ at.'ver' ≡ 'scitoken:2.0' : 'incorrect scitokens version claim';\n    ⊨ reduce(@∧, expected_scopes. ∈ s.) : 'incorrect AT scopes';\n    ⊨ rt.'aud' ≡ 'https://localhost/test' : 'wrong RT audience';\n    ⊨ tokens.'refresh_token'.'lifetime' - 900000 < 2000 : 'wrong refresh token lifetime';\n];\n\nrc := script_load('driver.qdl', cfg., params.);\nif[rc!='ok'][return(rc);];\n\ntokens. := clc#access();\ntest(tokens., expected_token_scopes., user_id);\nissued_at := claims().'iat';\ntokens. := refresh();\n⊨ issued_at <= claims().'iat' : 'ID token not updated';\ntest(tokens., expected_token_scopes., user_id);\n\nsay('Scitokens test: ok');
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/local/scitokens.qdl b/server-test/src/main/resources/flow-tests/local/scitokens.qdl
--- a/server-test/src/main/resources/flow-tests/local/scitokens.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/local/scitokens.qdl	(date 1683029457664)
@@ -25,7 +25,7 @@
   }}
 
 */
-path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests';
+path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests';
 if[path∉script_path()][script_path(path ~ script_path());];
 
 cfg.'id'  := 'localhost:scitokens'; // name of the configuration, not the id
Index: server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/QDLRuntimeEngine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.uiuc.ncsa.myproxy.oa4mp.qdl.scripting;\n\nimport edu.uiuc.ncsa.myproxy.oa4mp.oauth2.flows.FlowStates2;\nimport edu.uiuc.ncsa.myproxy.oa4mp.oauth2.flows.FlowType;\nimport edu.uiuc.ncsa.myproxy.oa4mp.oauth2.state.ScriptRuntimeEngineFactory;\nimport edu.uiuc.ncsa.myproxy.oa4mp.oauth2.storage.transactions.OA2ServiceTransaction;\nimport edu.uiuc.ncsa.myproxy.oa4mp.oauth2.storage.tx.TXRecord;\nimport edu.uiuc.ncsa.myproxy.oa4mp.qdl.claims.ConfigtoCS;\nimport edu.uiuc.ncsa.oa4mp.delegation.oa2.OA2Errors;\nimport edu.uiuc.ncsa.oa4mp.delegation.oa2.jwt.ScriptRuntimeException;\nimport edu.uiuc.ncsa.oa4mp.delegation.oa2.server.claims.ClaimSource;\nimport edu.uiuc.ncsa.qdl.config.QDLConfigurationLoaderUtils;\nimport edu.uiuc.ncsa.qdl.exceptions.QDLException;\nimport edu.uiuc.ncsa.qdl.exceptions.RaiseErrorException;\nimport edu.uiuc.ncsa.qdl.scripting.Scripts;\nimport edu.uiuc.ncsa.qdl.state.StateUtils;\nimport edu.uiuc.ncsa.qdl.variables.QDLNull;\nimport edu.uiuc.ncsa.qdl.variables.QDLStem;\nimport edu.uiuc.ncsa.qdl.workspace.WorkspaceCommands;\nimport edu.uiuc.ncsa.qdl.xml.XMLUtils;\nimport edu.uiuc.ncsa.security.core.Identifier;\nimport edu.uiuc.ncsa.security.core.exceptions.NFWException;\nimport edu.uiuc.ncsa.security.core.util.DebugUtil;\nimport edu.uiuc.ncsa.security.util.scripting.*;\nimport net.sf.json.JSON;\nimport net.sf.json.JSONObject;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.http.HttpStatus;\n\nimport javax.xml.stream.XMLEventReader;\nimport javax.xml.stream.XMLInputFactory;\nimport javax.xml.stream.XMLOutputFactory;\nimport javax.xml.stream.XMLStreamWriter;\nimport java.io.*;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.zip.GZIPInputStream;\nimport java.util.zip.GZIPOutputStream;\n\nimport static edu.uiuc.ncsa.myproxy.oa4mp.oauth2.flows.FlowType.*;\nimport static edu.uiuc.ncsa.qdl.variables.QDLStem.STEM_INDEX_MARKER;\n\n/**\n * <p>Created by Jeff Gaynor<br>\n * on 2/12/20 at  9:29 AM\n */\npublic class QDLRuntimeEngine extends ScriptRuntimeEngine implements ScriptingConstants {\n    public static String CONFIG_TAG = \"qdl\";\n    public static String SCRIPTS_TAG = \"scripts\";\n\n    public QDLRuntimeEngine(OA2QDLEnvironment qe, OA2ServiceTransaction transaction) {\n        this.qe = qe;\n        init(transaction);\n        setInitialized(false);\n    }\n\n    @Override\n    public OA2State getState() {\n        return (OA2State) state; // only thing it can create\n    }\n\n    public OA2QDLEnvironment getQE() {\n        return qe;\n    }\n\n    public void setQE(OA2QDLEnvironment qe) {\n        this.qe = qe;\n    }\n\n    OA2QDLEnvironment qe;\n\n    /**\n     * The structure of the configuration file (for backwards compatibility) is\n     * <pre>\n     *     {\"config\":[comments],\n     *       \"qdl\" : {\"scripts\" : [{\"script\":{...}}, {\"script\":{...}},...]}\n     *      }\n     *\n     * </pre>\n     * The assumption is that this is handed the qdl config object and can start pulling it apart at\n     * that level.\n     */\n    protected void init(OA2ServiceTransaction transaction) {\n        state = (OA2State) StateUtils.newInstance();\n        if (transaction.hasScriptState()) {\n            try {\n                deserializeState(transaction.getScriptState());\n            } catch (Throwable t) {\n                DebugUtil.trace(this, \"Could not deserialize stored transaction state:\" + t.getMessage());\n                if (getState().getOa2se() != null) {\n                    getState().getOa2se().getMyLogger().warn(\"Could not deserialize stored transaction state:\" + t.getMessage());\n                }\n            }\n        }\n        state.setServerMode(qe.isServerModeOn());\n        // next line allows for debugging individual clients.\n        if (!qe.isRestrictedIO()) {\n            state.setRestrictedIO(false);\n        } else {\n            if (transaction.getClient().isDebugOn()) {\n                state.setRestrictedIO(false);\n            } else {\n                state.setRestrictedIO(true);\n            }\n        }\n        //  state.setRestrictedIO(qe.isRestrictedIO() || transaction.getClient().isDebugOn());\n        state.getOpEvaluator().setNumericDigits(qe.getNumericDigits());\n        state.setScriptPaths(qe.getScriptPath());  // Be sure script paths are read.\n        state.setAssertionsOn(qe.isAssertionsOn());\n        if (qe != null && qe.isEnabled()) {\n            try {\n                QDLConfigurationLoaderUtils.setupVFS(qe, state);\n                QDLConfigurationLoaderUtils.setupModules(qe, state);\n                QDLConfigurationLoaderUtils.runBootScript(qe, state);\n            } catch (Throwable throwable) {\n                throwable.printStackTrace();\n            }\n        }\n    }\n\n    @Override\n    public String serializeState() {\n        try {\n            StringWriter w = new StringWriter();\n            XMLOutputFactory xof = XMLOutputFactory.newInstance();\n            XMLStreamWriter xsw = xof.createXMLStreamWriter(w);\n            // Easiest way still is to make a baby workspace and save it...\n            WorkspaceCommands workspaceCommands = new WorkspaceCommands();\n            workspaceCommands.setState(state);\n            workspaceCommands.toXML(xsw);\n\n\n            String xml2 = XMLUtils.prettyPrint(w.toString()); // We do this because whitespace matters. This controls it.\n            //       System.out.println(getClass().getSimpleName() + \":\" + xml2);\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            GZIPOutputStream gzipOutputStream = new GZIPOutputStream(baos);\n            gzipOutputStream.write(xml2.getBytes(\"UTF-8\"));\n            gzipOutputStream.flush();\n            gzipOutputStream.close();\n            xsw.close();\n            return Base64.encodeBase64String(baos.toByteArray());\n        } catch (Throwable e) {\n            e.printStackTrace();\n            throw new QDLException(\"Error: could not serialize the state:\" + e.getMessage(), e);\n        }\n    }\n\n    OA2State state;\n\n    protected void deserializeStateOLD(String rawState) {\n        if (rawState == null || rawState.isEmpty()) return;\n        try {\n            byte[] xx = Base64.decodeBase64(rawState);\n            ByteArrayInputStream bais = new ByteArrayInputStream(xx);\n            // Reconstruct the XML as a string, preserving whitespace.\n            GZIPInputStream gzipInputStream = new GZIPInputStream(bais, 65536);\n            Reader r = new InputStreamReader(gzipInputStream);\n            XMLInputFactory xmlif = XMLInputFactory.newInstance();\n            XMLEventReader xer = xmlif.createXMLEventReader(r);\n            // Moar debug, if using the string, replace preceeding line with this.\n            // XMLEventReader xer = xmlif.createXMLEventReader(reader);\n            // state = (OA2State) StateUtils.newInstance();\n            state.fromXML(xer, null); // No XProperties in serialization.\n            xer.close();\n        } catch (Throwable e) {\n            DebugUtil.trace(this, \"error deserializing state\", e);\n            if (e instanceof RuntimeException) {\n                throw (RuntimeException) e;\n            }\n            throw new QDLException(\"Error deserializing state\", e);\n        }\n    }\n\n    @Override\n    public void deserializeState(String rawState) {\n        if (rawState == null || rawState.isEmpty()) return;\n        try {\n            byte[] xx = Base64.decodeBase64(rawState);\n            ByteArrayInputStream bais = new ByteArrayInputStream(xx);\n            // Reconstruct the XML as a string, preserving whitespace.\n            GZIPInputStream gzipInputStream = new GZIPInputStream(bais, 65536);\n            Reader r = new InputStreamReader(gzipInputStream);\n\n/*\n            Debug stuff to recreate the XML exactly and print it out. Otherwise it is\n            squirreled away inside a gzip stream someplace.\n*/\n/*\n            BufferedReader br = new BufferedReader(r);\n            StringBuffer stringBuffer = new StringBuffer();\n            String lineIn = br.readLine();\n            lineIn = lineIn.replace(\"?><\", \"?>\\n<\"); // issue with whitespace?\n            while(lineIn != null){\n                stringBuffer.append(lineIn + \"\\n\");\n                System.out.println(lineIn);\n                lineIn = br.readLine();\n            }\n            DebugUtil.trace(this, \"De-zipped XML:\\n\" + stringBuffer.toString());\n            StringReader reader = new StringReader(stringBuffer.toString());\n            */\n\n            XMLInputFactory xmlif = XMLInputFactory.newInstance();\n            XMLEventReader xer = xmlif.createXMLEventReader(r);\n            try {\n                WorkspaceCommands workspaceCommands = new WorkspaceCommands();\n                workspaceCommands.setDebugOn(true);\n                workspaceCommands.fromXML(xer, false);\n                state = (OA2State) workspaceCommands.getInterpreter().getState();\n            } catch (Throwable t) {\n                // That didn't work. Try it in old format.\n                deserializeStateOLD(rawState);\n            }\n        } catch (Throwable e) {\n            DebugUtil.trace(this, \"error deserializing state\", e);\n            if (e instanceof RuntimeException) {\n                throw (RuntimeException) e;\n            }\n            throw new QDLException(\"Error deserializing state\", e);\n        }\n    }\n\n    // Idiom. If no scripts at all, then just return null;\n    protected List<ScriptInterface> getScript(String phase) {\n        if (getScriptSet() == null) return null;\n        return getScriptSet().get(Scripts.EXEC_PHASE, phase);\n    }\n\n\n    protected List<ScriptInterface> getServerScript(String phase) {\n        if (getQE().getServerScripts() == null || getQE().getServerScripts().isEmpty()) {\n            return null;\n        }\n        return getQE().getServerScripts().get(Scripts.EXEC_PHASE, phase);\n    }\n\n\n    @Override\n    public ScriptRunResponse run(ScriptRunRequest request) {\n        List<ScriptInterface> scripts = getScript(request.getAction());\n        if (scripts == null || scripts.isEmpty()) {\n            return noOpSRR();\n        }\n        createSRRequest(request);\n        try {\n            for (ScriptInterface s : scripts) {\n                s.execute(state);\n            }\n        } catch (RaiseErrorException rex) {\n            // Allow for throwing sys_err as a regular error, rather than having specialized machinery\n            processSRX(rex);\n        }\n        return createSRResponse();\n    }\n\n    void processSRX(RaiseErrorException raiseErrorException) {\n        if (raiseErrorException.getErrorCode() == QDLRuntimeEngine.OA4MP_ERROR_CODE) {\n            QDLStem sysErr = raiseErrorException.getState();\n            // In OAuth this is the error_description\n            //String message = sysErr.getString(SYS_ERR_MESSAGE);\n            String message = raiseErrorException.getMessage();\n            // in OAuth this is the error\n            String requestedType = sysErr.containsKey(SYS_ERR_ERROR_TYPE) ? sysErr.getString(SYS_ERR_ERROR_TYPE) : OA2Errors.ACCESS_DENIED;\n            // In OAuth this is the HTTP status code\n            int httpStatus = sysErr.containsKey(SYS_ERR_HTTP_STATUS_CODE) ? sysErr.getLong(SYS_ERR_HTTP_STATUS_CODE).intValue() : HttpStatus.SC_UNAUTHORIZED;\n            int errorCode = sysErr.containsKey(SYS_ERR_CODE) ? sysErr.getLong(SYS_ERR_CODE).intValue() : -1; // For CILogon , actually\n            URI errorURI = sysErr.containsKey(SYS_ERR_ERROR_URI) ? URI.create(sysErr.getString(SYS_ERR_ERROR_URI)) : null;\n            // If the status is 302, then this is the redirect for the user's browser.\n            // CIL-1342, since error_uri alone might conflict with the OAuth2 spec, we add another one\n            // that allows differentiating the error URI as something not in the spec., E.g.,\n            // A user starts a flow, but at log in they are not found to be registered. Nothing in the OAuth\n            // spec about what to do, but one would expect a redirect to some page where they can register.\n            // The custom_error_uri would be used for that and would tell the consumer of this error to not\n            // just try to use the standard OAuth error handling (call to callback_uri) to handle this.\n            URI customErrorURI = sysErr.containsKey(SYS_ERR_CUSTOM_ERROR_URI) ? URI.create(sysErr.getString(SYS_ERR_CUSTOM_ERROR_URI)) : null;\n            ScriptRuntimeException scriptRuntimeException = new ScriptRuntimeException(message == null ? \"(no message)\" : message);\n            scriptRuntimeException.setCode(errorCode);\n            scriptRuntimeException.setErrorURI(errorURI);\n            scriptRuntimeException.setCustomErrorURI(customErrorURI);\n            if(httpStatus == -1 && customErrorURI != null){\n                scriptRuntimeException.setHttpStatus(HttpStatus.SC_MOVED_TEMPORARILY); // force the redirect\n            }else{\n                scriptRuntimeException.setHttpStatus(httpStatus);\n            }\n            scriptRuntimeException.setRequestedType(requestedType);\n            throw scriptRuntimeException;\n        }\n    }\n\n    /*\n    Note that these are the names of the variable in the QDL symbol table and since they are stems\n    they must end with periods.\n     */\n    public static String SYS_ERR_VAR = \"sys_err\" + STEM_INDEX_MARKER;\n    public static String SYS_ERR_OK = \"ok\";\n    public static String SYS_ERR_MESSAGE = \"message\";\n    public static String SYS_ERR_ERROR_TYPE = \"error_type\";\n    public static String SYS_ERR_ERROR_URI = \"error_uri\";\n    public static String SYS_ERR_CUSTOM_ERROR_URI = \"custom_error_uri\";\n    public static String SYS_ERR_HTTP_STATUS_CODE = \"status\";\n    public static String SYS_ERR_CODE = \"code\";\n    public static String FLOW_STATE_VAR = \"flow_states\" + STEM_INDEX_MARKER;\n    public static String CLAIMS_VAR = \"claims\" + STEM_INDEX_MARKER;\n    public static String PROXY_CLAIMS_VAR = \"proxy_claims\" + STEM_INDEX_MARKER;\n    public static String ACCESS_TOKEN_VAR = \"access_token\" + STEM_INDEX_MARKER;\n    public static String REFRESH_TOKEN_VAR = \"refresh_token\" + STEM_INDEX_MARKER;\n    public static String SCOPES_VAR = \"scopes\" + STEM_INDEX_MARKER;\n    public static String EXTENDED_ATTRIBUTES_VAR = \"xas\" + STEM_INDEX_MARKER;\n    public static String AUDIENCE_VAR = \"audience\" + STEM_INDEX_MARKER;\n    public static String TX_SCOPES_VAR = \"tx_scopes\" + STEM_INDEX_MARKER;\n    public static String TX_AUDIENCE_VAR = \"tx_audience\" + STEM_INDEX_MARKER;\n    public static String TX_RESOURCE_VAR = \"tx_resource\" + STEM_INDEX_MARKER;\n    public static String CLAIM_SOURCES_VAR = \"claim_sources\" + STEM_INDEX_MARKER;\n    public static String ACCESS_CONTROL = \"access_control\" + STEM_INDEX_MARKER;\n\n    public static Long OA4MP_ERROR_CODE = 1000L; // reserved error code by OA4MP.\n    public static String OA4MP_ERROR_CODE_NAME = \"oa4mp_error\";\n\n    /**\n     * This injects the values in the request in to the current state so they are available.\n     * <h3>What this does</h3>\n     * <ul>\n     *     <li>Converts Java to QDL and injects into the {@link OA2State}.</li>\n     *     <li>This converts everything, claims, sources, access tokens, refresg token, TX objects, etc. (if present)</li>\n     *     <li>All objects are present in the resulting {@link OA2State} even\n     *     if they are empty or trivial.</li>\n     * </ul>\n     *\n     * @param req\n     */\n    protected void createSRRequest(ScriptRunRequest req) {\n\n        state.setValue(Scripts.EXEC_PHASE, req.getAction()); // set what is being executed\n        QDLStem sysErr = new QDLStem();\n        // Set sys_err.ok  here so scripts don't have to keep checking if it is defined.\n        // Old script error handling by setting a global variable\n        sysErr.put(SYS_ERR_OK, Boolean.TRUE);\n        state.setValue(SYS_ERR_VAR, sysErr);\n        // New way, raise an error with this reserved error code.\n        state.setValue(OA4MP_ERROR_CODE_NAME, OA4MP_ERROR_CODE);\n\n        FlowStates2 flowStates = (FlowStates2) req.getArgs().get(SRE_REQ_FLOW_STATES);\n        state.setValue(FLOW_STATE_VAR, toStem(flowStates));\n\n        JSONObject claims = (JSONObject) req.getArgs().get(SRE_REQ_CLAIMS);\n        QDLStem claimStem = new QDLStem();\n        claimStem.fromJSON(claims);\n        state.setValue(CLAIMS_VAR, claimStem);\n\n        JSONObject proxyClaims = (JSONObject) req.getArgs().get(SRE_REQ_PROXY_CLAIMS);\n        QDLStem proxyClaimsStem = new QDLStem();\n        proxyClaimsStem.fromJSON(proxyClaims);\n        state.setValue(PROXY_CLAIMS_VAR, proxyClaimsStem);\n\n        if (req.getArgs().containsKey(SRE_REQ_ACCESS_TOKEN)) {\n            JSONObject at = (JSONObject) req.getArgs().get(SRE_REQ_ACCESS_TOKEN);\n            QDLStem atStem = new QDLStem();\n            atStem.fromJSON(at);\n            state.setValue(ACCESS_TOKEN_VAR, atStem);\n\n        }\n        if (req.getArgs().containsKey(SRE_REQ_REFRESH_TOKEN)) {\n            JSONObject at = (JSONObject) req.getArgs().get(SRE_REQ_REFRESH_TOKEN);\n            QDLStem atStem = new QDLStem();\n            atStem.fromJSON(at);\n            state.setValue(REFRESH_TOKEN_VAR, atStem);\n\n        }\n        List<String> scopes = (List<String>) req.getArgs().get(SRE_REQ_SCOPES);\n        if (scopes != null && !scopes.isEmpty()) {\n            // It is possible for a minimal OAuth 2 client to have no scopes.\n            state.setValue(SCOPES_VAR, listToStem(scopes));\n        } else {\n            state.setValue(SCOPES_VAR, new QDLStem());\n\n        }\n\n        List<String> audience = (List<String>) req.getArgs().get(SRE_REQ_AUDIENCE);\n        if (audience != null && !audience.isEmpty()) {\n            state.setValue(AUDIENCE_VAR, listToStem(audience));\n        } else {\n            state.setValue(AUDIENCE_VAR, new QDLStem());\n        }\n\n        Object eas = req.getArgs().get(SRE_REQ_EXTENDED_ATTRIBUTES);\n        if (eas != null && (eas instanceof JSONObject)) {\n            QDLStem eaStem = new QDLStem();\n            eaStem.fromJSON((JSONObject) eas);\n            state.setValue(EXTENDED_ATTRIBUTES_VAR, eaStem);\n        } else {\n            state.setValue(EXTENDED_ATTRIBUTES_VAR, new QDLStem());\n        }\n\n        QDLStem sources = new QDLStem();\n        int i = 0;\n        // not every handler or request has claim sources.\n        // Some handlers inject them later because they need more state than is available.\n        if (req.getArgs().containsKey(SRE_REQ_CLAIM_SOURCES)) {\n            for (ClaimSource source : (List<ClaimSource>) req.getArgs().get(SRE_REQ_CLAIM_SOURCES)) {\n                if (source.hasConfiguration()) {\n                    //sources.put(i + \".\", ConfigtoCS.convert(source));\n                    sources.put(i + \".\", source.toQDL());\n                    i++;\n                }\n            }\n        }\n        state.setValue(CLAIM_SOURCES_VAR, sources);\n        // Now do access control\n        // gives variable\n        // access_control.\n        // access_control.client_id == id of calling client\n        // access_control.admins. == list of administrators for this client.\n        QDLStem acl = new QDLStem();\n        // There is always a client id.\n        acl.put(\"client_id\", state.getClientID().toString());\n        // Convert to a list of strings. List of admins may be empty.\n        ArrayList<Object> adminIDs = new ArrayList<>();\n        for (Identifier id : state.getAdminIDs()) {\n            adminIDs.add(id.toString());\n        }\n        QDLStem adminStem = new QDLStem();\n        adminStem.addList(adminIDs);\n        acl.put(\"admins.\", adminStem);\n        state.setValue(ACCESS_CONTROL, acl);\n        // these are always defined.\n        QDLStem txScopes = new QDLStem();\n        QDLStem txRes = new QDLStem();\n        QDLStem txAud = new QDLStem();\n        if (state.getTxRecord() != null) {\n            TXRecord txr = state.getTxRecord();\n            if (txr.hasScopes()) {\n                txScopes.addList(txr.getScopes());\n            }\n            if (txr.hasAudience()) {\n                txAud.addList(txr.getAudience());\n            }\n            if (txr.hasResources()) {\n                for (URI uri : txr.getResource()) {\n                    txRes.listAdd(uri.toString());\n                }\n            }\n        }\n        state.setValue(TX_SCOPES_VAR, txScopes);\n        state.setValue(TX_AUDIENCE_VAR, txAud);\n        state.setValue(TX_RESOURCE_VAR, txRes);\n\n\n    }\n\n    public QDLStem listToStem(List<String> scopes) {\n        QDLStem scopeStem = new QDLStem();\n        for (int i = 0; i < scopes.size(); i++) {\n            String index = Integer.toString(i);\n            scopeStem.put(index, scopes.get(i));\n        }\n        return scopeStem;\n    }\n\n    public List<String> stemToList(QDLStem arg) {\n        ArrayList<String> scopes = new ArrayList<>();\n        for (Object key : arg.keySet()) {\n            scopes.add(String.valueOf(arg.get(key)));\n        }\n        return scopes;\n    }\n\n    public ConfigtoCS getConfigToCS() {\n        if(configToCS == null){\n            configToCS = new ConfigtoCS();\n        }\n        return configToCS;\n    }\n\n    public void setConfigToCS(ConfigtoCS configToCS) {\n        this.configToCS = configToCS;\n    }\n\n    protected ConfigtoCS configToCS;\n    protected List<ClaimSource> toSources(QDLStem QDLStem) {\n        ArrayList<ClaimSource> claimSources = new ArrayList<>();\n\n        for (int i = 0; i < QDLStem.size(); i++) {\n            // String index = Integer.toString(i) + \".\"; // make sure its a stem\n            // if they added extra stuff, skip it. \n            if (QDLStem.containsKey((long) i)) {\n                QDLStem cfg = (QDLStem) QDLStem.get((long) i);\n                claimSources.add(getConfigToCS().convert(cfg, state, state.getOa2se()));\n            }\n        }\n        return claimSources;\n    }\n\n    public QDLStem toStem(FlowStates2 flowStates) {\n        QDLStem QDLStem = new QDLStem();\n        QDLStem.put(getGTName(ACCEPT_REQUESTS), flowStates.acceptRequests);\n        QDLStem.put(getGTName(ACCESS_TOKEN), flowStates.accessToken);\n        QDLStem.put(getGTName(GET_CERT), flowStates.getCert);\n        QDLStem.put(getGTName(GET_CLAIMS), flowStates.getClaims);\n        QDLStem.put(getGTName(ID_TOKEN), flowStates.idToken);\n        QDLStem.put(getGTName(REFRESH_TOKEN), flowStates.refreshToken);\n        QDLStem.put(getGTName(USER_INFO), flowStates.userInfo);\n        QDLStem.put(getGTName(AT_DO_TEMPLATES), flowStates.at_do_templates);\n\n        return QDLStem;\n    }\n\n    protected String getGTName(FlowType type) {\n        return type.getValue().substring(1); // chop off lead \"$\"\n    }\n\n    public FlowStates2 toFS(QDLStem stem) {\n        FlowStates2 f = new FlowStates2();\n        f.acceptRequests = stem.getBoolean(getGTName(ACCEPT_REQUESTS));\n        f.accessToken = stem.getBoolean(getGTName(ACCESS_TOKEN));\n        f.getCert = stem.getBoolean(getGTName(GET_CERT));\n        f.getClaims = stem.getBoolean(getGTName(GET_CLAIMS));\n        f.idToken = stem.getBoolean(getGTName(ID_TOKEN));\n        f.refreshToken = stem.getBoolean(getGTName(REFRESH_TOKEN));\n        f.userInfo = stem.getBoolean(getGTName(USER_INFO));\n        f.at_do_templates = stem.getBoolean(getGTName(AT_DO_TEMPLATES));\n        return f;\n    }\n\n\n    protected ScriptRunResponse noOpSRR() {\n        return ScriptRuntimeEngineFactory.NoOpRuntimeEngine.srr;\n    }\n\n    /**\n     * <b>After</b> QDL has run, convert the response into something Java can understand.\n     * <h3>What this does</h3>\n     * <ul>\n     *     <li>Checks for exceptions thrown in QDL and propagates them</li>\n     *     <li>Converts stems to Java and puts in the respone map of the {@link ScriptRunResponse}</li>\n     *     <li>Removes various things from the {@link OA2State} object so that they are not serialized</li>\n     * </ul>\n     *\n     * @return\n     */\n    protected ScriptRunResponse createSRResponse() {\n        Object x = state.getValue(SYS_ERR_VAR);\n        if (x != null && x instanceof QDLStem) {\n            QDLStem sysErr = (QDLStem) x;\n            if (sysErr.containsKey(SYS_ERR_OK) && !sysErr.getBoolean(SYS_ERR_OK)) {\n                // In OAuth this is the error_description\n                String message = sysErr.getString(SYS_ERR_MESSAGE);\n                ScriptRuntimeException scriptRuntimeException = new ScriptRuntimeException(message == null ? \"(no message)\" : message);\n                // in OAuth this is the error\n                if (sysErr.containsKey(SYS_ERR_ERROR_TYPE)) {\n                    scriptRuntimeException.setRequestedType(sysErr.getString(SYS_ERR_ERROR_TYPE));\n                } else {\n                    scriptRuntimeException.setRequestedType(OA2Errors.ACCESS_DENIED);\n                }\n                // In OAuth this is the HTTP status code\n                if (sysErr.containsKey(SYS_ERR_HTTP_STATUS_CODE)) {\n                    scriptRuntimeException.setHttpStatus(sysErr.getLong(SYS_ERR_HTTP_STATUS_CODE).intValue());\n                } else {\n                    scriptRuntimeException.setHttpStatus(HttpStatus.SC_UNAUTHORIZED);\n                }\n                if (sysErr.containsKey(SYS_ERR_CODE)) {\n                    scriptRuntimeException.setCode(sysErr.getLong(SYS_ERR_CODE).intValue());\n                    // This has a default value of -1 if uninitialized.\n                }\n\n                // If the status is 302, then this is the redirect for the user's browser.\n                if (sysErr.containsKey(SYS_ERR_ERROR_URI)) {\n                    scriptRuntimeException.setErrorURI(URI.create(sysErr.getString(SYS_ERR_ERROR_URI)));\n                }\n                // CIL-1342, since error_uri alone might conflict with the OAuth2 spec, we add another one\n                // that allows differentiating the error URI as something not in the spec., E.g.,\n                // A user starts a flow, but at log in they are not found to be registered. Nothing in the OAuth\n                // spec about what to do, but one would expect a redirect to some page where they can register.\n                // The custom_error_uri would be used for that and would tell the consumer of this error to not\n                // just try to use the standard OAuth error handling (call to callback_uri) to handle this.\n                if (sysErr.containsKey(SYS_ERR_CUSTOM_ERROR_URI)) {\n                    scriptRuntimeException.setCustomErrorURI(URI.create(sysErr.getString(SYS_ERR_CUSTOM_ERROR_URI)));\n                }\n                throw scriptRuntimeException;\n            }\n        }\n        Map respMap = new HashMap();\n        QDLStem flowStem = (QDLStem) state.getValue(FLOW_STATE_VAR);\n\n        respMap.put(SRE_REQ_FLOW_STATES, toFS(flowStem));\n        respMap.put(SRE_REQ_CLAIM_SOURCES, toSources((QDLStem) state.getValue(CLAIM_SOURCES_VAR)));\n        respMap.put(SRE_REQ_SCOPES, stemToList((QDLStem) state.getValue(SCOPES_VAR)));\n        respMap.put(SRE_REQ_EXTENDED_ATTRIBUTES, ((QDLStem) state.getValue(EXTENDED_ATTRIBUTES_VAR)).toJSON());\n        if (state.getValue(ACCESS_TOKEN_VAR) != null) {\n            respMap.put(SRE_REQ_ACCESS_TOKEN, ((QDLStem) state.getValue(ACCESS_TOKEN_VAR)).toJSON());\n        }\n        if (state.getValue(REFRESH_TOKEN_VAR) != null) {\n            respMap.put(SRE_REQ_REFRESH_TOKEN, ((QDLStem) state.getValue(REFRESH_TOKEN_VAR)).toJSON());\n        }\n        respMap.put(SRE_REQ_AUDIENCE, stemToList((QDLStem) state.getValue(AUDIENCE_VAR)));\n        Object z = state.getValue(CLAIMS_VAR);\n        QDLStem stemClaims;\n        if (z instanceof QDLNull) {\n            stemClaims = new QDLStem();\n        } else {\n            stemClaims = (QDLStem) state.getValue(CLAIMS_VAR);\n        }\n        JSON j = stemClaims.toJSON();\n        if (j.isArray()) {\n            throw new NFWException(\"Internal error: The returned claims object was not a JSON Object.\");\n        }\n        respMap.put(SRE_REQ_CLAIMS, j);\n\n        DebugUtil.trace(this, \"QDL updates response map:\" + j.toString(1));\n\n        /*\n        Now for token exchange stuff\n         */\n        if (state.isDefined(TX_SCOPES_VAR)) {\n            respMap.put(SRE_TX_REQ_SCOPES, stemToList((QDLStem) state.getValue(TX_SCOPES_VAR)));\n        }\n        if (state.isDefined(TX_AUDIENCE_VAR)) {\n            respMap.put(SRE_TX_REQ_AUDIENCE, stemToList((QDLStem) state.getValue(TX_AUDIENCE_VAR)));\n        }\n        if (state.isDefined(TX_RESOURCE_VAR)) {\n            List<String> res = stemToList((QDLStem) state.getValue(TX_RESOURCE_VAR));\n\n            ArrayList<URI> zz = new ArrayList<>();\n            for (String r : res) {\n                try {\n                    zz.add(URI.create(r));\n                } catch (Throwable t) {\n                    getState().getLogger().warn(\"Illegal uri in stem conversion for token exchange resources: \\\"\" + r + \"\\\". Skipping\");\n                }\n\n            }\n            respMap.put(SRE_TX_REQ_RESOURCES, zz);\n        }\n        try {\n            // Don't serialize anything the system manages since that may cause confusion later.\n            // I.e. This renders all of these variables as transient vis a vis serialization.\n            cleanUpState(new String[]{\n                    SYS_ERR_VAR,\n                    TX_SCOPES_VAR,\n                    TX_AUDIENCE_VAR,\n                    TX_RESOURCE_VAR,\n                    CLAIMS_VAR,\n                    PROXY_CLAIMS_VAR,\n                    CLAIM_SOURCES_VAR,\n                    FLOW_STATE_VAR,\n                    SCOPES_VAR,\n                    EXTENDED_ATTRIBUTES_VAR,\n                    ACCESS_TOKEN_VAR,\n                    REFRESH_TOKEN_VAR,\n                    AUDIENCE_VAR,\n                    Scripts.EXEC_PHASE\n\n            });\n\n            state.getTransaction().setScriptState(serializeState());\n        } catch (Throwable t) {\n            DebugUtil.trace(this, \"Could not serialize stored transaction state:\" + t.getMessage());\n            if (getState().getOa2se() != null) {\n                getState().getOa2se().getMyLogger().warn(\"Could not serialize stored transaction state:\" + t.getMessage());\n            }\n        }\n        //runResponse.\n        return new ScriptRunResponse(\"ok\", respMap, ScriptRunResponse.RC_OK);\n    }\n\n    protected void cleanUpState(String[] varNames) {\n        for (String varName : varNames) {\n            if (state.isDefined(varName)) {\n                state.remove(varName);\n            }\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/QDLRuntimeEngine.java b/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/QDLRuntimeEngine.java
--- a/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/QDLRuntimeEngine.java	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/QDLRuntimeEngine.java	(date 1682687540315)
@@ -59,7 +59,7 @@
 
     @Override
     public OA2State getState() {
-        return (OA2State) state; // only thing it can create
+        return  state; // only thing it can create
     }
 
     public OA2QDLEnvironment getQE() {
@@ -85,6 +85,8 @@
      */
     protected void init(OA2ServiceTransaction transaction) {
         state = (OA2State) StateUtils.newInstance();
+        // so default namespace calls resolve right. resolves https://github.com/ncsa/qdl/issues/24
+        state.setRootState(state);
         if (transaction.hasScriptState()) {
             try {
                 deserializeState(transaction.getScriptState());
@@ -96,12 +98,14 @@
             }
         }
         state.setServerMode(qe.isServerModeOn());
-        // next line allows for debugging individual clients.
+        // next lines allow for debugging individual clients.
         if (!qe.isRestrictedIO()) {
             state.setRestrictedIO(false);
         } else {
             if (transaction.getClient().isDebugOn()) {
                 state.setRestrictedIO(false);
+                // Fix for https://github.com/ncsa/oa4mp/issues/92
+                state.getDebugUtil().setDebugLevel(DebugUtil.DEBUG_LEVEL_TRACE);
             } else {
                 state.setRestrictedIO(true);
             }
Index: qdl/buildNumber.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#maven.buildNumber.plugin properties file\n#Thu Apr 27 12:18:59 CDT 2023\nbuildNumber\\\\d*=8603\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/qdl/buildNumber.properties b/qdl/buildNumber.properties
--- a/qdl/buildNumber.properties	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/qdl/buildNumber.properties	(date 1683153511133)
@@ -1,3 +1,3 @@
 #maven.buildNumber.plugin properties file
-#Thu Apr 27 12:18:59 CDT 2023
-buildNumber\\d*=8603
+#Wed May 03 17:38:31 CDT 2023
+buildNumber\\d*=8633
Index: server-test/src/main/resources/utils/check_dir.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n\n/*\n   A file to check a directory and its sub-directories for syntax errors.\n   When to run: After a QDL lexer/parser change against the release scripts\n   Why to run: It is possible that changes may break parsing. Always checks\n*/\nroot_dir := args().0; // Where to start\nroot_dir := root_dir + ('.*/'=~root_dir?'':'/');\n dirs(x.)->'.*/'=~x.⌆x.; // gets all the files in a list that are directories\nfiles(x.)->(!'.*/'=~x.)⌆x.; // gets all the files in a list that are not directories\n\nall_files. := dir(root_dir);\ndir_list. := dirs(all_files.);\nfile_list. := files(all_files.);\ndebugger(1);\ndebugger(1,'starting to process ' + root_dir + ' for ' + script_name());\nwhile[f ∈ file_list.]\n  do[\n     current_file := root_dir + f;\n     if['.*\\\\.qdl'=~ current_file]\n      then[\n        try[check_syntax(file_read(root_dir+f));]\n        catch[say('error in \\'' + current_file + '\\':' + error_message);];\n      ];\n  ]; //end while\n// Run against all the dirs.\nwhile[d∈dir_list.]\n   do[\n       script_run('./check_dir.qdl', root_dir + d);\n     ]; //end while
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/utils/check_dir.qdl b/server-test/src/main/resources/utils/check_dir.qdl
--- a/server-test/src/main/resources/utils/check_dir.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/utils/check_dir.qdl	(date 1683116918182)
@@ -3,8 +3,32 @@
 /*
    A file to check a directory and its sub-directories for syntax errors.
    When to run: After a QDL lexer/parser change against the release scripts
-   Why to run: It is possible that changes may break parsing. Always checks
+   Why to run: It is possible that changes may break parsing. Always check.
+   
+   How to read the ouput. If you run it, a typical error output would look
+   like
+
+   error in '/var/local/cilogon_service/oa4mp-server/qdl/foo.qdl':extraneous input ''' expecting {<EOF>, '{', '(', '!', '¬', ...
+            ----------------------------------------------------  ---------------- --- --------------...
+                                ^                                        ^          ^         ^
+                                |                                        |          |         |
+                                +- The file                              |          |         +- Alternatives that could have followed it instead.
+                                                                         |          |
+                                                                         |          +-the bad character, here an extra single quote
+                                                                         |
+                                                                         +- the error
+
+
 */
+  if[(0 == size(args())) || ('--help' ∈ args()) ]
+then[
+    say('check_dir directory - recursively check a directory for syntax of');
+    say('QDL files. Each file that fails has a message printed out.');
+    say('E.g. To check all QDL files on the server\n\n');
+    say('./check_dir.qdl /var/local/cilogon_service/oa4mp-server/qdl');
+    say('\n\n(A simple return with no output means everything passed).');
+    return();
+   ];
 root_dir := args().0; // Where to start
 root_dir := root_dir + ('.*/'=~root_dir?'':'/');
  dirs(x.)->'.*/'=~x.⌆x.; // gets all the files in a list that are directories
Index: server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/QDLJSONConfigUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.uiuc.ncsa.myproxy.oa4mp.qdl.scripting;\n\n\nimport edu.uiuc.ncsa.qdl.evaluate.AbstractEvaluator;\nimport edu.uiuc.ncsa.qdl.scripting.JSONScriptUtil;\nimport edu.uiuc.ncsa.qdl.scripting.QDLScript;\nimport edu.uiuc.ncsa.qdl.scripting.Scripts;\nimport edu.uiuc.ncsa.qdl.util.QDLVersion;\nimport edu.uiuc.ncsa.qdl.vfs.FileEntries;\nimport edu.uiuc.ncsa.security.core.configuration.XProperties;\nimport edu.uiuc.ncsa.security.core.util.FileUtil;\nimport edu.uiuc.ncsa.security.core.util.Iso8601;\nimport edu.uiuc.ncsa.security.util.scripting.ScriptSet;\nimport edu.uiuc.ncsa.security.util.scripting.ScriptingConstants;\nimport net.sf.json.JSONArray;\nimport net.sf.json.JSONObject;\n\nimport java.io.File;\nimport java.io.StringReader;\nimport java.util.Date;\n\nimport static edu.uiuc.ncsa.myproxy.oa4mp.qdl.scripting.QDLRuntimeEngine.CONFIG_TAG;\nimport static edu.uiuc.ncsa.myproxy.oa4mp.qdl.scripting.QDLRuntimeEngine.SCRIPTS_TAG;\nimport static edu.uiuc.ncsa.qdl.scripting.Scripts.*;\n\n/**\n * <p>Created by Jeff Gaynor<br>\n * on 2/12/20 at  3:21 PM\n */\n/*\n  NOTE This is older. The new way to do this is documented in qdl_server_scripts.odt\n  and the utility edu.uiuc.ncsa.qdl.scripting.AnotherJSONUtil\n  This will be deprecated and removed at some point!\n */\npublic class QDLJSONConfigUtil implements ScriptingConstants {\n    /**\n     * Takes a list\n     *  of @link QDLScript} objects and turns it in to a QDL configuration,\n     *  i.e. this gets  <br/><br/>\n     * {script, script,...}<br/><br/>\n     * and returns a new JSON object consisting of<br/>\n     * <pre>\n     * {\"qdl\":{\"scripts\":[...]}}\n     * </pre>\n     * turning the list of scripts in to the JSON array.\n     *\n     * @param scriptSet\n     * @return\n     */\n    public static JSONObject scriptSetToJSON(ScriptSet<? extends QDLScript> scriptSet) {\n        JSONObject scripts = JSONScriptUtil.createConfig();\n        for (QDLScript s : scriptSet.getScripts()) {\n            JSONScriptUtil.addScript(scripts, s);\n        }\n        JSONObject config = new JSONObject();\n        config.put(CONFIG_TAG, scripts);\n        return config;\n    }\n\n    /**\n     * This assumes that the configuration is the scripts tag, not the entire configuration.\n     * I.e. the thing passed in is the entry here:\n     * <pre>\n     *     {\"qdl\":{\"scripts\":[...]}}\n     * </pre>\n     * This returns the [...] array of script objects as a list of {@link QDLScript} objects\n     *\n     * @param config\n     * @return\n     */\n    public static ScriptSet readScriptSet(JSONObject config) {\n        JSONArray array = config.getJSONArray(SCRIPTS_TAG);\n        // QDLScriptLibrary library = new QDLScriptLibrary(QDL_VIRTUAL_FILE_SYSTEM_SCHEME);\n        ScriptSet<QDLScript> scriptSet = new ScriptSet<>();\n        for (int i = 0; i < array.size(); i++) {\n            QDLScript qdlScript = Scripts.fromJSON(array.getJSONObject(i));\n            scriptSet.add(qdlScript);\n        }\n        return scriptSet;\n    }\n\n    /**\n     * Creates a script from a file. Note that this takes a convenience approach:\n     * If the file name is the same as one of the execute phases, the phase is\n     * set to that and you are done. If not, you must set it later if needed.\n     * See also {@link #createCfg(JSONObject, String)} which does the actual work.\n     * @param fileName\n     * @return\n     * @throws Throwable\n     */\n    public static JSONObject createCfg(String fileName) throws Throwable {\n        // For new call.\n        return createCfg(new JSONObject(), fileName);\n    }\n\n\n    /**\n     * NOTE that this creates the JSONObject from a string, but does not have a file, so it creates a file name\n     * that is the execution phase. This takes a line which is the actual script and a phase then\n     * creates a {@link QDLScript} from it, which is turned in to a complete JSON configuration.\n     * <br/><br/>\n\n     *\n     * @param rawScript\n     * @return\n     * @throws Throwable\n     */\n    public static JSONObject createCfgFromString(String rawScript, String execPhase) throws Throwable {\n        JSONObject jsonObject = new JSONObject();\n        XProperties xp = new XProperties();\n        xp.put(ID, execPhase + QDLVersion.DEFAULT_FILE_EXTENSION);\n        xp.put(EXEC_PHASE, execPhase);\n        xp.put(LANGUAGE, QDLVersion.LANGUAGE_NAME);\n        xp.put(LANG_VERSION, QDLVersion.VERSION);\n        xp.put(SCRIPT_VERSION, \"1.0\");\n        xp.put(CREATE_TIME, Iso8601.date2String(new Date()));\n        xp.put(LAST_MODIFIED, Iso8601.date2String(new Date()));\n        QDLScript qdlScript = new QDLScript(new StringReader(rawScript), xp);\n        JSONObject scripts = JSONScriptUtil.createConfig();\n        JSONScriptUtil.addScript(scripts, qdlScript);\n        jsonObject.put(CONFIG_TAG, scripts);\n        return jsonObject;\n\n    }\n\n    /**\n     * This creates a simple script with no path information, just the name for the file and\n     * will add it to the {@link JSONObject} argument\n     * <br/><br/>\n     * So this read a file, creates a {@link QDLScript} from its contents and adds it to the\n     * current list of scripts. \n     * @param currentConfig\n     * @param filePath\n     * @return\n     * @throws Throwable\n     */\n    public static JSONObject createCfg(JSONObject currentConfig, String filePath) throws Throwable {\n        String fileName = filePath.substring(filePath.lastIndexOf(File.pathSeparator));\n        QDLScript qdlScript = createCfg(fileName, filePath);\n        JSONObject scripts = null;\n        if(currentConfig.containsKey(CONFIG_TAG)){\n            scripts = currentConfig.getJSONObject(CONFIG_TAG); // so we add to it\n        }else {\n            scripts = JSONScriptUtil.createConfig();\n        }\n        JSONScriptUtil.addScript(scripts, qdlScript);\n        currentConfig.put(CONFIG_TAG, scripts);\n        return currentConfig;\n\n    }\n\n    /**\n     * This will create a QDL script with the relative path.\n     *\n     * @param relativePath -- the path relative some directory including file name\n     * @param absolutePath -- the actual path on the system that will be used to load this script.\n     * @return\n     * @throws Throwable\n     */\n    protected static QDLScript createCfg(String relativePath, String absolutePath) throws Throwable {\n\n        String script = FileUtil.readFileAsString(absolutePath);\n        XProperties xp = new XProperties();\n        String scriptName = absolutePath.substring(absolutePath.lastIndexOf(File.separator) + 1); // drop extension\n        scriptName = scriptName.substring(0, scriptName.lastIndexOf(\".\"));\n        switch (scriptName) {\n            case SRE_EXEC_INIT:\n                xp.put(EXEC_PHASE, SRE_EXEC_INIT);\n                break;\n            case SRE_PRE_AUTH:\n                xp.put(EXEC_PHASE, SRE_PRE_AUTH);\n                break;\n            case SRE_POST_AUTH:\n                xp.put(EXEC_PHASE, SRE_POST_AUTH);\n                break;\n            case SRE_PRE_AT:\n                xp.put(EXEC_PHASE, SRE_PRE_AT);\n                break;\n            case SRE_POST_AT:\n                xp.put(EXEC_PHASE, SRE_POST_AT);\n                break;\n            case SRE_PRE_REFRESH:\n                xp.put(EXEC_PHASE, SRE_PRE_REFRESH);\n                break;\n            case SRE_POST_REFRESH:\n                xp.put(EXEC_PHASE, SRE_POST_REFRESH);\n                break;\n            default:\n                // no automatic phase given. Have to get it\n                xp.put(EXEC_PHASE, SRE_NO_EXEC_PHASE);\n        }\n       File f = new File(absolutePath);\n        Date createTS = new Date();\n                  createTS.setTime(f.lastModified());\n        xp.put(ID, relativePath);\n        xp.put(LANGUAGE, QDLVersion.LANGUAGE_NAME);\n        xp.put(LANG_VERSION, QDLVersion.VERSION);\n        xp.put(SCRIPT_VERSION, \"1.0\");\n        xp.put(CREATE_TIME, Iso8601.date2String(createTS));\n        xp.put(LAST_MODIFIED, Iso8601.date2String(createTS));\n        xp.put(\"length\", f.length());\n        QDLScript qdlScript = new QDLScript(new StringReader(script), xp);\n        return qdlScript;\n    }\n\n    /**\n     * <h1>NOTE This is under development and should not be used yet!</h1>\n     * This will take a given directory and read <b><i>EVERYTHING</i></b> in it and return\n     * a JSON representation of it. The scripting facility will treat this as a library and\n     * when evaluating it, will create a virtual file system (VFS) against which you may make calls.\n     * <br/><br/>\n     * In server mode, only such a VFS is available. Calls for other scripts, loading modules and reading\n     * files will all be done against this, so you don't need to worry about it.\n     *\n     * @param rootDir\n     * @return\n     * @throws Throwable\n     */\n    public static JSONObject readDir(File rootDir) throws Throwable {\n\n        if (!rootDir.exists()) {\n            throw new IllegalStateException(\"Error: \\\"\" + rootDir + \"\\\" does not exist.\");\n        }\n        if (!rootDir.isDirectory()) {\n            throw new IllegalArgumentException(\"Error: \\\"\" + rootDir + \"\\\" must be a directory.\");\n        }\n        if (!rootDir.canRead()) {\n            throw new IllegalStateException(\"Error: \\\"\" + rootDir + \"\\\" cannot be read.\");\n        }\n        JSONObject repo = new JSONObject();\n        for (File file : rootDir.listFiles()) {\n            if (file.isDirectory()) {\n                readDir(rootDir, file, repo);\n            } else {\n                String relative = rootDir.toURI().relativize(file.toURI()).getPath();\n\n                if (relative.endsWith(QDLVersion.DEFAULT_FILE_EXTENSION)) {\n                    QDLScript qdlScript = createCfg(relative, file.getAbsolutePath());\n                    JSONScriptUtil.addScript(repo, qdlScript);\n                } else {\n                    FileEntries.addFile(repo, relative, file, AbstractEvaluator.FILE_OP_AUTO);\n                }\n            }\n        }\n        return repo;\n    }\n\n\n    public static JSONObject readDir(File rootDir, File dir, JSONObject repo) throws Throwable {\n        for (File file : dir.listFiles()) {\n            if (file.isDirectory()) {\n                readDir(rootDir, file, repo);\n            } else {\n                String relative = rootDir.toURI().relativize(file.toURI()).getPath();\n\n                if (relative.endsWith(QDLVersion.DEFAULT_FILE_EXTENSION)) {\n                    QDLScript qdlScript = createCfg(relative, file.getAbsolutePath());\n                    JSONScriptUtil.addScript(repo, qdlScript);\n                } else {\n                    FileEntries.addFile(repo, relative, file, AbstractEvaluator.FILE_OP_AUTO);\n                }\n            }\n        }\n        return repo;\n    }\n\n    public static JSONObject readDir(String directory) throws Throwable {\n        return readDir(new File(directory));\n    }\n\n    public static JSONObject createNCSA() {\n        // Creates a fully functional client to access the NCSA LDAP. Note that the uid claim has to be set\n        // (because we can't get it from local login) and there has to be a connection the VPN for this\n        // to work.\n\n        StringBuffer script = new StringBuffer();\n        script.append(\"claims.uid := 'jgaynor';\\n\");\n        script.append(\"f. := new_template('ncsa');\\n\");\n        script.append(\"claim_sources.0. := create_source(f.);\\n\");\n        XProperties xp = new XProperties();\n        xp.put(EXEC_PHASE, SRE_PRE_AUTH);\n        xp.put(ID, SRE_PRE_AUTH + QDLVersion.DEFAULT_FILE_EXTENSION);\n        xp.put(LANGUAGE, \"qdl\");\n        xp.put(LANG_VERSION, \"1.0\");\n        xp.put(SCRIPT_VERSION, \"1.0\");\n        QDLScript qdlScript = new QDLScript(new StringReader(script.toString()), xp);\n        JSONObject scripts = JSONScriptUtil.createConfig();\n       scripts =  JSONScriptUtil.addScript(scripts, qdlScript);\n\n        script = new StringBuffer();\n        script.append(\"if[\");\n        script.append(\"  in_group(claims.isMemberOf., 'all_users')\");\n        script.append(\"]then[\");\n        script.append(\"  claims.check := 'in group';\");\n        script.append(\"]else[\");\n        script.append(\"  claims.check := 'not in group';\");\n        script.append(\"]; //end if\");\n        xp = new XProperties();\n        xp.put(EXEC_PHASE, SRE_POST_AT);\n        xp.put(ID, SRE_POST_AT + QDLVersion.DEFAULT_FILE_EXTENSION);\n        xp.put(LANGUAGE, \"qdl\");\n        xp.put(LANG_VERSION, \"1.0\");\n        xp.put(SCRIPT_VERSION, \"1.0\");\n        qdlScript = new QDLScript(new StringReader(script.toString()), xp);\n       scripts =  JSONScriptUtil.addScript(scripts, qdlScript);\n\n        JSONObject jsonObject = new JSONObject();\n\n        jsonObject.put(CONFIG_TAG, scripts);\n        System.out.println(jsonObject.toString(2));\n        return jsonObject;\n\n    }\n\n    protected JSONObject createFileEntry(String contents) {\n        return new JSONObject();\n\n    }\n\n    public static JSONObject createFS() {\n        // Creates a fully functional configuration for a client to access the local FS claim source\n        JSONObject jsonObject = new JSONObject();\n\n        StringBuffer script = new StringBuffer();\n        script.append(\"f. := new_template('file');\\n\");\n        script.append(\"f.file_path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/test-claims.json';\\n\");\n        script.append(\"claim_sources.0. := create_source(f.);\\n\");\n        XProperties xp = new XProperties();\n        xp.put(EXEC_PHASE, SRE_EXEC_INIT);\n        xp.put(ID, SRE_EXEC_INIT + QDLVersion.DEFAULT_FILE_EXTENSION);\n        xp.put(LANGUAGE, \"qdl\");\n        xp.put(LANG_VERSION, \"1.0\");\n        xp.put(SCRIPT_VERSION, \"1.0\");\n        QDLScript qdlScript = new QDLScript(new StringReader(script.toString()), xp);\n        JSONObject scripts = JSONScriptUtil.createConfig();\n        JSONScriptUtil.addScript(scripts, qdlScript);\n\n        script = new StringBuffer();\n        script.append(\"say(claim_sources.);\");\n        script.append(\"say(flow_states.);\");\n        xp = new XProperties();\n        xp.put(EXEC_PHASE, SRE_PRE_AT);\n        xp.put(ID, SRE_PRE_AT + QDLVersion.DEFAULT_FILE_EXTENSION);\n        xp.put(LANGUAGE, \"qdl\");\n        xp.put(LANG_VERSION, \"1.0\");\n        xp.put(SCRIPT_VERSION, \"1.0\");\n        qdlScript = new QDLScript(new StringReader(script.toString()), xp);\n        scripts = JSONScriptUtil.createConfig();\n        JSONScriptUtil.addScript(scripts, qdlScript);\n\n\n        jsonObject.put(CONFIG_TAG, scripts);\n        System.out.println(jsonObject.toString(2));\n        return jsonObject;\n    }\n\n    protected static void testLoadDir() {\n        try {\n            String directory = \"/home/ncsa/dev/ncsa-git/oa4mp/qdl/src/main/resources/scripts\";\n            JSONObject j = readDir(directory);\n            JSONObject jsonObject = new JSONObject();\n\n            jsonObject.put(CONFIG_TAG, j);\n            System.out.println(jsonObject.toString(2));\n        } catch (Throwable t) {\n            t.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        // testLoadDir();\n       System.out.println(createNCSA().toString(1));\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/QDLJSONConfigUtil.java b/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/QDLJSONConfigUtil.java
--- a/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/QDLJSONConfigUtil.java	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-loader/src/main/java/edu/uiuc/ncsa/myproxy/oa4mp/qdl/scripting/QDLJSONConfigUtil.java	(date 1683029416251)
@@ -323,7 +323,7 @@
 
         StringBuffer script = new StringBuffer();
         script.append("f. := new_template('file');\n");
-        script.append("f.file_path := '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/test-claims.json';\n");
+        script.append("f.file_path := '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/test-claims.json';\n");
         script.append("claim_sources.0. := create_source(f.);\n");
         XProperties xp = new XProperties();
         xp.put(EXEC_PHASE, SRE_EXEC_INIT);
Index: server-admin/src/main/resources/qdl/ligo/vo4/init.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n   Use  -- for IGWN clients\n\n   {\"tokens\": {\"access\": {\n     \"lifetime\": 10800000,\n     \"qdl\":  {\n      \"args\":[\"igwn\"],\n      \"load\": \"ligo/vo4/at.qdl\",\n      \"xmd\": {\"exec_phase\":   [\n       \"post_token\",\n       \"post_exchange\",\n       \"post_refresh\"\n      ]}\n     },\n     \"type\": \"sci_token\"\n    }}}\n\n*/\n SS('IGWN','starting init.');\n       all_audience. := ['ANY', 'LIGO', 'segments.ligo.org'];\n         robot_caput := 'igwn.robot:'; // marker in scopes for robots\n  access_token.'ver' := 'scitoken:2.0';\n\n SS('IGWN', script_args()  + '=' + to_string(script_args(-1)));\n // is_igwn := script_args()==1?script_args(0)=='igwn':false;\n SS('IGWN','is_igwn=='+ is_igwn);\n\n   if [!is_defined(claims.'eppn')]\n then [err('Missing EPPN. Cannot determine scopes.', 'invalid_request');];\n /*\n   New authZ policies as per https://docs.google.com/presentation/d/1WbfUwAE6xTVeC2ZhKKHTQF0_6deKa14ieErRz5pD77M/edit#slide=id.g1677b86136f_0_16\n\n  scope (old)       scope (new)         group(s)\n  read:/frames      read:/frames        Communities:LSCVirgoLIGOGroupMembers\n                    gwdatafind.read     gw-astronomy:KAGRA-LIGO:members\n  write:/frames     write:/frames       Services:XRootD:SciTokens:write-frames:authorized\n  query:/DQSegDB    dqsegdb.read        Communities:LSCVirgoLIGOGroupMembers\n                                        gw-astronomy:KAGRA-LIGO:members\n  insert:/DQSegDB   dqsegdb.create      Communities:LVC:SegDB:SegDBWriter\n  read:/GraceDB     gracedb.read        Communities:LSCVirgoLIGOGroupMembers\n                                        gw-astronomy:KAGRA-LIGO:members\n  write:/GraceDB    N/A                 N/A (managed via service ACLs)\n\n */\n          ζ.'Services:OSGPilotTest:SciTokens:scope_create' := ['scope_create'];\n        ζ.'Services:OSGPilotTest:SciTokens:compute_create' := ['compute_create'];\n        ζ.'Services:OSGPilotTest:SciTokens:compute_cancel' := ['compute_cancel'];\n        ζ.'Services:OSGPilotTest:SciTokens:compute_modify' := ['compute_modify'];\n          ζ.'Services:OSGPilotTest:SciTokens:compute_read' := ['compute_read'];\n\n    if[is_igwn][\n    // These are documented in https://git.ligo.org/computing/igwnscitokenscopes/-/blob/main/SciTokenScopes.json\n                                                  all_audience. := ['ANY'];\n    // The following are created with the extract.qdl script and pasted here.\n    // It's the only way to be sure the policy document is actually processed right,\n    // since doing it manually is a real error-prone chore.\n                              ζ.'gw-astronomy:KAGRA-LIGO:members' ≔ ['read:/frames','read:/ligo','read:/kagra','read:/virgo','read:/shared','read:/staging','dqsegdb.read','gracedb.read','gwdatafind.read'];\n                      ζ.'Communities:LVC:LSC:LDG:CIT:LDGCITUsers' ≔ ['write:/staging/${uid}'];\n               ζ.'CO:COU:LDG Grid Account Holders:members:active' ≔ ['write:/staging/${uid}'];\n               ζ.'Services:WLCG:SciTokens:scopes:read:authorized' ≔ ['compute.read'];\n             ζ.'Services:WLCG:SciTokens:scopes:cancel:authorized' ≔ ['compute.cancel'];\n             ζ.'Services:WLCG:SciTokens:scopes:create:authorized' ≔ ['compute.create'];\n             ζ.'Services:WLCG:SciTokens:scopes:modify:authorized' ≔ ['compute.modify'];\n            ζ.'Services:DQSegDB:SciTokens:scopes:read:authorized' ≔ ['dqsegdb.read'];\n            ζ.'Services:GraceDB:SciTokens:scopes:read:authorized' ≔ ['gracedb.read'];\n          ζ.'Services:DQSegDB:SciTokens:scopes:create:authorized' ≔ ['dqsegdb.create'];\n          ζ.'Services:DQSegDB:SciTokens:scopes:modify:authorized' ≔ ['dqsegdb.modify'];\n         ζ.'Services:gwDataFind:SciTokens:scopes:read:authorized' ≔ ['gwdatafind.read'];\n        ζ.'Services:XRootD:SciTokens:scopes:read-ligo:authorized' ≔ ['read:/ligo'];\n       ζ.'Services:XRootD:SciTokens:scopes:read-kagra:authorized' ≔ ['read:/kagra'];\n       ζ.'Services:XRootD:SciTokens:scopes:read-virgo:authorized' ≔ ['read:/virgo'];\n      ζ.'Services:XRootD:SciTokens:scopes:read-frames:authorized' ≔ ['read:/frames'];\n      ζ.'Services:XRootD:SciTokens:scopes:read-shared:authorized' ≔ ['read:/shared'];\n     ζ.'Services:XRootD:SciTokens:scopes:read-staging:authorized' ≔ ['read:/staging'];\n     ζ.'Services:XRootD:SciTokens:scopes:write-frames:authorized' ≔ ['write:/frames'];\n    ζ.'Services:SciTokenTesting:SciTokens:scopes:read:authorized' ≔ ['scitokentesting.read'];\n   ζ.'Services:SciTokenTesting:SciTokens:scopes:write:authorized' ≔ ['scitokentesting.write'];\n\n\n    ]else[\n                  ζ.'Communities:LSCVirgoLIGOGroupMembers' := ['read:/DQSegDB' ,'read:/frames', 'read:/GraceDB','write:/GraceDB'];   //CIL-1345\n                     ζ.'Communities:LVC:SegDB:SegDBWriter' := ['write:/DQSegDB'];\n                       ζ.'gw-astronomy:KAGRA-LIGO:members' := ['read:/GraceDB', 'read:/frames','write:/GraceDB']; //CIL-1345, CIL-1427\n     ζ.'Services:XRootD:SciTokens:write-frames:authorized' := ['write:/frames']; //CIL-1414,\n      ζ.'Services:XRootD:SciTokens:read-frames:authorized' := ['read:/frames']; //CIL-1415\n    ];\n        get_permissions(γ.) -> reduce(@~,ζ\\(γ\\*\\name));\n //     get_permissions(γ.) -> ~values(mask(ζ., in_group2(keys(ζ.),γ.)));\n\n         robots. := ~mask(scopes., 0 == starts_with(scopes., robot_caput));\nSS('*** LIGO -- robots = ' + to_string(robots.));\n      if [1 < size(robots.)]\n    then [err('too many robots (' + size(robots.) +')','access_denied');];\n\n    is_robot := 1 == size(robots.);\n\n   // If there is no audience, use all_audience. Otherwise check if there is an override in tx_audience and use that.\n    requested_audience. := (size(tx_audience.) == 0)?(size(audience.)==0?all_audience.:audience.):tx_audience.;\n\n     // Scope setup.\n    requested_scopes. := (0 < size(tx_scopes.))?tx_scopes.:scopes.;\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-admin/src/main/resources/qdl/ligo/vo4/init.qdl b/server-admin/src/main/resources/qdl/ligo/vo4/init.qdl
--- a/server-admin/src/main/resources/qdl/ligo/vo4/init.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-admin/src/main/resources/qdl/ligo/vo4/init.qdl	(date 1683055172849)
@@ -16,14 +16,12 @@
     }}}
 
 */
- SS('IGWN','starting init.');
+
        all_audience. := ['ANY', 'LIGO', 'segments.ligo.org'];
          robot_caput := 'igwn.robot:'; // marker in scopes for robots
   access_token.'ver' := 'scitoken:2.0';
 
- SS('IGWN', script_args()  + '=' + to_string(script_args(-1)));
  // is_igwn := script_args()==1?script_args(0)=='igwn':false;
- SS('IGWN','is_igwn=='+ is_igwn);
 
    if [!is_defined(claims.'eppn')]
  then [err('Missing EPPN. Cannot determine scopes.', 'invalid_request');];
@@ -88,7 +86,6 @@
  //     get_permissions(γ.) -> ~values(mask(ζ., in_group2(keys(ζ.),γ.)));
 
          robots. := ~mask(scopes., 0 == starts_with(scopes., robot_caput));
-SS('*** LIGO -- robots = ' + to_string(robots.));
       if [1 < size(robots.)]
     then [err('too many robots (' + size(robots.) +')','access_denied');];
 
Index: server-admin/src/main/resources/qdl/utils/cs.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env -S qdl-run\n/*\n  Script to check every file in the invocation directory for syntax.\n  Or, failing that, the directory of the argumemnt\n  this will print out the file name and failure plus a success count.\n */\n // test with arg /home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests/local\nroot_dir ≔ size(args())≠1?info().'user'.'invocation_dir':args().0;\nroot_dir ≔ root_dir + ('.*/'=~root_dir?'':'/');\nfiles. ≔ dir(root_dir);\ni ≔0;\nwhile[x ∈ files.]\n  do[\n      if['.*[mq]dl'=~x] // check modules and QDL scripts\n        then[\n              y≔ file_read(root_dir + x);\n              message ≔ check_syntax(y);\n               if[size(message) ≡ 0]\n             then[i++;]\n             else[ say('failed syntax check for ' +  x + ':\\n  ' + message);];\n           ]; //end if\n\n   ];// end while\n say(i + ' files ok'  );
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-admin/src/main/resources/qdl/utils/cs.qdl b/server-admin/src/main/resources/qdl/utils/cs.qdl
--- a/server-admin/src/main/resources/qdl/utils/cs.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-admin/src/main/resources/qdl/utils/cs.qdl	(date 1683029457244)
@@ -4,7 +4,7 @@
   Or, failing that, the directory of the argumemnt
   this will print out the file name and failure plus a success count.
  */
- // test with arg /home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests/local
+ // test with arg /home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests/local
 root_dir ≔ size(args())≠1?info().'user'.'invocation_dir':args().0;
 root_dir ≔ root_dir + ('.*/'=~root_dir?'':'/');
 files. ≔ dir(root_dir);
Index: server-test/src/main/resources/flow-tests/driver.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n   Basic driver script. This prints the description, sets up the client\n   for the initial leg, manages the login. One return, the CLC is fully\n   ready for testing. Arguments are\n   0 - configuration\n   1 - (optional) any parameters, passed to the set_param call in the CLC.\n\n   0-th argument is a stem with the following entries\n          file - the FQ path to the configuration file\n            id - the identifier for the client configuration\n           idp - the IDP the user should use\n   description - user understandable description of what is being tested\n     flow_type - one of 'uri' or 'df' flow authorization code flow resp. device flow\n\n\n     This returns\n      0 - flow worked\n      1 - unable to initiate flow\n     -1 - user aborted\n*/\n\n⊨ 0 < size(args()) < 3 : 'incorrect number of arguments, expected 1 or 2 and got ' + size(args());\n\ncfg. := args().0;\n\nclc#init(cfg.'file', cfg.'id');\nif[size(args()) == 2][set_param(args().1);];\nsay('Client test for ' + cfg.'id');\nsay(cfg.'description');\nsay(' IDP: ' + cfg.'idp');\nflow_ok := 1;\n  if[\n     cfg.'flow_type' == 'df'\n    ][\n     say('Flow: device');\n     clc#df();\n    out := scan('verfication URI is in clipboard. Login, then hit any key when done, q to abort, s to skip.');\n    flow_ok := size(trim(out))==0?'ok':out;\n    if[flow_ok != 'ok'][return(flow_ok);];\n    ]; // end device flow\n  if[\n     cfg.'flow_type' == 'uri'\n   ][\n     say('Flow: auth code');\n     clc#uri(); // puts it in the clipboard.\n     say('authorization URI is in the clipboard. Please log in.');\n    while[true]\n       do[\n         try[\n           out :=  scan('copy the callback uri to clipboard and hit any key when done or q to abort, s to skip.');\n           flow_ok := size(trim(out))==0?'ok':out;\n           if[flow_ok != 'ok'][return(flow_ok);];\n           grant();\n           return(flow_ok);\n          ]catch[\n             say('uh-oh that didn\\'t work, try again:' + error_message);\n          ];  //end catch\n      ]; // end while\n   ]; //end auth code flow\n    return(flow_ok);\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/driver.qdl b/server-test/src/main/resources/flow-tests/driver.qdl
--- a/server-test/src/main/resources/flow-tests/driver.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/driver.qdl	(date 1683038268662)
@@ -19,11 +19,10 @@
      -1 - user aborted
 */
 
-⊨ 0 < size(args()) < 3 : 'incorrect number of arguments, expected 1 or 2 and got ' + size(args());
-
+⊨ 1 <= size(args()) < 3 : 'incorrect number of arguments, expected 1 or 2 and got ' + size(args());
 cfg. := args().0;
-
 clc#init(cfg.'file', cfg.'id');
+debugger(1,'driver init ok');
 if[size(args()) == 2][set_param(args().1);];
 say('Client test for ' + cfg.'id');
 say(cfg.'description');
Index: server-test/src/main/resources/flow-tests/main.qdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>root:= '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests/';\nconfig_file := '/home/ncsa/dev/csd/config/client-oa2.xml';\n// Names of scripts to run.\ntest_list. := root +  [\n      'no_config'\n  ];\n\nwhile[x ∈ test_list.][\n      try[\n        script_run(x, config_file);\n      ]catch[\n        say('test failed:' + x);\n      ]; // end catch\n   ]; //end for
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server-test/src/main/resources/flow-tests/main.qdl b/server-test/src/main/resources/flow-tests/main.qdl
--- a/server-test/src/main/resources/flow-tests/main.qdl	(revision e08db83bc0dcf1754664f4f03feb87200cab76ef)
+++ b/server-test/src/main/resources/flow-tests/main.qdl	(date 1683029457184)
@@ -1,4 +1,4 @@
-root:= '/home/ncsa/dev/ncsa-git/oa4mp/oa4mp-server-test-oauth2/src/main/resources/flow-tests/';
+root:= '/home/ncsa/dev/ncsa-git/oa4mp/server-test/src/main/resources/flow-tests/';
 config_file := '/home/ncsa/dev/csd/config/client-oa2.xml';
 // Names of scripts to run.
 test_list. := root +  [
